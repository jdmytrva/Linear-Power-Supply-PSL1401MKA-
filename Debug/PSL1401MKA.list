
PSL1401MKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f8  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001578  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f40  08006f40  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  08006f40  08006f40  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f40  08006f40  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f44  08006f44  00016f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08006f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  20000290  080071d8  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a30  080071d8  00020a30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d99  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002845  00000000  00000000  00032052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000520c  00000000  00000000  00034897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  00039aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed0  00000000  00000000  0003a248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c389  00000000  00000000  0003b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6fc  00000000  00000000  000474a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00043ea3  00000000  00000000  00052b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00096a40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001610  00000000  00000000  00096a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059b0 	.word	0x080059b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	080059b0 	.word	0x080059b0

08000210 <flash_erase_page>:
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
	while (FLASH->SR & FLASH_SR_BSY);
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <flash_erase_page+0x3c>)
 8000212:	4613      	mov	r3, r2
 8000214:	68d1      	ldr	r1, [r2, #12]
 8000216:	07c9      	lsls	r1, r1, #31
 8000218:	d4fc      	bmi.n	8000214 <flash_erase_page+0x4>

		if (FLASH->SR & FLASH_SR_EOP) {
 800021a:	68d1      	ldr	r1, [r2, #12]
 800021c:	0689      	lsls	r1, r1, #26
			FLASH->SR = FLASH_SR_EOP;
 800021e:	bf44      	itt	mi
 8000220:	2120      	movmi	r1, #32
 8000222:	60d1      	strmi	r1, [r2, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 8000224:	691a      	ldr	r2, [r3, #16]
 8000226:	f042 0202 	orr.w	r2, r2, #2
 800022a:	611a      	str	r2, [r3, #16]
		FLASH->AR = address;
 800022c:	6158      	str	r0, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800022e:	691a      	ldr	r2, [r3, #16]
 8000230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000234:	611a      	str	r2, [r3, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <flash_erase_page+0x3c>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	0692      	lsls	r2, r2, #26
 800023c:	d5fc      	bpl.n	8000238 <flash_erase_page+0x28>
		FLASH->SR = FLASH_SR_EOP;
 800023e:	2220      	movs	r2, #32
 8000240:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 8000242:	691a      	ldr	r2, [r3, #16]
 8000244:	f022 0202 	bic.w	r2, r2, #2
 8000248:	611a      	str	r2, [r3, #16]
}
 800024a:	4770      	bx	lr
 800024c:	40022000 	.word	0x40022000

08000250 <flash_unlock>:


void flash_unlock(void)
{
	  FLASH->KEYR = FLASH_KEY1;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <flash_unlock+0x10>)
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <flash_unlock+0x14>)
 8000254:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 8000256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800025a:	605a      	str	r2, [r3, #4]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	45670123 	.word	0x45670123

08000268 <flash_lock>:

void flash_lock()
{
	FLASH->CR |= FLASH_CR_LOCK;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <flash_lock+0xc>)
 800026a:	6913      	ldr	r3, [r2, #16]
 800026c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000270:	6113      	str	r3, [r2, #16]
}
 8000272:	4770      	bx	lr
 8000274:	40022000 	.word	0x40022000

08000278 <flash_write>:

void flash_write(uint32_t address,uint32_t data)
{


	while (FLASH->SR & FLASH_SR_BSY);
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <flash_write+0x48>)
{
 800027a:	b510      	push	{r4, lr}
 800027c:	461a      	mov	r2, r3
	while (FLASH->SR & FLASH_SR_BSY);
 800027e:	68dc      	ldr	r4, [r3, #12]
 8000280:	07e4      	lsls	r4, r4, #31
 8000282:	d4fc      	bmi.n	800027e <flash_write+0x6>
	if (FLASH->SR & FLASH_SR_EOP) {
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	06a4      	lsls	r4, r4, #26
		FLASH->SR = FLASH_SR_EOP;
 8000288:	bf44      	itt	mi
 800028a:	2420      	movmi	r4, #32
 800028c:	60dc      	strmi	r4, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 800028e:	6913      	ldr	r3, [r2, #16]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <flash_write+0x48>)
    *(__IO uint16_t*)address = (uint16_t)data;
 8000298:	b28b      	uxth	r3, r1
 800029a:	8003      	strh	r3, [r0, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 800029c:	4613      	mov	r3, r2
 800029e:	68d4      	ldr	r4, [r2, #12]
 80002a0:	06a4      	lsls	r4, r4, #26
 80002a2:	d5fc      	bpl.n	800029e <flash_write+0x26>
    		FLASH->SR = FLASH_SR_EOP;
 80002a4:	2420      	movs	r4, #32


	address+=2;
	data>>=16;
    *(__IO uint16_t*)address = (uint16_t)data;
 80002a6:	0c09      	lsrs	r1, r1, #16
    		FLASH->SR = FLASH_SR_EOP;
 80002a8:	60d4      	str	r4, [r2, #12]
    *(__IO uint16_t*)address = (uint16_t)data;
 80002aa:	8041      	strh	r1, [r0, #2]
    while (!(FLASH->SR & FLASH_SR_EOP));
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	0692      	lsls	r2, r2, #26
 80002b0:	d5fc      	bpl.n	80002ac <flash_write+0x34>
    		FLASH->SR = FLASH_SR_EOP;
 80002b2:	2220      	movs	r2, #32
 80002b4:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 80002b6:	691a      	ldr	r2, [r3, #16]
 80002b8:	f022 0201 	bic.w	r2, r2, #1
 80002bc:	611a      	str	r2, [r3, #16]

}
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	40022000 	.word	0x40022000

080002c4 <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
void flash_write_block()
{
 80002c4:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c6:	b672      	cpsid	i
	__disable_irq();
	flash_unlock();
 80002c8:	f7ff ffc2 	bl	8000250 <flash_unlock>
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = (void *)&LoggingData;

	logDebugD("size: ",size,0);
 80002cc:	4810      	ldr	r0, [pc, #64]	; (8000310 <flash_write_block+0x4c>)
 80002ce:	f005 f887 	bl	80053e0 <printToBufferWithoutEndUART1>
	logDebugD("val: ",*(source_adr + 0),0);
 80002d2:	4c10      	ldr	r4, [pc, #64]	; (8000314 <flash_write_block+0x50>)
	logDebugD("size: ",size,0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80002da:	480f      	ldr	r0, [pc, #60]	; (8000318 <flash_write_block+0x54>)
 80002dc:	f005 f8be 	bl	800545c <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 80002e0:	480b      	ldr	r0, [pc, #44]	; (8000310 <flash_write_block+0x4c>)
 80002e2:	f005 f87d 	bl	80053e0 <printToBufferWithoutEndUART1>
 80002e6:	2200      	movs	r2, #0
 80002e8:	6821      	ldr	r1, [r4, #0]
 80002ea:	480c      	ldr	r0, [pc, #48]	; (800031c <flash_write_block+0x58>)
 80002ec:	f005 f8b6 	bl	800545c <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <flash_write_block+0x5c>)
 80002f2:	f7ff ff8d 	bl	8000210 <flash_erase_page>
	for (i = 0; i < size/4; ++i)
 80002f6:	4d0b      	ldr	r5, [pc, #44]	; (8000324 <flash_write_block+0x60>)
	flash_erase_page(pageAdr );
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <flash_write_block+0x5c>)
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80002fa:	f854 1b04 	ldr.w	r1, [r4], #4
 80002fe:	f7ff ffbb 	bl	8000278 <flash_write>
	for (i = 0; i < size/4; ++i)
 8000302:	3004      	adds	r0, #4
 8000304:	42a8      	cmp	r0, r5
 8000306:	d1f8      	bne.n	80002fa <flash_write_block+0x36>
    }

	flash_lock();
 8000308:	f7ff ffae 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800030c:	b662      	cpsie	i
	__enable_irq();
	return 1;
}
 800030e:	bd38      	pop	{r3, r4, r5, pc}
 8000310:	08005ac8 	.word	0x08005ac8
 8000314:	20000888 	.word	0x20000888
 8000318:	08005ad0 	.word	0x08005ad0
 800031c:	08005ad7 	.word	0x08005ad7
 8000320:	0801e400 	.word	0x0801e400
 8000324:	0801e59c 	.word	0x0801e59c

08000328 <flash_read_block>:

	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
	uint32_t *dest_adr = (void *)&LoggingData;

	for (i=0; i < size/4; ++i)
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <flash_read_block+0x18>)
{
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <flash_read_block+0x1c>)
	for (i=0; i < size/4; ++i)
 800032c:	4906      	ldr	r1, [pc, #24]	; (8000348 <flash_read_block+0x20>)
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 800032e:	f853 0b04 	ldr.w	r0, [r3], #4
	for (i=0; i < size/4; ++i)
 8000332:	428b      	cmp	r3, r1
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000334:	f842 0b04 	str.w	r0, [r2], #4
	for (i=0; i < size/4; ++i)
 8000338:	d1f9      	bne.n	800032e <flash_read_block+0x6>
	}

	return 1;

}
 800033a:	2001      	movs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000888 	.word	0x20000888
 8000344:	0801e400 	.word	0x0801e400
 8000348:	0801e59c 	.word	0x0801e59c

0800034c <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 800034e:	6804      	ldr	r4, [r0, #0]
{
 8000350:	4607      	mov	r7, r0
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000352:	428c      	cmp	r4, r1
{
 8000354:	460d      	mov	r5, r1
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000356:	d301      	bcc.n	800035c <flash_read+0x10>
 8000358:	4294      	cmp	r4, r2
 800035a:	d91b      	bls.n	8000394 <flash_read+0x48>
	{
		return EEpromValue;
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800035c:	2600      	movs	r6, #0
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <flash_read+0x4c>)
		logDebugD("Fail to read address: ",address,0);
 8000360:	480e      	ldr	r0, [pc, #56]	; (800039c <flash_read+0x50>)
		EEpromReadStatus = 0;
 8000362:	701e      	strb	r6, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000364:	f005 f83c 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000368:	4632      	mov	r2, r6
 800036a:	4639      	mov	r1, r7
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <flash_read+0x54>)
 800036e:	f005 f875 	bl	800545c <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 8000372:	480a      	ldr	r0, [pc, #40]	; (800039c <flash_read+0x50>)
 8000374:	f005 f834 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000378:	4621      	mov	r1, r4
 800037a:	4632      	mov	r2, r6
 800037c:	4809      	ldr	r0, [pc, #36]	; (80003a4 <flash_read+0x58>)
 800037e:	f005 f86d 	bl	800545c <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 8000382:	4806      	ldr	r0, [pc, #24]	; (800039c <flash_read+0x50>)
 8000384:	f005 f82c 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000388:	4632      	mov	r2, r6
 800038a:	4907      	ldr	r1, [pc, #28]	; (80003a8 <flash_read+0x5c>)
 800038c:	4807      	ldr	r0, [pc, #28]	; (80003ac <flash_read+0x60>)
 800038e:	f005 f865 	bl	800545c <printToBufferUART1D>
		return MinValue;
 8000392:	462c      	mov	r4, r5
	}
}
 8000394:	4620      	mov	r0, r4
 8000396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000398:	20000000 	.word	0x20000000
 800039c:	08005ac8 	.word	0x08005ac8
 80003a0:	08005add 	.word	0x08005add
 80003a4:	08005af4 	.word	0x08005af4
 80003a8:	0801ec00 	.word	0x0801ec00
 80003ac:	08005b06 	.word	0x08005b06

080003b0 <CalibrationWriteToFlash>:
	__enable_irq();

}

uint8_t CalibrationWriteToFlash(void)
{
 80003b0:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationData.CRC_AddresInEEprom);
 80003b2:	4c19      	ldr	r4, [pc, #100]	; (8000418 <CalibrationWriteToFlash+0x68>)
 80003b4:	6860      	ldr	r0, [r4, #4]
 80003b6:	f7ff ff2b 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationData.CRC_AddresInEEprom, CalibrationData.CRC_data);
 80003ba:	e9d4 1000 	ldrd	r1, r0, [r4]
 80003be:	f7ff ff5b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent);
 80003c2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80003c6:	f7ff ff57 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent1);
 80003ca:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80003ce:	f7ff ff53 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent_AddresInEEprom, CalibrationData.CalibrationForCurrent_mA1);
 80003d2:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 80003d6:	f7ff ff4f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent1_AddresInEEprom, CalibrationData.CalibrationForCurrent_mkA1);
 80003da:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80003de:	f7ff ff4b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage_AddresInEEprom, CalibrationData.CalibrationValueForVoltage);
 80003e2:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 80003e6:	f7ff ff47 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage1_AddresInEEprom, CalibrationData.CalibrationValueForVoltage1);
 80003ea:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 80003ee:	f7ff ff43 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage2_AddresInEEprom, CalibrationData.CalibrationValueForVoltage2);
 80003f2:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 80003f6:	f7ff ff3f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationData.ResistanceComp_Ishunt_Wires);
 80003fa:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80003fe:	f7ff ff3b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_MOSFET_AddresInEEprom, CalibrationData.ResistanceComp_MOSFET);
 8000402:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000406:	f7ff ff37 	bl	8000278 <flash_write>
	logDebug("CalibrationWriteToFlash ");
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <CalibrationWriteToFlash+0x6c>)
 800040c:	f004 ffe8 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <CalibrationWriteToFlash+0x70>)
 8000412:	f004 ff7f 	bl	8005314 <printToBufferUART1>

}
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000004 	.word	0x20000004
 800041c:	08005ac8 	.word	0x08005ac8
 8000420:	08005b1d 	.word	0x08005b1d

08000424 <CalibrationFactoryWriteToFlash>:
uint8_t CalibrationFactoryWriteToFlash(void)
{
 8000424:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationDataFactory.CRC_AddresInEEprom);
 8000426:	4c19      	ldr	r4, [pc, #100]	; (800048c <CalibrationFactoryWriteToFlash+0x68>)
 8000428:	6860      	ldr	r0, [r4, #4]
 800042a:	f7ff fef1 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationDataFactory.CRC_AddresInEEprom, CalibrationDataFactory.CRC_data);
 800042e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000432:	f7ff ff21 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent);
 8000436:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800043a:	f7ff ff1d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent1);
 800043e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000442:	f7ff ff19 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent_AddresInEEprom, CalibrationDataFactory.CalibrationForCurrent_mA1);
 8000446:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800044a:	f7ff ff15 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent1_AddresInEEprom, CalibrationDataFactory.CalibrationForCurrent_mkA1);
 800044e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000452:	f7ff ff11 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage);
 8000456:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800045a:	f7ff ff0d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage1);
 800045e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000462:	f7ff ff09 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage2);
 8000466:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800046a:	f7ff ff05 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationDataFactory.ResistanceComp_Ishunt_Wires);
 800046e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000472:	f7ff ff01 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_MOSFET_AddresInEEprom, CalibrationDataFactory.ResistanceComp_MOSFET);
 8000476:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 800047a:	f7ff fefd 	bl	8000278 <flash_write>
	logDebug("CalibrationFactoryWriteToFlash ");
 800047e:	4804      	ldr	r0, [pc, #16]	; (8000490 <CalibrationFactoryWriteToFlash+0x6c>)
 8000480:	f004 ffae 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <CalibrationFactoryWriteToFlash+0x70>)
 8000486:	f004 ff45 	bl	8005314 <printToBufferUART1>
}
 800048a:	bd10      	pop	{r4, pc}
 800048c:	20000054 	.word	0x20000054
 8000490:	08005ac8 	.word	0x08005ac8
 8000494:	08005b36 	.word	0x08005b36

08000498 <CalibrationReadFromFlash>:
uint8_t CalibrationReadFromFlash(void)
{
 8000498:	b538      	push	{r3, r4, r5, lr}
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 800049a:	4c24      	ldr	r4, [pc, #144]	; (800052c <CalibrationReadFromFlash+0x94>)
 800049c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a0:	2100      	movs	r1, #0
 80004a2:	6860      	ldr	r0, [r4, #4]
 80004a4:	f7ff ff52 	bl	800034c <flash_read>
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004ac:	6020      	str	r0, [r4, #0]
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ae:	2100      	movs	r1, #0
 80004b0:	68e0      	ldr	r0, [r4, #12]
 80004b2:	f7ff ff4b 	bl	800034c <flash_read>
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ba:	60a0      	str	r0, [r4, #8]
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004bc:	2100      	movs	r1, #0
 80004be:	6960      	ldr	r0, [r4, #20]
 80004c0:	f7ff ff44 	bl	800034c <flash_read>
	CalibrationData.CalibrationForCurrent_mA1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004c4:	4d1a      	ldr	r5, [pc, #104]	; (8000530 <CalibrationReadFromFlash+0x98>)
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004c6:	6120      	str	r0, [r4, #16]
	CalibrationData.CalibrationForCurrent_mA1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004c8:	462a      	mov	r2, r5
 80004ca:	210a      	movs	r1, #10
 80004cc:	69e0      	ldr	r0, [r4, #28]
 80004ce:	f7ff ff3d 	bl	800034c <flash_read>
	CalibrationData.CalibrationForCurrent_mkA1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004d2:	462a      	mov	r2, r5
	CalibrationData.CalibrationForCurrent_mA1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d4:	61a0      	str	r0, [r4, #24]
	CalibrationData.CalibrationForCurrent_mkA1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004d6:	210a      	movs	r1, #10
 80004d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004da:	f7ff ff37 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004de:	462a      	mov	r2, r5
	CalibrationData.CalibrationForCurrent_mkA1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e0:	6220      	str	r0, [r4, #32]
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004e2:	210a      	movs	r1, #10
 80004e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004e6:	f7ff ff31 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004ea:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004ec:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004ee:	210a      	movs	r1, #10
 80004f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80004f2:	f7ff ff2b 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80004f6:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004f8:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80004fa:	210a      	movs	r1, #10
 80004fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80004fe:	f7ff ff25 	bl	800034c <flash_read>
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000502:	22c8      	movs	r2, #200	; 0xc8
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000504:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000506:	2146      	movs	r1, #70	; 0x46
 8000508:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800050a:	f7ff ff1f 	bl	800034c <flash_read>
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 800050e:	22c8      	movs	r2, #200	; 0xc8
 8000510:	210a      	movs	r1, #10
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000512:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 8000514:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000516:	f7ff ff19 	bl	800034c <flash_read>
 800051a:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <CalibrationReadFromFlash+0x9c>)
 800051e:	f004 ff5f 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <CalibrationReadFromFlash+0xa0>)
 8000524:	f004 fef6 	bl	8005314 <printToBufferUART1>
}
 8000528:	bd38      	pop	{r3, r4, r5, pc}
 800052a:	bf00      	nop
 800052c:	20000004 	.word	0x20000004
 8000530:	000186a0 	.word	0x000186a0
 8000534:	08005ac8 	.word	0x08005ac8
 8000538:	08005b56 	.word	0x08005b56

0800053c <CalibrationReadFromFlashForVerify>:
uint8_t CalibrationReadFromFlashForVerify(void)
{
 800053c:	b538      	push	{r3, r4, r5, lr}
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 800053e:	4c24      	ldr	r4, [pc, #144]	; (80005d0 <CalibrationReadFromFlashForVerify+0x94>)
 8000540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000544:	2100      	movs	r1, #0
 8000546:	6860      	ldr	r0, [r4, #4]
 8000548:	f7ff ff00 	bl	800034c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000550:	6020      	str	r0, [r4, #0]
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000552:	2100      	movs	r1, #0
 8000554:	68e0      	ldr	r0, [r4, #12]
 8000556:	f7ff fef9 	bl	800034c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800055a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800055e:	60a0      	str	r0, [r4, #8]
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 8000560:	2100      	movs	r1, #0
 8000562:	6960      	ldr	r0, [r4, #20]
 8000564:	f7ff fef2 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationForCurrent_mA1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000568:	4d1a      	ldr	r5, [pc, #104]	; (80005d4 <CalibrationReadFromFlashForVerify+0x98>)
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800056a:	6120      	str	r0, [r4, #16]
	CalibrationDataForVerify.CalibrationForCurrent_mA1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 800056c:	462a      	mov	r2, r5
 800056e:	210a      	movs	r1, #10
 8000570:	69e0      	ldr	r0, [r4, #28]
 8000572:	f7ff feeb 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationForCurrent_mkA1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000576:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationForCurrent_mA1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000578:	61a0      	str	r0, [r4, #24]
	CalibrationDataForVerify.CalibrationForCurrent_mkA1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 800057a:	210a      	movs	r1, #10
 800057c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800057e:	f7ff fee5 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000582:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationForCurrent_mkA1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000584:	6220      	str	r0, [r4, #32]
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000586:	210a      	movs	r1, #10
 8000588:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800058a:	f7ff fedf 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800058e:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000590:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 8000592:	210a      	movs	r1, #10
 8000594:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000596:	f7ff fed9 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800059a:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800059c:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800059e:	210a      	movs	r1, #10
 80005a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005a2:	f7ff fed3 	bl	800034c <flash_read>
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005a6:	22c8      	movs	r2, #200	; 0xc8
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005a8:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005aa:	2146      	movs	r1, #70	; 0x46
 80005ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005ae:	f7ff fecd 	bl	800034c <flash_read>
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005b2:	22c8      	movs	r2, #200	; 0xc8
 80005b4:	210a      	movs	r1, #10
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005b6:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005b8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80005ba:	f7ff fec7 	bl	800034c <flash_read>
 80005be:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlashForVerify ");
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <CalibrationReadFromFlashForVerify+0x9c>)
 80005c2:	f004 ff0d 	bl	80053e0 <printToBufferWithoutEndUART1>
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <CalibrationReadFromFlashForVerify+0xa0>)
 80005c8:	f004 fea4 	bl	8005314 <printToBufferUART1>
}
 80005cc:	bd38      	pop	{r3, r4, r5, pc}
 80005ce:	bf00      	nop
 80005d0:	200000a4 	.word	0x200000a4
 80005d4:	000186a0 	.word	0x000186a0
 80005d8:	08005ac8 	.word	0x08005ac8
 80005dc:	08005b70 	.word	0x08005b70

080005e0 <SettingsWriteToFlash>:
//==============
uint8_t SettingsWriteToFlash(void)
{
 80005e0:	b510      	push	{r4, lr}
	flash_erase_page( SettingsData.CRC_AddresInEEprom);
 80005e2:	4c17      	ldr	r4, [pc, #92]	; (8000640 <SettingsWriteToFlash+0x60>)
 80005e4:	6860      	ldr	r0, [r4, #4]
 80005e6:	f7ff fe13 	bl	8000210 <flash_erase_page>
	flash_write( SettingsData.CRC_AddresInEEprom, SettingsData.CRC_data);
 80005ea:	e9d4 1000 	ldrd	r1, r0, [r4]
 80005ee:	f7ff fe43 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option1_AddresInEEprom, SettingsData.Option1);
 80005f2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80005f6:	f7ff fe3f 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeTime_AddresInEEprom, SettingsData.ChargeTime);
 80005fa:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80005fe:	f7ff fe3b 	bl	8000278 <flash_write>
	flash_write( SettingsData.LowVoltage_AddresInEEprom, SettingsData.LowVoltage);
 8000602:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000606:	f7ff fe37 	bl	8000278 <flash_write>
	flash_write( SettingsData.MaxVoltage_AddresInEEprom, SettingsData.MaxVoltage);
 800060a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800060e:	f7ff fe33 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_Chrg_time_AddresInEEprom, SettingsData.Swing_Chrg_time);
 8000612:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000616:	f7ff fe2f 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_DChrg_time_AddresInEEprom, SettingsData.Swing_DChrg_time);
 800061a:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800061e:	f7ff fe2b 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeAdapt_AddresInEEprom, SettingsData.ChargeAdapt);
 8000622:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000626:	f7ff fe27 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option2_AddresInEEprom, SettingsData.Option2);
 800062a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800062e:	f7ff fe23 	bl	8000278 <flash_write>
	logDebug("SettingsWriteToFlash ");
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <SettingsWriteToFlash+0x64>)
 8000634:	f004 fed4 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <SettingsWriteToFlash+0x68>)
 800063a:	f004 fe6b 	bl	8005314 <printToBufferUART1>
}
 800063e:	bd10      	pop	{r4, pc}
 8000640:	20000154 	.word	0x20000154
 8000644:	08005ac8 	.word	0x08005ac8
 8000648:	08005b93 	.word	0x08005b93

0800064c <SettingsFactoryWriteToFlash>:
uint8_t SettingsFactoryWriteToFlash(void)
{
 800064c:	b510      	push	{r4, lr}
	flash_erase_page( SettingsDataFactory.CRC_AddresInEEprom);
 800064e:	4c17      	ldr	r4, [pc, #92]	; (80006ac <SettingsFactoryWriteToFlash+0x60>)
 8000650:	6860      	ldr	r0, [r4, #4]
 8000652:	f7ff fddd 	bl	8000210 <flash_erase_page>
	flash_write( SettingsDataFactory.CRC_AddresInEEprom, SettingsDataFactory.CRC_data);
 8000656:	e9d4 1000 	ldrd	r1, r0, [r4]
 800065a:	f7ff fe0d 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option1_AddresInEEprom, SettingsDataFactory.Option1);
 800065e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000662:	f7ff fe09 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeTime_AddresInEEprom, SettingsDataFactory.ChargeTime);
 8000666:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800066a:	f7ff fe05 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.LowVoltage_AddresInEEprom, SettingsDataFactory.LowVoltage);
 800066e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000672:	f7ff fe01 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.MaxVoltage_AddresInEEprom, SettingsDataFactory.MaxVoltage);
 8000676:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800067a:	f7ff fdfd 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_Chrg_time_AddresInEEprom, SettingsDataFactory.Swing_Chrg_time);
 800067e:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000682:	f7ff fdf9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_DChrg_time_AddresInEEprom, SettingsDataFactory.Swing_DChrg_time);
 8000686:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800068a:	f7ff fdf5 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
 800068e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000692:	f7ff fdf1 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
 8000696:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800069a:	f7ff fded 	bl	8000278 <flash_write>
	logDebug("SettingsFactoryWriteToFlash ");
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <SettingsFactoryWriteToFlash+0x64>)
 80006a0:	f004 fe9e 	bl	80053e0 <printToBufferWithoutEndUART1>
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <SettingsFactoryWriteToFlash+0x68>)
 80006a6:	f004 fe35 	bl	8005314 <printToBufferUART1>
}
 80006aa:	bd10      	pop	{r4, pc}
 80006ac:	2000019c 	.word	0x2000019c
 80006b0:	08005ac8 	.word	0x08005ac8
 80006b4:	08005ba9 	.word	0x08005ba9

080006b8 <SettingsReadFromFlash>:
uint8_t SettingsReadFromFlash(void)
{
 80006b8:	b510      	push	{r4, lr}
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006ba:	4c22      	ldr	r4, [pc, #136]	; (8000744 <SettingsReadFromFlash+0x8c>)
 80006bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c0:	2100      	movs	r1, #0
 80006c2:	6860      	ldr	r0, [r4, #4]
 80006c4:	f7ff fe42 	bl	800034c <flash_read>
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006c8:	220a      	movs	r2, #10
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006ca:	6020      	str	r0, [r4, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006cc:	2101      	movs	r1, #1
 80006ce:	68e0      	ldr	r0, [r4, #12]
 80006d0:	f7ff fe3c 	bl	800034c <flash_read>
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006d8:	60a0      	str	r0, [r4, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006da:	2101      	movs	r1, #1
 80006dc:	6960      	ldr	r0, [r4, #20]
 80006de:	f7ff fe35 	bl	800034c <flash_read>
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006e2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006e6:	6120      	str	r0, [r4, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006e8:	2101      	movs	r1, #1
 80006ea:	69e0      	ldr	r0, [r4, #28]
 80006ec:	f7ff fe2e 	bl	800034c <flash_read>
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 80006f0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f4:	61a0      	str	r0, [r4, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 80006f6:	2101      	movs	r1, #1
 80006f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80006fa:	f7ff fe27 	bl	800034c <flash_read>
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 80006fe:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000702:	6220      	str	r0, [r4, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000704:	2100      	movs	r1, #0
 8000706:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000708:	f7ff fe20 	bl	800034c <flash_read>
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800070c:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000710:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000712:	2100      	movs	r1, #0
 8000714:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000716:	f7ff fe19 	bl	800034c <flash_read>
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800071a:	2264      	movs	r2, #100	; 0x64
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800071c:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800071e:	2100      	movs	r1, #0
 8000720:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000722:	f7ff fe13 	bl	800034c <flash_read>
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000726:	2203      	movs	r2, #3
 8000728:	2101      	movs	r1, #1
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072a:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 800072c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800072e:	f7ff fe0d 	bl	800034c <flash_read>
 8000732:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <SettingsReadFromFlash+0x90>)
 8000736:	f004 fe53 	bl	80053e0 <printToBufferWithoutEndUART1>
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <SettingsReadFromFlash+0x94>)
 800073c:	f004 fdea 	bl	8005314 <printToBufferUART1>
}
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop
 8000744:	20000154 	.word	0x20000154
 8000748:	08005ac8 	.word	0x08005ac8
 800074c:	08005bc6 	.word	0x08005bc6

08000750 <SettingsReadFromFlashForVerify>:
uint8_t SettingsReadFromFlashForVerify(void)
{
 8000750:	b510      	push	{r4, lr}
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000752:	4c22      	ldr	r4, [pc, #136]	; (80007dc <SettingsReadFromFlashForVerify+0x8c>)
 8000754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000758:	2100      	movs	r1, #0
 800075a:	6860      	ldr	r0, [r4, #4]
 800075c:	f7ff fdf6 	bl	800034c <flash_read>
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000760:	220a      	movs	r2, #10
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000762:	6020      	str	r0, [r4, #0]
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000764:	2101      	movs	r1, #1
 8000766:	68e0      	ldr	r0, [r4, #12]
 8000768:	f7ff fdf0 	bl	800034c <flash_read>
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800076c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000770:	60a0      	str	r0, [r4, #8]
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000772:	2101      	movs	r1, #1
 8000774:	6960      	ldr	r0, [r4, #20]
 8000776:	f7ff fde9 	bl	800034c <flash_read>
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800077a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800077e:	6120      	str	r0, [r4, #16]
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000780:	2101      	movs	r1, #1
 8000782:	69e0      	ldr	r0, [r4, #28]
 8000784:	f7ff fde2 	bl	800034c <flash_read>
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000788:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800078c:	61a0      	str	r0, [r4, #24]
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800078e:	2101      	movs	r1, #1
 8000790:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000792:	f7ff fddb 	bl	800034c <flash_read>
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000796:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800079a:	6220      	str	r0, [r4, #32]
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 800079c:	2100      	movs	r1, #0
 800079e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007a0:	f7ff fdd4 	bl	800034c <flash_read>
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007a4:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007a8:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007aa:	2100      	movs	r1, #0
 80007ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80007ae:	f7ff fdcd 	bl	800034c <flash_read>
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007b2:	2264      	movs	r2, #100	; 0x64
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007b4:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007b6:	2100      	movs	r1, #0
 80007b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007ba:	f7ff fdc7 	bl	800034c <flash_read>
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007be:	2203      	movs	r2, #3
 80007c0:	2101      	movs	r1, #1
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c2:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80007c6:	f7ff fdc1 	bl	800034c <flash_read>
 80007ca:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlashForVerify ");
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <SettingsReadFromFlashForVerify+0x90>)
 80007ce:	f004 fe07 	bl	80053e0 <printToBufferWithoutEndUART1>
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <SettingsReadFromFlashForVerify+0x94>)
 80007d4:	f004 fd9e 	bl	8005314 <printToBufferUART1>
}
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	bf00      	nop
 80007dc:	200001e4 	.word	0x200001e4
 80007e0:	08005ac8 	.word	0x08005ac8
 80007e4:	08005bdd 	.word	0x08005bdd

080007e8 <DataWhenPowerOff_Factory_WriteToFlash>:
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOff.CurrentConsumption1s);
	flash_write( SaveDataWhenPowerOff.OutState_AddresInEEprom, SaveDataWhenPowerOff.OutState);
	logDebug("DataWhenPowerOffWriteToFlash ");
}
uint8_t DataWhenPowerOff_Factory_WriteToFlash(void)
{
 80007e8:	b510      	push	{r4, lr}
	flash_erase_page( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom);
 80007ea:	4c0d      	ldr	r4, [pc, #52]	; (8000820 <DataWhenPowerOff_Factory_WriteToFlash+0x38>)
 80007ec:	6860      	ldr	r0, [r4, #4]
 80007ee:	f7ff fd0f 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom, SaveDataWhenPowerOffFactory.CRC_data);
 80007f2:	e9d4 1000 	ldrd	r1, r0, [r4]
 80007f6:	f7ff fd3f 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOffFactory.CurrentConsumption5ms);
 80007fa:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80007fe:	f7ff fd3b 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.CurrentConsumption1s);
 8000802:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000806:	f7ff fd37 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
 800080a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800080e:	f7ff fd33 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <DataWhenPowerOff_Factory_WriteToFlash+0x3c>)
 8000814:	f004 fde4 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <DataWhenPowerOff_Factory_WriteToFlash+0x40>)
 800081a:	f004 fd7b 	bl	8005314 <printToBufferUART1>
}
 800081e:	bd10      	pop	{r4, pc}
 8000820:	20000114 	.word	0x20000114
 8000824:	08005ac8 	.word	0x08005ac8
 8000828:	08005bfd 	.word	0x08005bfd

0800082c <DataWhenPowerOffReadFromFlash>:
uint8_t DataWhenPowerOffReadFromFlash(void)
{
 800082c:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800082e:	4c11      	ldr	r4, [pc, #68]	; (8000874 <DataWhenPowerOffReadFromFlash+0x48>)
 8000830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000834:	2100      	movs	r1, #0
 8000836:	6860      	ldr	r0, [r4, #4]
 8000838:	f7ff fd88 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.CurrentConsumption5ms =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800083c:	4d0e      	ldr	r5, [pc, #56]	; (8000878 <DataWhenPowerOffReadFromFlash+0x4c>)
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800083e:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOff.CurrentConsumption5ms =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000840:	462a      	mov	r2, r5
 8000842:	2100      	movs	r1, #0
 8000844:	68e0      	ldr	r0, [r4, #12]
 8000846:	f7ff fd81 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.CurrentConsumption1s = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800084a:	462a      	mov	r2, r5
	SaveDataWhenPowerOff.CurrentConsumption5ms =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800084c:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOff.CurrentConsumption1s = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800084e:	2100      	movs	r1, #0
 8000850:	6960      	ldr	r0, [r4, #20]
 8000852:	f7ff fd7b 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000856:	2201      	movs	r2, #1
 8000858:	2100      	movs	r1, #0
	SaveDataWhenPowerOff.CurrentConsumption1s = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800085a:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 800085c:	69e0      	ldr	r0, [r4, #28]
 800085e:	f7ff fd75 	bl	800034c <flash_read>
 8000862:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <DataWhenPowerOffReadFromFlash+0x50>)
 8000866:	f004 fdbb 	bl	80053e0 <printToBufferWithoutEndUART1>
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <DataWhenPowerOffReadFromFlash+0x54>)
 800086c:	f004 fd52 	bl	8005314 <printToBufferUART1>
}
 8000870:	bd38      	pop	{r3, r4, r5, pc}
 8000872:	bf00      	nop
 8000874:	200000f4 	.word	0x200000f4
 8000878:	ee6b2800 	.word	0xee6b2800
 800087c:	08005ac8 	.word	0x08005ac8
 8000880:	08005c24 	.word	0x08005c24

08000884 <DataWhenPowerOffReadFromFlashForVerify>:
uint8_t DataWhenPowerOffReadFromFlashForVerify(void)
{
 8000884:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 8000886:	4c11      	ldr	r4, [pc, #68]	; (80008cc <DataWhenPowerOffReadFromFlashForVerify+0x48>)
 8000888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088c:	2100      	movs	r1, #0
 800088e:	6860      	ldr	r0, [r4, #4]
 8000890:	f7ff fd5c 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.CurrentConsumption5ms =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000894:	4d0e      	ldr	r5, [pc, #56]	; (80008d0 <DataWhenPowerOffReadFromFlashForVerify+0x4c>)
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 8000896:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOffForVerify.CurrentConsumption5ms =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000898:	462a      	mov	r2, r5
 800089a:	2100      	movs	r1, #0
 800089c:	68e0      	ldr	r0, [r4, #12]
 800089e:	f7ff fd55 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.CurrentConsumption1s = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008a2:	462a      	mov	r2, r5
	SaveDataWhenPowerOffForVerify.CurrentConsumption5ms =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a4:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOffForVerify.CurrentConsumption1s = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008a6:	2100      	movs	r1, #0
 80008a8:	6960      	ldr	r0, [r4, #20]
 80008aa:	f7ff fd4f 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2100      	movs	r1, #0
	SaveDataWhenPowerOffForVerify.CurrentConsumption1s = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008b2:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008b4:	69e0      	ldr	r0, [r4, #28]
 80008b6:	f7ff fd49 	bl	800034c <flash_read>
 80008ba:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlashForVerify ");
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <DataWhenPowerOffReadFromFlashForVerify+0x50>)
 80008be:	f004 fd8f 	bl	80053e0 <printToBufferWithoutEndUART1>
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <DataWhenPowerOffReadFromFlashForVerify+0x54>)
 80008c4:	f004 fd26 	bl	8005314 <printToBufferUART1>
}
 80008c8:	bd38      	pop	{r3, r4, r5, pc}
 80008ca:	bf00      	nop
 80008cc:	20000134 	.word	0x20000134
 80008d0:	ee6b2800 	.word	0xee6b2800
 80008d4:	08005ac8 	.word	0x08005ac8
 80008d8:	08005c43 	.word	0x08005c43

080008dc <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 80008dc:	b570      	push	{r4, r5, r6, lr}
		EEpromReadStatus = 1;
 80008de:	2401      	movs	r4, #1
 80008e0:	4d0e      	ldr	r5, [pc, #56]	; (800091c <ReadFromFlash+0x40>)
 80008e2:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
	    __disable_irq();

	    DataWhenPowerOffReadFromFlash();
 80008e6:	f7ff ffa1 	bl	800082c <DataWhenPowerOffReadFromFlash>
	    SettingsReadFromFlash();
 80008ea:	f7ff fee5 	bl	80006b8 <SettingsReadFromFlash>
	    CalibrationReadFromFlash();
 80008ee:	f7ff fdd3 	bl	8000498 <CalibrationReadFromFlash>
  __ASM volatile ("cpsie i" : : : "memory");
 80008f2:	b662      	cpsie	i


		__enable_irq();
		if (EEpromReadStatus == 0)
 80008f4:	782e      	ldrb	r6, [r5, #0]
		{
			logDebug("Read from EEprom - FAIL ");
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <ReadFromFlash+0x44>)
		if (EEpromReadStatus == 0)
 80008f8:	b93e      	cbnz	r6, 800090a <ReadFromFlash+0x2e>
			logDebug("Read from EEprom - FAIL ");
 80008fa:	f004 fd71 	bl	80053e0 <printToBufferWithoutEndUART1>
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <ReadFromFlash+0x48>)
 8000900:	f004 fd08 	bl	8005314 <printToBufferUART1>
			EEpromReadStatus = 1;
 8000904:	702c      	strb	r4, [r5, #0]
		{
			logDebug("Read from EEprom - SUCCESS");
			EEpromReadStatus = 1;
			return 1;
		}
}
 8000906:	4630      	mov	r0, r6
 8000908:	bd70      	pop	{r4, r5, r6, pc}
			logDebug("Read from EEprom - SUCCESS");
 800090a:	f004 fd69 	bl	80053e0 <printToBufferWithoutEndUART1>
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <ReadFromFlash+0x4c>)
 8000910:	f004 fd00 	bl	8005314 <printToBufferUART1>
			return 1;
 8000914:	4626      	mov	r6, r4
			EEpromReadStatus = 1;
 8000916:	702c      	strb	r4, [r5, #0]
			return 1;
 8000918:	e7f5      	b.n	8000906 <ReadFromFlash+0x2a>
 800091a:	bf00      	nop
 800091c:	20000000 	.word	0x20000000
 8000920:	08005ac8 	.word	0x08005ac8
 8000924:	08005c6b 	.word	0x08005c6b
 8000928:	08005c84 	.word	0x08005c84

0800092c <CalcCRC8>:



char CalcCRC8(char *Ptr, char Num, char CRC1)
{
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4614      	mov	r4, r2
 8000930:	b0c0      	sub	sp, #256	; 0x100
 8000932:	4606      	mov	r6, r0
 8000934:	460d      	mov	r5, r1
   const char CrcTable[256] = {
 8000936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800093a:	4668      	mov	r0, sp
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <CalcCRC8+0x30>)
 800093e:	f005 f821 	bl	8005984 <memcpy>
 8000942:	4620      	mov	r0, r4
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 8000944:	f816 2b01 	ldrb.w	r2, [r6], #1
 8000948:	3d01      	subs	r5, #1
 800094a:	4042      	eors	r2, r0
 800094c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8000950:	f81d 0002 	ldrb.w	r0, [sp, r2]
 8000954:	d1f6      	bne.n	8000944 <CalcCRC8+0x18>
  return CRC1;
}
 8000956:	b040      	add	sp, #256	; 0x100
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	bf00      	nop
 800095c:	080059c8 	.word	0x080059c8

08000960 <CalibrationWriteToFlash_CRC>:
{
 8000960:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000962:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationData)+4,((unsigned char)sizeof(CalibrationData))-4,0);
 8000964:	4d14      	ldr	r5, [pc, #80]	; (80009b8 <CalibrationWriteToFlash_CRC+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	214c      	movs	r1, #76	; 0x4c
 800096a:	4628      	mov	r0, r5
 800096c:	f7ff ffde 	bl	800092c <CalcCRC8>
 8000970:	4604      	mov	r4, r0
	CalibrationData.CRC_data = CRC_Calibration;
 8000972:	f845 0c04 	str.w	r0, [r5, #-4]
	flash_unlock();
 8000976:	f7ff fc6b 	bl	8000250 <flash_unlock>
	CalibrationWriteToFlash();
 800097a:	f7ff fd19 	bl	80003b0 <CalibrationWriteToFlash>
	CalibrationReadFromFlashForVerify();
 800097e:	f7ff fddd 	bl	800053c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000982:	2200      	movs	r2, #0
 8000984:	214c      	movs	r1, #76	; 0x4c
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <CalibrationWriteToFlash_CRC+0x5c>)
 8000988:	f7ff ffd0 	bl	800092c <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 800098c:	4284      	cmp	r4, r0
		logDebug("Calibration write to Flash success ");
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <CalibrationWriteToFlash_CRC+0x60>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000990:	d109      	bne.n	80009a6 <CalibrationWriteToFlash_CRC+0x46>
		logDebug("Calibration write to Flash success ");
 8000992:	f004 fd25 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000996:	480b      	ldr	r0, [pc, #44]	; (80009c4 <CalibrationWriteToFlash_CRC+0x64>)
 8000998:	f004 fcbc 	bl	8005314 <printToBufferUART1>
	flash_lock();
 800099c:	f7ff fc64 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80009a0:	b662      	cpsie	i
}
 80009a2:	2001      	movs	r0, #1
 80009a4:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Calibration write to Flash Fail, try again... ");
 80009a6:	f004 fd1b 	bl	80053e0 <printToBufferWithoutEndUART1>
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <CalibrationWriteToFlash_CRC+0x68>)
 80009ac:	f004 fcb2 	bl	8005314 <printToBufferUART1>
		CalibrationWriteToFlash();
 80009b0:	f7ff fcfe 	bl	80003b0 <CalibrationWriteToFlash>
 80009b4:	e7f2      	b.n	800099c <CalibrationWriteToFlash_CRC+0x3c>
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008
 80009bc:	200000a8 	.word	0x200000a8
 80009c0:	08005ac8 	.word	0x08005ac8
 80009c4:	08005cb8 	.word	0x08005cb8
 80009c8:	08005cdd 	.word	0x08005cdd

080009cc <SettingsWriteToFlash_CRC>:
{
 80009cc:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80009ce:	b672      	cpsid	i
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsData)+4,((unsigned char)sizeof(SettingsData))-4,0);
 80009d0:	4d24      	ldr	r5, [pc, #144]	; (8000a64 <SettingsWriteToFlash_CRC+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	2144      	movs	r1, #68	; 0x44
 80009d6:	4628      	mov	r0, r5
 80009d8:	f7ff ffa8 	bl	800092c <CalcCRC8>
 80009dc:	4604      	mov	r4, r0
	logDebugD("CRC is : ",CRC_Settings,0);
 80009de:	4822      	ldr	r0, [pc, #136]	; (8000a68 <SettingsWriteToFlash_CRC+0x9c>)
 80009e0:	f004 fcfe 	bl	80053e0 <printToBufferWithoutEndUART1>
 80009e4:	2200      	movs	r2, #0
 80009e6:	4621      	mov	r1, r4
 80009e8:	4820      	ldr	r0, [pc, #128]	; (8000a6c <SettingsWriteToFlash_CRC+0xa0>)
 80009ea:	f004 fd37 	bl	800545c <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsData))-4,0);
 80009ee:	481e      	ldr	r0, [pc, #120]	; (8000a68 <SettingsWriteToFlash_CRC+0x9c>)
 80009f0:	f004 fcf6 	bl	80053e0 <printToBufferWithoutEndUART1>
 80009f4:	2200      	movs	r2, #0
 80009f6:	2144      	movs	r1, #68	; 0x44
 80009f8:	481d      	ldr	r0, [pc, #116]	; (8000a70 <SettingsWriteToFlash_CRC+0xa4>)
 80009fa:	f004 fd2f 	bl	800545c <printToBufferUART1D>
	SettingsData.CRC_data = CRC_Settings;
 80009fe:	f845 4c04 	str.w	r4, [r5, #-4]
	flash_unlock();
 8000a02:	f7ff fc25 	bl	8000250 <flash_unlock>
	SettingsWriteToFlash();
 8000a06:	f7ff fdeb 	bl	80005e0 <SettingsWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000a0a:	f7ff fea1 	bl	8000750 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2144      	movs	r1, #68	; 0x44
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <SettingsWriteToFlash_CRC+0xa8>)
 8000a14:	f7ff ff8a 	bl	800092c <CalcCRC8>
 8000a18:	4605      	mov	r5, r0
	logDebugD("CRC is : ",CRC_SettingsVerify,0);
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <SettingsWriteToFlash_CRC+0x9c>)
 8000a1c:	f004 fce0 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000a20:	2200      	movs	r2, #0
 8000a22:	4629      	mov	r1, r5
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <SettingsWriteToFlash_CRC+0xa0>)
 8000a26:	f004 fd19 	bl	800545c <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a2a:	480f      	ldr	r0, [pc, #60]	; (8000a68 <SettingsWriteToFlash_CRC+0x9c>)
 8000a2c:	f004 fcd8 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <SettingsWriteToFlash_CRC+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2144      	movs	r1, #68	; 0x44
 8000a36:	f004 fd11 	bl	800545c <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000a3a:	42ac      	cmp	r4, r5
		logDebug("Settings write to Flash success ");
 8000a3c:	480a      	ldr	r0, [pc, #40]	; (8000a68 <SettingsWriteToFlash_CRC+0x9c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000a3e:	d109      	bne.n	8000a54 <SettingsWriteToFlash_CRC+0x88>
		logDebug("Settings write to Flash success ");
 8000a40:	f004 fcce 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <SettingsWriteToFlash_CRC+0xac>)
 8000a46:	f004 fc65 	bl	8005314 <printToBufferUART1>
	flash_lock();
 8000a4a:	f7ff fc0d 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a4e:	b662      	cpsie	i
}
 8000a50:	2001      	movs	r0, #1
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Settings write to Flash Fail, try again... ");
 8000a54:	f004 fcc4 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <SettingsWriteToFlash_CRC+0xb0>)
 8000a5a:	f004 fc5b 	bl	8005314 <printToBufferUART1>
		SettingsWriteToFlash();
 8000a5e:	f7ff fdbf 	bl	80005e0 <SettingsWriteToFlash>
 8000a62:	e7f2      	b.n	8000a4a <SettingsWriteToFlash_CRC+0x7e>
 8000a64:	20000158 	.word	0x20000158
 8000a68:	08005ac8 	.word	0x08005ac8
 8000a6c:	08005d0d 	.word	0x08005d0d
 8000a70:	08005d18 	.word	0x08005d18
 8000a74:	200001e8 	.word	0x200001e8
 8000a78:	08005d24 	.word	0x08005d24
 8000a7c:	08005d46 	.word	0x08005d46

08000a80 <FactoryWriteToFlash_CRC>:
{
 8000a80:	b538      	push	{r3, r4, r5, lr}
	logDebug("FactoryWriteToFlash_CRC");
 8000a82:	484a      	ldr	r0, [pc, #296]	; (8000bac <FactoryWriteToFlash_CRC+0x12c>)
 8000a84:	f004 fcac 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000a88:	4849      	ldr	r0, [pc, #292]	; (8000bb0 <FactoryWriteToFlash_CRC+0x130>)
 8000a8a:	f004 fc43 	bl	8005314 <printToBufferUART1>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000a90:	4d48      	ldr	r5, [pc, #288]	; (8000bb4 <FactoryWriteToFlash_CRC+0x134>)
	flash_unlock();
 8000a92:	f7ff fbdd 	bl	8000250 <flash_unlock>
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	214c      	movs	r1, #76	; 0x4c
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	f7ff ff46 	bl	800092c <CalcCRC8>
 8000aa0:	4604      	mov	r4, r0
	CalibrationDataFactory.CRC_data = CRC_Calibration;
 8000aa2:	f845 0c04 	str.w	r0, [r5, #-4]
	CalibrationFactoryWriteToFlash();
 8000aa6:	f7ff fcbd 	bl	8000424 <CalibrationFactoryWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000aaa:	f7ff fd47 	bl	800053c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	214c      	movs	r1, #76	; 0x4c
 8000ab2:	4841      	ldr	r0, [pc, #260]	; (8000bb8 <FactoryWriteToFlash_CRC+0x138>)
 8000ab4:	f7ff ff3a 	bl	800092c <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000ab8:	4284      	cmp	r4, r0
		logDebug("FCalibration write to Flash success ");
 8000aba:	483c      	ldr	r0, [pc, #240]	; (8000bac <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000abc:	d15d      	bne.n	8000b7a <FactoryWriteToFlash_CRC+0xfa>
		logDebug("FCalibration write to Flash success ");
 8000abe:	f004 fc8f 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000ac2:	483e      	ldr	r0, [pc, #248]	; (8000bbc <FactoryWriteToFlash_CRC+0x13c>)
 8000ac4:	f004 fc26 	bl	8005314 <printToBufferUART1>
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsDataFactory)+4,((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000ac8:	4d3d      	ldr	r5, [pc, #244]	; (8000bc0 <FactoryWriteToFlash_CRC+0x140>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	2144      	movs	r1, #68	; 0x44
 8000ace:	4628      	mov	r0, r5
 8000ad0:	f7ff ff2c 	bl	800092c <CalcCRC8>
 8000ad4:	4604      	mov	r4, r0
	logDebugD("FCRC is : ",CRC_Settings,0);
 8000ad6:	4835      	ldr	r0, [pc, #212]	; (8000bac <FactoryWriteToFlash_CRC+0x12c>)
 8000ad8:	f004 fc82 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000adc:	2200      	movs	r2, #0
 8000ade:	4621      	mov	r1, r4
 8000ae0:	4838      	ldr	r0, [pc, #224]	; (8000bc4 <FactoryWriteToFlash_CRC+0x144>)
 8000ae2:	f004 fcbb 	bl	800545c <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000ae6:	4831      	ldr	r0, [pc, #196]	; (8000bac <FactoryWriteToFlash_CRC+0x12c>)
 8000ae8:	f004 fc7a 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000aec:	2200      	movs	r2, #0
 8000aee:	2144      	movs	r1, #68	; 0x44
 8000af0:	4835      	ldr	r0, [pc, #212]	; (8000bc8 <FactoryWriteToFlash_CRC+0x148>)
 8000af2:	f004 fcb3 	bl	800545c <printToBufferUART1D>
	SettingsDataFactory.CRC_data = CRC_Settings;
 8000af6:	f845 4c04 	str.w	r4, [r5, #-4]
	SettingsFactoryWriteToFlash();
 8000afa:	f7ff fda7 	bl	800064c <SettingsFactoryWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000afe:	f7ff fe27 	bl	8000750 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2144      	movs	r1, #68	; 0x44
 8000b06:	4831      	ldr	r0, [pc, #196]	; (8000bcc <FactoryWriteToFlash_CRC+0x14c>)
 8000b08:	f7ff ff10 	bl	800092c <CalcCRC8>
 8000b0c:	4605      	mov	r5, r0
	logDebugD("FCRC is : ",CRC_SettingsVerify,0);
 8000b0e:	4827      	ldr	r0, [pc, #156]	; (8000bac <FactoryWriteToFlash_CRC+0x12c>)
 8000b10:	f004 fc66 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000b14:	2200      	movs	r2, #0
 8000b16:	4629      	mov	r1, r5
 8000b18:	482a      	ldr	r0, [pc, #168]	; (8000bc4 <FactoryWriteToFlash_CRC+0x144>)
 8000b1a:	f004 fc9f 	bl	800545c <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b1e:	4823      	ldr	r0, [pc, #140]	; (8000bac <FactoryWriteToFlash_CRC+0x12c>)
 8000b20:	f004 fc5e 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000b24:	4828      	ldr	r0, [pc, #160]	; (8000bc8 <FactoryWriteToFlash_CRC+0x148>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	2144      	movs	r1, #68	; 0x44
 8000b2a:	f004 fc97 	bl	800545c <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000b2e:	42ac      	cmp	r4, r5
		logDebug("FSettings write to Flash success ");
 8000b30:	481e      	ldr	r0, [pc, #120]	; (8000bac <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000b32:	d12a      	bne.n	8000b8a <FactoryWriteToFlash_CRC+0x10a>
		logDebug("FSettings write to Flash success ");
 8000b34:	f004 fc54 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000b38:	4825      	ldr	r0, [pc, #148]	; (8000bd0 <FactoryWriteToFlash_CRC+0x150>)
 8000b3a:	f004 fbeb 	bl	8005314 <printToBufferUART1>
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffFactory)+4,((unsigned char)sizeof(SaveDataWhenPowerOffFactory))-4,0);
 8000b3e:	4d25      	ldr	r5, [pc, #148]	; (8000bd4 <FactoryWriteToFlash_CRC+0x154>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	211c      	movs	r1, #28
 8000b44:	4628      	mov	r0, r5
 8000b46:	f7ff fef1 	bl	800092c <CalcCRC8>
 8000b4a:	4604      	mov	r4, r0
	SaveDataWhenPowerOffFactory.CRC_data = CRC_DataWhenPowerOff;
 8000b4c:	f845 0c04 	str.w	r0, [r5, #-4]
	DataWhenPowerOff_Factory_WriteToFlash();
 8000b50:	f7ff fe4a 	bl	80007e8 <DataWhenPowerOff_Factory_WriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000b54:	f7ff fe96 	bl	8000884 <DataWhenPowerOffReadFromFlashForVerify>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	211c      	movs	r1, #28
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <FactoryWriteToFlash_CRC+0x158>)
 8000b5e:	f7ff fee5 	bl	800092c <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b62:	4284      	cmp	r4, r0
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b66:	d118      	bne.n	8000b9a <FactoryWriteToFlash_CRC+0x11a>
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b68:	f004 fc3a 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000b6c:	481b      	ldr	r0, [pc, #108]	; (8000bdc <FactoryWriteToFlash_CRC+0x15c>)
 8000b6e:	f004 fbd1 	bl	8005314 <printToBufferUART1>
	flash_lock();
 8000b72:	f7ff fb79 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b76:	b662      	cpsie	i
}
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("FCalibration write to Flash Fail, try again... ");
 8000b7a:	f004 fc31 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <FactoryWriteToFlash_CRC+0x160>)
 8000b80:	f004 fbc8 	bl	8005314 <printToBufferUART1>
		CalibrationFactoryWriteToFlash();
 8000b84:	f7ff fc4e 	bl	8000424 <CalibrationFactoryWriteToFlash>
 8000b88:	e79e      	b.n	8000ac8 <FactoryWriteToFlash_CRC+0x48>
		logDebug("FSettings write to Flash Fail, try again... ");
 8000b8a:	f004 fc29 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000b8e:	4815      	ldr	r0, [pc, #84]	; (8000be4 <FactoryWriteToFlash_CRC+0x164>)
 8000b90:	f004 fbc0 	bl	8005314 <printToBufferUART1>
		SettingsFactoryWriteToFlash();
 8000b94:	f7ff fd5a 	bl	800064c <SettingsFactoryWriteToFlash>
 8000b98:	e7d1      	b.n	8000b3e <FactoryWriteToFlash_CRC+0xbe>
		logDebug("FDataWhenPowerOff write to Flash Fail, try again... ");
 8000b9a:	f004 fc21 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000b9e:	4812      	ldr	r0, [pc, #72]	; (8000be8 <FactoryWriteToFlash_CRC+0x168>)
 8000ba0:	f004 fbb8 	bl	8005314 <printToBufferUART1>
		DataWhenPowerOff_Factory_WriteToFlash();
 8000ba4:	f7ff fe20 	bl	80007e8 <DataWhenPowerOff_Factory_WriteToFlash>
 8000ba8:	e7e3      	b.n	8000b72 <FactoryWriteToFlash_CRC+0xf2>
 8000baa:	bf00      	nop
 8000bac:	08005ac8 	.word	0x08005ac8
 8000bb0:	08005c9f 	.word	0x08005c9f
 8000bb4:	20000058 	.word	0x20000058
 8000bb8:	200000a8 	.word	0x200000a8
 8000bbc:	08005cb7 	.word	0x08005cb7
 8000bc0:	200001a0 	.word	0x200001a0
 8000bc4:	08005d0c 	.word	0x08005d0c
 8000bc8:	08005d17 	.word	0x08005d17
 8000bcc:	200001e8 	.word	0x200001e8
 8000bd0:	08005d23 	.word	0x08005d23
 8000bd4:	20000118 	.word	0x20000118
 8000bd8:	20000138 	.word	0x20000138
 8000bdc:	08005d72 	.word	0x08005d72
 8000be0:	08005cdc 	.word	0x08005cdc
 8000be4:	08005d45 	.word	0x08005d45
 8000be8:	08005d9c 	.word	0x08005d9c

08000bec <Generation_Coefficients_R_A_B>:
		{150,500}
};
void Generation_Coefficients_R_A_B()
{
	int8_t i;
	for (i=0;i<(TLT-1);i++)
 8000bec:	4917      	ldr	r1, [pc, #92]	; (8000c4c <Generation_Coefficients_R_A_B+0x60>)
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <Generation_Coefficients_R_A_B+0x64>)
{
 8000bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		Temp_R_A_B[i].R = T_Table[i].R;
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000bf4:	f242 7c10 	movw	ip, #10000	; 0x2710
{
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	460e      	mov	r6, r1
 8000bfc:	4605      	mov	r5, r0
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000bfe:	4f15      	ldr	r7, [pc, #84]	; (8000c54 <Generation_Coefficients_R_A_B+0x68>)
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c00:	f9b1 e000 	ldrsh.w	lr, [r1]
 8000c04:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c08:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c0c:	eba2 020e 	sub.w	r2, r2, lr
 8000c10:	fb0c f202 	mul.w	r2, ip, r2
 8000c14:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8000c18:	3401      	adds	r4, #1
 8000c1a:	eba3 0308 	sub.w	r3, r3, r8
 8000c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c22:	6043      	str	r3, [r0, #4]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c24:	fb03 f308 	mul.w	r3, r3, r8
 8000c28:	fb93 f3f7 	sdiv	r3, r3, r7
	for (i=0;i<(TLT-1);i++)
 8000c2c:	2c07      	cmp	r4, #7
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c2e:	4473      	add	r3, lr
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c30:	f8c0 8000 	str.w	r8, [r0]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c34:	6083      	str	r3, [r0, #8]
	for (i=0;i<(TLT-1);i++)
 8000c36:	f101 0104 	add.w	r1, r1, #4
 8000c3a:	f100 000c 	add.w	r0, r0, #12
 8000c3e:	d1df      	bne.n	8000c00 <Generation_Coefficients_R_A_B+0x14>
	}
	Temp_R_A_B[i].R = T_Table[i].R;
 8000c40:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
 8000c44:	656b      	str	r3, [r5, #84]	; 0x54
	    c=(Temp_R_A_B[i].R-Temp_R_A_B[i+1].R)/2+Temp_R_A_B[i+1].R;
	    Print_to_USART1_d(c,"c= ",0);
	    Print_to_USART1_d(Temp_R_A_B[i].A10000*c/10000+Temp_R_A_B[i].B,"T:",0);
	}
*/
}
 8000c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000022c 	.word	0x2000022c
 8000c50:	20000808 	.word	0x20000808
 8000c54:	ffffd8f0 	.word	0xffffd8f0

08000c58 <GetTemperature>:
int32_t GetTemperature(int32_t Rtemp)
{
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <GetTemperature+0x48>)
{
 8000c5a:	b510      	push	{r4, lr}
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	db1a      	blt.n	8000c98 <GetTemperature+0x40>
 8000c62:	4619      	mov	r1, r3
 8000c64:	2200      	movs	r2, #0

	int8_t i;
	for (i=0; i<(TLT-1);i++)
	{
		if (Rtemp <= Temp_R_A_B[i].R  && Rtemp > Temp_R_A_B[i+1].R)
 8000c66:	680c      	ldr	r4, [r1, #0]
 8000c68:	4284      	cmp	r4, r0
 8000c6a:	db0e      	blt.n	8000c8a <GetTemperature+0x32>
 8000c6c:	68cc      	ldr	r4, [r1, #12]
 8000c6e:	4284      	cmp	r4, r0
 8000c70:	da0b      	bge.n	8000c8a <GetTemperature+0x32>
		{
			return Rtemp*Temp_R_A_B[i].A10000/10000+Temp_R_A_B[i].B;
 8000c72:	210c      	movs	r1, #12
 8000c74:	fb01 3202 	mla	r2, r1, r2, r3
 8000c78:	6853      	ldr	r3, [r2, #4]
 8000c7a:	4358      	muls	r0, r3
 8000c7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c80:	fb90 f0f3 	sdiv	r0, r0, r3
 8000c84:	6893      	ldr	r3, [r2, #8]
 8000c86:	4418      	add	r0, r3

		}
	}
	return 200;
}
 8000c88:	bd10      	pop	{r4, pc}
	for (i=0; i<(TLT-1);i++)
 8000c8a:	3201      	adds	r2, #1
 8000c8c:	2a07      	cmp	r2, #7
 8000c8e:	f101 010c 	add.w	r1, r1, #12
 8000c92:	d1e8      	bne.n	8000c66 <GetTemperature+0xe>
	return 200;
 8000c94:	20c8      	movs	r0, #200	; 0xc8
 8000c96:	e7f7      	b.n	8000c88 <GetTemperature+0x30>
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000c98:	f06f 0009 	mvn.w	r0, #9
 8000c9c:	e7f4      	b.n	8000c88 <GetTemperature+0x30>
 8000c9e:	bf00      	nop
 8000ca0:	20000808 	.word	0x20000808

08000ca4 <WriteInLOG>:

void WriteInLOG(char  str [17])
{
 8000ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000ca8:	4c5d      	ldr	r4, [pc, #372]	; (8000e20 <WriteInLOG+0x17c>)
{
 8000caa:	4606      	mov	r6, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000cac:	6820      	ldr	r0, [r4, #0]
 8000cae:	f000 fadb 	bl	8001268 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000cb2:	2200      	movs	r2, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000cb4:	6827      	ldr	r7, [r4, #0]
 8000cb6:	eb07 1307 	add.w	r3, r7, r7, lsl #4
 8000cba:	0139      	lsls	r1, r7, #4
 8000cbc:	4423      	add	r3, r4
	for(i=0;number[i]!='\0';i++)
 8000cbe:	f810 c002 	ldrb.w	ip, [r0, r2]
 8000cc2:	4615      	mov	r5, r2
 8000cc4:	3201      	adds	r2, #1
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	f1bc 0f00 	cmp.w	ip, #0
 8000ccc:	d11b      	bne.n	8000d06 <WriteInLOG+0x62>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000cce:	19cb      	adds	r3, r1, r7
 8000cd0:	18e0      	adds	r0, r4, r3
 8000cd2:	4405      	add	r5, r0
 8000cd4:	203a      	movs	r0, #58	; 0x3a
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	7128      	strb	r0, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000cda:	eb04 0c03 	add.w	ip, r4, r3
 8000cde:	1e70      	subs	r0, r6, #1
 8000ce0:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8000ce4:	b2d5      	uxtb	r5, r2
 8000ce6:	b996      	cbnz	r6, 8000d0e <WriteInLOG+0x6a>
 8000ce8:	462a      	mov	r2, r5
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000cea:	2120      	movs	r1, #32
 8000cec:	442b      	add	r3, r5
 8000cee:	4423      	add	r3, r4
	for (;i<16;i++)
 8000cf0:	2a0f      	cmp	r2, #15
 8000cf2:	d975      	bls.n	8000de0 <WriteInLOG+0x13c>
 8000cf4:	2d10      	cmp	r5, #16
 8000cf6:	f1c5 0110 	rsb	r1, r5, #16
 8000cfa:	bf88      	it	hi
 8000cfc:	2100      	movhi	r1, #0
 8000cfe:	440d      	add	r5, r1
 8000d00:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8000d04:	e00e      	b.n	8000d24 <WriteInLOG+0x80>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000d06:	441d      	add	r5, r3
 8000d08:	f885 c004 	strb.w	ip, [r5, #4]
	for(i=0;number[i]!='\0';i++)
 8000d0c:	e7d7      	b.n	8000cbe <WriteInLOG+0x1a>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000d0e:	2d0f      	cmp	r5, #15
 8000d10:	d803      	bhi.n	8000d1a <WriteInLOG+0x76>
 8000d12:	f80c 6002 	strb.w	r6, [ip, r2]
	for(j=0;str[j]!='\0';i++,j++)
 8000d16:	3201      	adds	r2, #1
 8000d18:	e7e2      	b.n	8000ce0 <WriteInLOG+0x3c>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	4439      	add	r1, r7
 8000d1e:	4421      	add	r1, r4
 8000d20:	440a      	add	r2, r1
 8000d22:	7113      	strb	r3, [r2, #4]
	}
	logDebugD("ii: ",i,0);
 8000d24:	483f      	ldr	r0, [pc, #252]	; (8000e24 <WriteInLOG+0x180>)
 8000d26:	f004 fb5b 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	483e      	ldr	r0, [pc, #248]	; (8000e28 <WriteInLOG+0x184>)
 8000d30:	f004 fb94 	bl	800545c <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8000d3a:	4421      	add	r1, r4
 8000d3c:	4429      	add	r1, r5
 8000d3e:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000d40:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000d42:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d44:	710d      	strb	r5, [r1, #4]
	LoggingData.RecordsQuantity++;
 8000d46:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000d48:	d93e      	bls.n	8000dc8 <WriteInLOG+0x124>
 8000d4a:	260a      	movs	r6, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000d4c:	462f      	mov	r7, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000d4e:	f04f 0820 	mov.w	r8, #32
			number = itoa(i);
 8000d52:	4628      	mov	r0, r5
 8000d54:	f000 fa88 	bl	8001268 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000d58:	2300      	movs	r3, #0
				LoggingData.Records[i][k] = number[k];
 8000d5a:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 8000d5e:	012a      	lsls	r2, r5, #4
 8000d60:	4421      	add	r1, r4
			for(k=0;number[k]!='\0';k++)
 8000d62:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000d66:	469c      	mov	ip, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f1be 0f00 	cmp.w	lr, #0
 8000d70:	d13b      	bne.n	8000dea <WriteInLOG+0x146>
			LoggingData.Records[i][k] = ':';
 8000d72:	203a      	movs	r0, #58	; 0x3a
 8000d74:	1951      	adds	r1, r2, r5
 8000d76:	4421      	add	r1, r4
 8000d78:	448c      	add	ip, r1
 8000d7a:	f88c 0004 	strb.w	r0, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000d7e:	eb06 1006 	add.w	r0, r6, r6, lsl #4
 8000d82:	4420      	add	r0, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000d84:	eb01 0c03 	add.w	ip, r1, r3
 8000d88:	f89c c004 	ldrb.w	ip, [ip, #4]
 8000d8c:	f1bc 0f00 	cmp.w	ip, #0
 8000d90:	d12f      	bne.n	8000df2 <WriteInLOG+0x14e>
			j--;
 8000d92:	1e58      	subs	r0, r3, #1
 8000d94:	b2c0      	uxtb	r0, r0
 8000d96:	4684      	mov	ip, r0
 8000d98:	1951      	adds	r1, r2, r5
 8000d9a:	3104      	adds	r1, #4
 8000d9c:	4401      	add	r1, r0
 8000d9e:	4421      	add	r1, r4
			for (;j<16;j++)
 8000da0:	f1bc 0f0f 	cmp.w	ip, #15
 8000da4:	d934      	bls.n	8000e10 <WriteInLOG+0x16c>
			}
			LoggingData.Records[i][j] = '\0';
 8000da6:	2810      	cmp	r0, #16
 8000da8:	f1c3 0311 	rsb	r3, r3, #17
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	bf88      	it	hi
 8000db0:	2300      	movhi	r3, #0
 8000db2:	442a      	add	r2, r5
 8000db4:	4422      	add	r2, r4
 8000db6:	4402      	add	r2, r0
 8000db8:	3501      	adds	r5, #1
 8000dba:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000dbc:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000dbe:	711f      	strb	r7, [r3, #4]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000dc0:	f106 0601 	add.w	r6, r6, #1
 8000dc4:	d1c5      	bne.n	8000d52 <WriteInLOG+0xae>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000dc6:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000dc8:	f7ff fa7c 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000dcc:	4815      	ldr	r0, [pc, #84]	; (8000e24 <WriteInLOG+0x180>)
 8000dce:	f004 fb07 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000dd2:	6821      	ldr	r1, [r4, #0]
 8000dd4:	2200      	movs	r2, #0
}
 8000dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000dda:	4814      	ldr	r0, [pc, #80]	; (8000e2c <WriteInLOG+0x188>)
 8000ddc:	f004 bb3e 	b.w	800545c <printToBufferUART1D>
	for (;i<16;i++)
 8000de0:	3201      	adds	r2, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000de2:	f803 1b01 	strb.w	r1, [r3], #1
	for (;i<16;i++)
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	e782      	b.n	8000cf0 <WriteInLOG+0x4c>
				LoggingData.Records[i][k] = number[k];
 8000dea:	448c      	add	ip, r1
 8000dec:	f88c e004 	strb.w	lr, [ip, #4]
			for(k=0;number[k]!='\0';k++)
 8000df0:	e7b7      	b.n	8000d62 <WriteInLOG+0xbe>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000df2:	eb00 0c03 	add.w	ip, r0, r3
				if (i>=10)
 8000df6:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000df8:	bf8c      	ite	hi
 8000dfa:	f89c c004 	ldrbhi.w	ip, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000dfe:	f89c c005 	ldrbls.w	ip, [ip, #5]
 8000e02:	eb01 0e03 	add.w	lr, r1, r3
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000e06:	3301      	adds	r3, #1
 8000e08:	f88e c004 	strb.w	ip, [lr, #4]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	e7b9      	b.n	8000d84 <WriteInLOG+0xe0>
			for (;j<16;j++)
 8000e10:	f10c 0c01 	add.w	ip, ip, #1
				LoggingData.Records[i][j] = ' ';
 8000e14:	f801 8b01 	strb.w	r8, [r1], #1
			for (;j<16;j++)
 8000e18:	fa5f fc8c 	uxtb.w	ip, ip
 8000e1c:	e7c0      	b.n	8000da0 <WriteInLOG+0xfc>
 8000e1e:	bf00      	nop
 8000e20:	20000888 	.word	0x20000888
 8000e24:	08005ac8 	.word	0x08005ac8
 8000e28:	08005dd1 	.word	0x08005dd1
 8000e2c:	08005dd6 	.word	0x08005dd6

08000e30 <WriteInLOGc>:

void WriteInLOGc(char  str [17],char c)
{
 8000e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000e34:	4c5e      	ldr	r4, [pc, #376]	; (8000fb0 <WriteInLOGc+0x180>)
{
 8000e36:	4680      	mov	r8, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000e38:	6820      	ldr	r0, [r4, #0]
{
 8000e3a:	460e      	mov	r6, r1
	number = itoa(LoggingData.RecordsQuantity);
 8000e3c:	f000 fa14 	bl	8001268 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000e40:	2200      	movs	r2, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000e42:	6827      	ldr	r7, [r4, #0]
 8000e44:	eb07 1307 	add.w	r3, r7, r7, lsl #4
 8000e48:	0139      	lsls	r1, r7, #4
 8000e4a:	4423      	add	r3, r4
	for(i=0;number[i]!='\0';i++)
 8000e4c:	f810 c002 	ldrb.w	ip, [r0, r2]
 8000e50:	4615      	mov	r5, r2
 8000e52:	3201      	adds	r2, #1
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	f1bc 0f00 	cmp.w	ip, #0
 8000e5a:	d11d      	bne.n	8000e98 <WriteInLOGc+0x68>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = c;
 8000e5c:	19cb      	adds	r3, r1, r7
 8000e5e:	18e0      	adds	r0, r4, r3
 8000e60:	4405      	add	r5, r0
 8000e62:	3304      	adds	r3, #4
 8000e64:	712e      	strb	r6, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000e66:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e6a:	eb04 0e03 	add.w	lr, r4, r3
 8000e6e:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8000e72:	b2d5      	uxtb	r5, r2
 8000e74:	f1bc 0f00 	cmp.w	ip, #0
 8000e78:	d112      	bne.n	8000ea0 <WriteInLOGc+0x70>
 8000e7a:	462a      	mov	r2, r5
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	442b      	add	r3, r5
 8000e80:	4423      	add	r3, r4
	for (;i<16;i++)
 8000e82:	2a0f      	cmp	r2, #15
 8000e84:	d975      	bls.n	8000f72 <WriteInLOGc+0x142>
 8000e86:	2d10      	cmp	r5, #16
 8000e88:	f1c5 0110 	rsb	r1, r5, #16
 8000e8c:	bf88      	it	hi
 8000e8e:	2100      	movhi	r1, #0
 8000e90:	440d      	add	r5, r1
 8000e92:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8000e96:	e00e      	b.n	8000eb6 <WriteInLOGc+0x86>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000e98:	441d      	add	r5, r3
 8000e9a:	f885 c004 	strb.w	ip, [r5, #4]
	for(i=0;number[i]!='\0';i++)
 8000e9e:	e7d5      	b.n	8000e4c <WriteInLOGc+0x1c>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000ea0:	2d0f      	cmp	r5, #15
 8000ea2:	d803      	bhi.n	8000eac <WriteInLOGc+0x7c>
 8000ea4:	f80e c002 	strb.w	ip, [lr, r2]
	for(j=0;str[j]!='\0';i++,j++)
 8000ea8:	3201      	adds	r2, #1
 8000eaa:	e7e0      	b.n	8000e6e <WriteInLOGc+0x3e>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000eac:	2300      	movs	r3, #0
 8000eae:	4439      	add	r1, r7
 8000eb0:	4421      	add	r1, r4
 8000eb2:	440a      	add	r2, r1
 8000eb4:	7113      	strb	r3, [r2, #4]
	}
	logDebugD("ii: ",i,0);
 8000eb6:	483f      	ldr	r0, [pc, #252]	; (8000fb4 <WriteInLOGc+0x184>)
 8000eb8:	f004 fa92 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	483d      	ldr	r0, [pc, #244]	; (8000fb8 <WriteInLOGc+0x188>)
 8000ec2:	f004 facb 	bl	800545c <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8000ecc:	4421      	add	r1, r4
 8000ece:	4429      	add	r1, r5
 8000ed0:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000ed2:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000ed4:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000ed6:	710d      	strb	r5, [r1, #4]
	LoggingData.RecordsQuantity++;
 8000ed8:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000eda:	d93e      	bls.n	8000f5a <WriteInLOGc+0x12a>
 8000edc:	270a      	movs	r7, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000ede:	46a8      	mov	r8, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000ee0:	f04f 0920 	mov.w	r9, #32
			number = itoa(i);
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	f000 f9bf 	bl	8001268 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000eea:	2300      	movs	r3, #0
				LoggingData.Records[i][k] = number[k];
 8000eec:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 8000ef0:	012a      	lsls	r2, r5, #4
 8000ef2:	4421      	add	r1, r4
			for(k=0;number[k]!='\0';k++)
 8000ef4:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000ef8:	469c      	mov	ip, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f1be 0f00 	cmp.w	lr, #0
 8000f02:	d13b      	bne.n	8000f7c <WriteInLOGc+0x14c>
			LoggingData.Records[i][k] = c;
 8000f04:	1951      	adds	r1, r2, r5
 8000f06:	4421      	add	r1, r4
 8000f08:	448c      	add	ip, r1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f0a:	eb07 1007 	add.w	r0, r7, r7, lsl #4
			LoggingData.Records[i][k] = c;
 8000f0e:	f88c 6004 	strb.w	r6, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f12:	4420      	add	r0, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000f14:	eb01 0c03 	add.w	ip, r1, r3
 8000f18:	f89c c004 	ldrb.w	ip, [ip, #4]
 8000f1c:	f1bc 0f00 	cmp.w	ip, #0
 8000f20:	d130      	bne.n	8000f84 <WriteInLOGc+0x154>
			j--;
 8000f22:	1e58      	subs	r0, r3, #1
 8000f24:	b2c0      	uxtb	r0, r0
 8000f26:	4684      	mov	ip, r0
 8000f28:	1951      	adds	r1, r2, r5
 8000f2a:	3104      	adds	r1, #4
 8000f2c:	4401      	add	r1, r0
 8000f2e:	4421      	add	r1, r4
			for (;j<16;j++)
 8000f30:	f1bc 0f0f 	cmp.w	ip, #15
 8000f34:	d935      	bls.n	8000fa2 <WriteInLOGc+0x172>
			}
			LoggingData.Records[i][j] = '\0';
 8000f36:	2810      	cmp	r0, #16
 8000f38:	f1c3 0311 	rsb	r3, r3, #17
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	bf88      	it	hi
 8000f40:	2300      	movhi	r3, #0
 8000f42:	442a      	add	r2, r5
 8000f44:	4422      	add	r2, r4
 8000f46:	4402      	add	r2, r0
 8000f48:	3501      	adds	r5, #1
 8000f4a:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000f4c:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000f4e:	f883 8004 	strb.w	r8, [r3, #4]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000f52:	f107 0701 	add.w	r7, r7, #1
 8000f56:	d1c5      	bne.n	8000ee4 <WriteInLOGc+0xb4>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000f58:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000f5a:	f7ff f9b3 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000f5e:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <WriteInLOGc+0x184>)
 8000f60:	f004 fa3e 	bl	80053e0 <printToBufferWithoutEndUART1>
 8000f64:	6821      	ldr	r1, [r4, #0]
 8000f66:	2200      	movs	r2, #0
}
 8000f68:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <WriteInLOGc+0x18c>)
 8000f6e:	f004 ba75 	b.w	800545c <printToBufferUART1D>
	for (;i<16;i++)
 8000f72:	3201      	adds	r2, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000f74:	f803 1b01 	strb.w	r1, [r3], #1
	for (;i<16;i++)
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	e782      	b.n	8000e82 <WriteInLOGc+0x52>
				LoggingData.Records[i][k] = number[k];
 8000f7c:	448c      	add	ip, r1
 8000f7e:	f88c e004 	strb.w	lr, [ip, #4]
			for(k=0;number[k]!='\0';k++)
 8000f82:	e7b7      	b.n	8000ef4 <WriteInLOGc+0xc4>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000f84:	eb00 0c03 	add.w	ip, r0, r3
				if (i>=10)
 8000f88:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000f8a:	bf8c      	ite	hi
 8000f8c:	f89c c004 	ldrbhi.w	ip, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f90:	f89c c005 	ldrbls.w	ip, [ip, #5]
 8000f94:	eb01 0e03 	add.w	lr, r1, r3
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000f98:	3301      	adds	r3, #1
 8000f9a:	f88e c004 	strb.w	ip, [lr, #4]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	e7b8      	b.n	8000f14 <WriteInLOGc+0xe4>
			for (;j<16;j++)
 8000fa2:	f10c 0c01 	add.w	ip, ip, #1
				LoggingData.Records[i][j] = ' ';
 8000fa6:	f801 9b01 	strb.w	r9, [r1], #1
			for (;j<16;j++)
 8000faa:	fa5f fc8c 	uxtb.w	ip, ip
 8000fae:	e7bf      	b.n	8000f30 <WriteInLOGc+0x100>
 8000fb0:	20000888 	.word	0x20000888
 8000fb4:	08005ac8 	.word	0x08005ac8
 8000fb8:	08005dd1 	.word	0x08005dd1
 8000fbc:	08005dd6 	.word	0x08005dd6

08000fc0 <delay_us>:
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
	delay_ms(50);
}
void delay_us(uint32_t us)
{
	volatile uint32_t n = 0;
 8000fc0:	2300      	movs	r3, #0
{
 8000fc2:	b084      	sub	sp, #16
	if (us==1) n=1;//в тактах процесора
 8000fc4:	2801      	cmp	r0, #1
	volatile uint32_t n = 0;
 8000fc6:	9300      	str	r3, [sp, #0]
	if (us==1) n=1;//в тактах процесора
 8000fc8:	d101      	bne.n	8000fce <delay_us+0xe>
	if (us==2) n=2;//в тактах процесора
	if (us==3) n=18;//в тактах процесора
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000fca:	9000      	str	r0, [sp, #0]
 8000fcc:	e004      	b.n	8000fd8 <delay_us+0x18>
	if (us==2) n=2;//в тактах процесора
 8000fce:	2802      	cmp	r0, #2
 8000fd0:	d0fb      	beq.n	8000fca <delay_us+0xa>
	if (us==3) n=18;//в тактах процесора
 8000fd2:	2803      	cmp	r0, #3
 8000fd4:	d01a      	beq.n	800100c <delay_us+0x4c>
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000fd6:	d81c      	bhi.n	8001012 <delay_us+0x52>
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <delay_us+0x64>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	9201      	str	r2, [sp, #4]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8000fde:	9a01      	ldr	r2, [sp, #4]
 8000fe0:	9202      	str	r2, [sp, #8]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	9203      	str	r2, [sp, #12]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 8000fe6:	9903      	ldr	r1, [sp, #12]
 8000fe8:	9a02      	ldr	r2, [sp, #8]
 8000fea:	4291      	cmp	r1, r2
 8000fec:	d304      	bcc.n	8000ff8 <delay_us+0x38>
            n0+=SysTick->LOAD+1;
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	9901      	ldr	r1, [sp, #4]
 8000ff2:	440a      	add	r2, r1
 8000ff4:	3201      	adds	r2, #1
 8000ff6:	9201      	str	r2, [sp, #4]
        np=nc;
 8000ff8:	9a03      	ldr	r2, [sp, #12]
 8000ffa:	9202      	str	r2, [sp, #8]
    }while(n0-nc<n);
 8000ffc:	9a01      	ldr	r2, [sp, #4]
 8000ffe:	9803      	ldr	r0, [sp, #12]
 8001000:	9900      	ldr	r1, [sp, #0]
 8001002:	1a12      	subs	r2, r2, r0
 8001004:	428a      	cmp	r2, r1
 8001006:	d3ec      	bcc.n	8000fe2 <delay_us+0x22>
}
 8001008:	b004      	add	sp, #16
 800100a:	4770      	bx	lr
	if (us==3) n=18;//в тактах процесора
 800100c:	2312      	movs	r3, #18
 800100e:	9300      	str	r3, [sp, #0]
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8001010:	e7e2      	b.n	8000fd8 <delay_us+0x18>
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <delay_us+0x68>)
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <delay_us+0x6c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3803      	subs	r0, #3
 800101a:	fbb3 f3f2 	udiv	r3, r3, r2
 800101e:	4358      	muls	r0, r3
 8001020:	e7d3      	b.n	8000fca <delay_us+0xa>
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010
 8001028:	2000028c 	.word	0x2000028c
 800102c:	000f4240 	.word	0x000f4240

08001030 <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8001030:	b507      	push	{r0, r1, r2, lr}
 8001032:	9001      	str	r0, [sp, #4]
	while(value>0)
 8001034:	9b01      	ldr	r3, [sp, #4]
 8001036:	b913      	cbnz	r3, 800103e <delay_ms+0xe>
	{
		delay_us(1000);
		value--;
	}
}
 8001038:	b003      	add	sp, #12
 800103a:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_us(1000);
 800103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001042:	f7ff ffbd 	bl	8000fc0 <delay_us>
		value--;
 8001046:	9b01      	ldr	r3, [sp, #4]
 8001048:	3b01      	subs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	e7f2      	b.n	8001034 <delay_ms+0x4>
	...

08001050 <InfoToUARTBeforeStart>:
{
 8001050:	b538      	push	{r3, r4, r5, lr}
	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 8001052:	4c68      	ldr	r4, [pc, #416]	; (80011f4 <InfoToUARTBeforeStart+0x1a4>)
 8001054:	4d68      	ldr	r5, [pc, #416]	; (80011f8 <InfoToUARTBeforeStart+0x1a8>)
 8001056:	4620      	mov	r0, r4
 8001058:	f004 f9c2 	bl	80053e0 <printToBufferWithoutEndUART1>
 800105c:	6829      	ldr	r1, [r5, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	4866      	ldr	r0, [pc, #408]	; (80011fc <InfoToUARTBeforeStart+0x1ac>)
 8001062:	f004 f9fb 	bl	800545c <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.Calibration0ValueForCurrent ,0);
 8001066:	4620      	mov	r0, r4
 8001068:	f004 f9ba 	bl	80053e0 <printToBufferWithoutEndUART1>
 800106c:	68a9      	ldr	r1, [r5, #8]
 800106e:	2200      	movs	r2, #0
 8001070:	4863      	ldr	r0, [pc, #396]	; (8001200 <InfoToUARTBeforeStart+0x1b0>)
 8001072:	f004 f9f3 	bl	800545c <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent1 =",CalibrationData.Calibration0ValueForCurrent1 ,0);
 8001076:	4620      	mov	r0, r4
 8001078:	f004 f9b2 	bl	80053e0 <printToBufferWithoutEndUART1>
 800107c:	6929      	ldr	r1, [r5, #16]
 800107e:	2200      	movs	r2, #0
 8001080:	4860      	ldr	r0, [pc, #384]	; (8001204 <InfoToUARTBeforeStart+0x1b4>)
 8001082:	f004 f9eb 	bl	800545c <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent =",CalibrationData.CalibrationForCurrent_mA1 ,0);
 8001086:	4620      	mov	r0, r4
 8001088:	f004 f9aa 	bl	80053e0 <printToBufferWithoutEndUART1>
 800108c:	69a9      	ldr	r1, [r5, #24]
 800108e:	2200      	movs	r2, #0
 8001090:	485d      	ldr	r0, [pc, #372]	; (8001208 <InfoToUARTBeforeStart+0x1b8>)
 8001092:	f004 f9e3 	bl	800545c <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationForCurrent_mkA1 ,0);
 8001096:	4620      	mov	r0, r4
 8001098:	f004 f9a2 	bl	80053e0 <printToBufferWithoutEndUART1>
 800109c:	6a29      	ldr	r1, [r5, #32]
 800109e:	2200      	movs	r2, #0
 80010a0:	485a      	ldr	r0, [pc, #360]	; (800120c <InfoToUARTBeforeStart+0x1bc>)
 80010a2:	f004 f9db 	bl	800545c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage =",CalibrationData.CalibrationValueForVoltage ,0);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f004 f99a 	bl	80053e0 <printToBufferWithoutEndUART1>
 80010ac:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80010ae:	2200      	movs	r2, #0
 80010b0:	4857      	ldr	r0, [pc, #348]	; (8001210 <InfoToUARTBeforeStart+0x1c0>)
 80010b2:	f004 f9d3 	bl	800545c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForVoltage1 ,0);
 80010b6:	4620      	mov	r0, r4
 80010b8:	f004 f992 	bl	80053e0 <printToBufferWithoutEndUART1>
 80010bc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80010be:	2200      	movs	r2, #0
 80010c0:	4854      	ldr	r0, [pc, #336]	; (8001214 <InfoToUARTBeforeStart+0x1c4>)
 80010c2:	f004 f9cb 	bl	800545c <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 80010c6:	4620      	mov	r0, r4
 80010c8:	f004 f98a 	bl	80053e0 <printToBufferWithoutEndUART1>
 80010cc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80010ce:	2200      	movs	r2, #0
 80010d0:	4851      	ldr	r0, [pc, #324]	; (8001218 <InfoToUARTBeforeStart+0x1c8>)
 80010d2:	f004 f9c3 	bl	800545c <printToBufferUART1D>
	logInfoD("ResistanceComp_Ishunt_Wires =",CalibrationData.ResistanceComp_Ishunt_Wires ,0) ;
 80010d6:	4620      	mov	r0, r4
 80010d8:	f004 f982 	bl	80053e0 <printToBufferWithoutEndUART1>
 80010dc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010de:	2200      	movs	r2, #0
 80010e0:	484e      	ldr	r0, [pc, #312]	; (800121c <InfoToUARTBeforeStart+0x1cc>)
 80010e2:	f004 f9bb 	bl	800545c <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 80010e6:	4620      	mov	r0, r4
 80010e8:	f004 f97a 	bl	80053e0 <printToBufferWithoutEndUART1>
 80010ec:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80010ee:	2200      	movs	r2, #0
 80010f0:	484b      	ldr	r0, [pc, #300]	; (8001220 <InfoToUARTBeforeStart+0x1d0>)
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 80010f2:	4d4c      	ldr	r5, [pc, #304]	; (8001224 <InfoToUARTBeforeStart+0x1d4>)
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 80010f4:	f004 f9b2 	bl	800545c <printToBufferUART1D>
	delay_ms(50);
 80010f8:	2032      	movs	r0, #50	; 0x32
 80010fa:	f7ff ff99 	bl	8001030 <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 80010fe:	4620      	mov	r0, r4
 8001100:	f004 f96e 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001104:	6829      	ldr	r1, [r5, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	4847      	ldr	r0, [pc, #284]	; (8001228 <InfoToUARTBeforeStart+0x1d8>)
 800110a:	f004 f9a7 	bl	800545c <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 800110e:	4620      	mov	r0, r4
 8001110:	f004 f966 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001114:	68a9      	ldr	r1, [r5, #8]
 8001116:	2200      	movs	r2, #0
 8001118:	4844      	ldr	r0, [pc, #272]	; (800122c <InfoToUARTBeforeStart+0x1dc>)
 800111a:	f004 f99f 	bl	800545c <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 800111e:	4620      	mov	r0, r4
 8001120:	f004 f95e 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001124:	6929      	ldr	r1, [r5, #16]
 8001126:	2200      	movs	r2, #0
 8001128:	4841      	ldr	r0, [pc, #260]	; (8001230 <InfoToUARTBeforeStart+0x1e0>)
 800112a:	f004 f997 	bl	800545c <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 800112e:	4620      	mov	r0, r4
 8001130:	f004 f956 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001134:	69a9      	ldr	r1, [r5, #24]
 8001136:	2200      	movs	r2, #0
 8001138:	483e      	ldr	r0, [pc, #248]	; (8001234 <InfoToUARTBeforeStart+0x1e4>)
 800113a:	f004 f98f 	bl	800545c <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 800113e:	4620      	mov	r0, r4
 8001140:	f004 f94e 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001144:	6a29      	ldr	r1, [r5, #32]
 8001146:	2200      	movs	r2, #0
 8001148:	483b      	ldr	r0, [pc, #236]	; (8001238 <InfoToUARTBeforeStart+0x1e8>)
 800114a:	f004 f987 	bl	800545c <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 800114e:	4620      	mov	r0, r4
 8001150:	f004 f946 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001154:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001156:	2200      	movs	r2, #0
 8001158:	4838      	ldr	r0, [pc, #224]	; (800123c <InfoToUARTBeforeStart+0x1ec>)
 800115a:	f004 f97f 	bl	800545c <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 800115e:	4620      	mov	r0, r4
 8001160:	f004 f93e 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001164:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	4835      	ldr	r0, [pc, #212]	; (8001240 <InfoToUARTBeforeStart+0x1f0>)
 800116a:	f004 f977 	bl	800545c <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 800116e:	4620      	mov	r0, r4
 8001170:	f004 f936 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001174:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001176:	2200      	movs	r2, #0
 8001178:	4832      	ldr	r0, [pc, #200]	; (8001244 <InfoToUARTBeforeStart+0x1f4>)
 800117a:	f004 f96f 	bl	800545c <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 800117e:	4620      	mov	r0, r4
 8001180:	f004 f92e 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001184:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001186:	2200      	movs	r2, #0
 8001188:	482f      	ldr	r0, [pc, #188]	; (8001248 <InfoToUARTBeforeStart+0x1f8>)
 800118a:	f004 f967 	bl	800545c <printToBufferUART1D>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 800118e:	4d2f      	ldr	r5, [pc, #188]	; (800124c <InfoToUARTBeforeStart+0x1fc>)
	delay_ms(50);
 8001190:	2032      	movs	r0, #50	; 0x32
 8001192:	f7ff ff4d 	bl	8001030 <delay_ms>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8001196:	4620      	mov	r0, r4
 8001198:	f004 f922 	bl	80053e0 <printToBufferWithoutEndUART1>
 800119c:	6829      	ldr	r1, [r5, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	482b      	ldr	r0, [pc, #172]	; (8001250 <InfoToUARTBeforeStart+0x200>)
 80011a2:	f004 f95b 	bl	800545c <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.CurrentConsumption5ms ,0);
 80011a6:	4620      	mov	r0, r4
 80011a8:	f004 f91a 	bl	80053e0 <printToBufferWithoutEndUART1>
 80011ac:	68a9      	ldr	r1, [r5, #8]
 80011ae:	2200      	movs	r2, #0
 80011b0:	4828      	ldr	r0, [pc, #160]	; (8001254 <InfoToUARTBeforeStart+0x204>)
 80011b2:	f004 f953 	bl	800545c <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.CurrentConsumption1s ,0);
 80011b6:	4620      	mov	r0, r4
 80011b8:	f004 f912 	bl	80053e0 <printToBufferWithoutEndUART1>
 80011bc:	6929      	ldr	r1, [r5, #16]
 80011be:	2200      	movs	r2, #0
 80011c0:	4825      	ldr	r0, [pc, #148]	; (8001258 <InfoToUARTBeforeStart+0x208>)
 80011c2:	f004 f94b 	bl	800545c <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 80011c6:	4620      	mov	r0, r4
 80011c8:	f004 f90a 	bl	80053e0 <printToBufferWithoutEndUART1>
 80011cc:	69a9      	ldr	r1, [r5, #24]
 80011ce:	2200      	movs	r2, #0
 80011d0:	4822      	ldr	r0, [pc, #136]	; (800125c <InfoToUARTBeforeStart+0x20c>)
 80011d2:	f004 f943 	bl	800545c <printToBufferUART1D>
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 80011d6:	4620      	mov	r0, r4
 80011d8:	f004 f902 	bl	80053e0 <printToBufferWithoutEndUART1>
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <InfoToUARTBeforeStart+0x210>)
 80011de:	4821      	ldr	r0, [pc, #132]	; (8001264 <InfoToUARTBeforeStart+0x214>)
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f004 f93a 	bl	800545c <printToBufferUART1D>
}
 80011e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_ms(50);
 80011ec:	2032      	movs	r0, #50	; 0x32
 80011ee:	f7ff bf1f 	b.w	8001030 <delay_ms>
 80011f2:	bf00      	nop
 80011f4:	08005dda 	.word	0x08005dda
 80011f8:	20000004 	.word	0x20000004
 80011fc:	08005de1 	.word	0x08005de1
 8001200:	08005df4 	.word	0x08005df4
 8001204:	08005e12 	.word	0x08005e12
 8001208:	08005e31 	.word	0x08005e31
 800120c:	08005e4e 	.word	0x08005e4e
 8001210:	08005e6c 	.word	0x08005e6c
 8001214:	08005e89 	.word	0x08005e89
 8001218:	08005ea7 	.word	0x08005ea7
 800121c:	08005ec5 	.word	0x08005ec5
 8001220:	08005ee3 	.word	0x08005ee3
 8001224:	20000154 	.word	0x20000154
 8001228:	08005efb 	.word	0x08005efb
 800122c:	08005f0f 	.word	0x08005f0f
 8001230:	08005f28 	.word	0x08005f28
 8001234:	08005f35 	.word	0x08005f35
 8001238:	08005f42 	.word	0x08005f42
 800123c:	08005f4f 	.word	0x08005f4f
 8001240:	08005f5d 	.word	0x08005f5d
 8001244:	08005f6f 	.word	0x08005f6f
 8001248:	08005f82 	.word	0x08005f82
 800124c:	200000f4 	.word	0x200000f4
 8001250:	08005f9f 	.word	0x08005f9f
 8001254:	08005fbb 	.word	0x08005fbb
 8001258:	08005fe3 	.word	0x08005fe3
 800125c:	08006005 	.word	0x08006005
 8001260:	2000028c 	.word	0x2000028c
 8001264:	08006011 	.word	0x08006011

08001268 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	2300      	movs	r3, #0
	static char s1[16];
     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 800126c:	270a      	movs	r7, #10
 800126e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
{
 8001272:	b085      	sub	sp, #20
 8001274:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
         s[i++] = n % 10 + '0';
 8001278:	461c      	mov	r4, r3
 800127a:	fbb1 f6f7 	udiv	r6, r1, r7
 800127e:	ad04      	add	r5, sp, #16
 8001280:	442c      	add	r4, r5
 8001282:	fb07 1516 	mls	r5, r7, r6, r1
 8001286:	3530      	adds	r5, #48	; 0x30
 8001288:	f804 5c10 	strb.w	r5, [r4, #-16]
 800128c:	460c      	mov	r4, r1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	1c53      	adds	r3, r2, #1
     } while ((n /= 10) > 0);
 8001292:	2c09      	cmp	r4, #9
 8001294:	4631      	mov	r1, r6
 8001296:	b25b      	sxtb	r3, r3
 8001298:	dcee      	bgt.n	8001278 <itoa+0x10>
     if (sign < 0)
 800129a:	2800      	cmp	r0, #0
 800129c:	da06      	bge.n	80012ac <itoa+0x44>
         s[i++] = '-';
 800129e:	a904      	add	r1, sp, #16
 80012a0:	440b      	add	r3, r1
 80012a2:	212d      	movs	r1, #45	; 0x2d
 80012a4:	3202      	adds	r2, #2
 80012a6:	f803 1c10 	strb.w	r1, [r3, #-16]
 80012aa:	b253      	sxtb	r3, r2
     s[i] = '\0';
 80012ac:	2100      	movs	r1, #0
 80012ae:	aa04      	add	r2, sp, #16
 80012b0:	441a      	add	r2, r3
 80012b2:	f802 1c10 	strb.w	r1, [r2, #-16]

     k=0;
     while (i)
 80012b6:	461a      	mov	r2, r3
 80012b8:	4c08      	ldr	r4, [pc, #32]	; (80012dc <itoa+0x74>)
 80012ba:	b2d0      	uxtb	r0, r2
 80012bc:	1a19      	subs	r1, r3, r0
 80012be:	b249      	sxtb	r1, r1
 80012c0:	b91a      	cbnz	r2, 80012ca <itoa+0x62>
    	i--;
    	k++;
     }
     s1[k] = '\0';
     return s1;
}
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <itoa+0x74>)
     s1[k] = '\0';
 80012c4:	5462      	strb	r2, [r4, r1]
}
 80012c6:	b005      	add	sp, #20
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 80012ca:	ad04      	add	r5, sp, #16
 80012cc:	442a      	add	r2, r5
 80012ce:	f812 2c11 	ldrb.w	r2, [r2, #-17]
 80012d2:	5462      	strb	r2, [r4, r1]
    	i--;
 80012d4:	1e42      	subs	r2, r0, #1
 80012d6:	b252      	sxtb	r2, r2
    	k++;
 80012d8:	e7ef      	b.n	80012ba <itoa+0x52>
 80012da:	bf00      	nop
 80012dc:	2000075c 	.word	0x2000075c

080012e0 <itoaP>:

char * itoaP(int32_t n,char *s1)
{
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4604      	mov	r4, r0
 80012e4:	2300      	movs	r3, #0

     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 80012e6:	f04f 0c0a 	mov.w	ip, #10
{
 80012ea:	4608      	mov	r0, r1
 80012ec:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 80012f0:	b085      	sub	sp, #20
 80012f2:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
         s[i++] = n % 10 + '0';
 80012f6:	461d      	mov	r5, r3
 80012f8:	fbb1 f7fc 	udiv	r7, r1, ip
 80012fc:	ae04      	add	r6, sp, #16
 80012fe:	4435      	add	r5, r6
 8001300:	fb0c 1617 	mls	r6, ip, r7, r1
 8001304:	3630      	adds	r6, #48	; 0x30
 8001306:	f805 6c10 	strb.w	r6, [r5, #-16]
 800130a:	460d      	mov	r5, r1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	1c53      	adds	r3, r2, #1
     } while ((n /= 10) > 0);
 8001310:	2d09      	cmp	r5, #9
 8001312:	4639      	mov	r1, r7
 8001314:	b25b      	sxtb	r3, r3
 8001316:	dcee      	bgt.n	80012f6 <itoaP+0x16>
     if (sign < 0)
 8001318:	2c00      	cmp	r4, #0
 800131a:	da06      	bge.n	800132a <itoaP+0x4a>
         s[i++] = '-';
 800131c:	a904      	add	r1, sp, #16
 800131e:	440b      	add	r3, r1
 8001320:	212d      	movs	r1, #45	; 0x2d
 8001322:	3202      	adds	r2, #2
 8001324:	f803 1c10 	strb.w	r1, [r3, #-16]
 8001328:	b253      	sxtb	r3, r2
     s[i] = '\0';
 800132a:	2100      	movs	r1, #0
 800132c:	aa04      	add	r2, sp, #16
 800132e:	441a      	add	r2, r3
 8001330:	f802 1c10 	strb.w	r1, [r2, #-16]

     k=0;
     while (i)
 8001334:	461a      	mov	r2, r3
 8001336:	b2d4      	uxtb	r4, r2
 8001338:	1b19      	subs	r1, r3, r4
 800133a:	b249      	sxtb	r1, r1
 800133c:	1845      	adds	r5, r0, r1
 800133e:	b912      	cbnz	r2, 8001346 <itoaP+0x66>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 8001340:	702a      	strb	r2, [r5, #0]
     return s1;
}
 8001342:	b005      	add	sp, #20
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 8001346:	ad04      	add	r5, sp, #16
 8001348:	442a      	add	r2, r5
 800134a:	f812 2c11 	ldrb.w	r2, [r2, #-17]
 800134e:	5442      	strb	r2, [r0, r1]
    	i--;
 8001350:	1e62      	subs	r2, r4, #1
 8001352:	b252      	sxtb	r2, r2
    	k++;
 8001354:	e7ef      	b.n	8001336 <itoaP+0x56>
	...

08001358 <itoa_koma>:

char * itoa_koma(int32_t n,uint8_t koma)
{
 8001358:	2200      	movs	r2, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 800135a:	f04f 0c0a 	mov.w	ip, #10
{
 800135e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001360:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8001364:	b08b      	sub	sp, #44	; 0x2c
 8001366:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 800136a:	4615      	mov	r5, r2
 800136c:	fbb4 f7fc 	udiv	r7, r4, ip
 8001370:	ae0a      	add	r6, sp, #40	; 0x28
 8001372:	4435      	add	r5, r6
 8001374:	fb0c 4617 	mls	r6, ip, r7, r4
 8001378:	3630      	adds	r6, #48	; 0x30
 800137a:	f805 6c28 	strb.w	r6, [r5, #-40]
 800137e:	4625      	mov	r5, r4
 8001380:	b2d3      	uxtb	r3, r2
 8001382:	1c5a      	adds	r2, r3, #1
     } while ((n /= 10) > 0);
 8001384:	2d09      	cmp	r5, #9
 8001386:	463c      	mov	r4, r7
 8001388:	b252      	sxtb	r2, r2
 800138a:	dcee      	bgt.n	800136a <itoa_koma+0x12>
     s[i] = '\0';
     if (i<=1)
 800138c:	2a01      	cmp	r2, #1
 800138e:	ac0a      	add	r4, sp, #40	; 0x28
 8001390:	4414      	add	r4, r2
     {
       	 s[i] = '0';
 8001392:	bfd7      	itett	le
 8001394:	2230      	movle	r2, #48	; 0x30
     s[i] = '\0';
 8001396:	2300      	movgt	r3, #0
       	 s[i] = '0';
 8001398:	f804 2c28 	strble.w	r2, [r4, #-40]
       	 i++;
 800139c:	1c9a      	addle	r2, r3, #2
 800139e:	bfd4      	ite	le
 80013a0:	b252      	sxtble	r2, r2
     s[i] = '\0';
 80013a2:	f804 3c28 	strbgt.w	r3, [r4, #-40]
     }
     if (i<=2&&koma>1)
 80013a6:	2a02      	cmp	r2, #2
 80013a8:	dc08      	bgt.n	80013bc <itoa_koma+0x64>
 80013aa:	2901      	cmp	r1, #1
 80013ac:	d906      	bls.n	80013bc <itoa_koma+0x64>
     {
    	 s[i] = '0';
 80013ae:	2430      	movs	r4, #48	; 0x30
 80013b0:	ab0a      	add	r3, sp, #40	; 0x28
 80013b2:	4413      	add	r3, r2
    	 i++;
 80013b4:	3201      	adds	r2, #1
    	 s[i] = '0';
 80013b6:	f803 4c28 	strb.w	r4, [r3, #-40]
    	 i++;
 80013ba:	b252      	sxtb	r2, r2
     }
     k=0;
     j=0;
     while (j<i)
 80013bc:	2400      	movs	r4, #0
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 80013be:	262e      	movs	r6, #46	; 0x2e
     k=0;
 80013c0:	4623      	mov	r3, r4
     while (j<i)
 80013c2:	b265      	sxtb	r5, r4
 80013c4:	42aa      	cmp	r2, r5
 80013c6:	dc12      	bgt.n	80013ee <itoa_koma+0x96>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 80013c8:	2800      	cmp	r0, #0
 80013ca:	da06      	bge.n	80013da <itoa_koma+0x82>
 80013cc:	a90a      	add	r1, sp, #40	; 0x28
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	440b      	add	r3, r1
 80013d2:	212d      	movs	r1, #45	; 0x2d
 80013d4:	f803 1c14 	strb.w	r1, [r3, #-20]
 80013d8:	b253      	sxtb	r3, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	4c11      	ldr	r4, [pc, #68]	; (8001424 <itoa_koma+0xcc>)
 80013de:	b2d0      	uxtb	r0, r2
     i=0;
     while (k)
 80013e0:	1a19      	subs	r1, r3, r0
 80013e2:	b249      	sxtb	r1, r1
 80013e4:	b9b2      	cbnz	r2, 8001414 <itoa_koma+0xbc>
    	k--;
    	i++;
     }
     s1[i] = '\0';
     return s1;
}
 80013e6:	480f      	ldr	r0, [pc, #60]	; (8001424 <itoa_koma+0xcc>)
     s1[i] = '\0';
 80013e8:	5462      	strb	r2, [r4, r1]
}
 80013ea:	b00b      	add	sp, #44	; 0x2c
 80013ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	 if (k==koma)
 80013ee:	428b      	cmp	r3, r1
 80013f0:	461d      	mov	r5, r3
 80013f2:	d105      	bne.n	8001400 <itoa_koma+0xa8>
         	 sKoma[k]='.';
 80013f4:	af0a      	add	r7, sp, #40	; 0x28
 80013f6:	3301      	adds	r3, #1
 80013f8:	443d      	add	r5, r7
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	f805 6c14 	strb.w	r6, [r5, #-20]
    	 sKoma[k]=s[j];
 8001400:	f81d 7004 	ldrb.w	r7, [sp, r4]
 8001404:	ad0a      	add	r5, sp, #40	; 0x28
 8001406:	441d      	add	r5, r3
         k++;
 8001408:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 800140a:	f805 7c14 	strb.w	r7, [r5, #-20]
         k++;
 800140e:	b25b      	sxtb	r3, r3
 8001410:	3401      	adds	r4, #1
 8001412:	e7d6      	b.n	80013c2 <itoa_koma+0x6a>
    	s1[i]=sKoma[k-1];
 8001414:	ad0a      	add	r5, sp, #40	; 0x28
 8001416:	442a      	add	r2, r5
 8001418:	f812 2c15 	ldrb.w	r2, [r2, #-21]
 800141c:	5462      	strb	r2, [r4, r1]
    	k--;
 800141e:	1e42      	subs	r2, r0, #1
 8001420:	b252      	sxtb	r2, r2
    	i++;
 8001422:	e7dc      	b.n	80013de <itoa_koma+0x86>
 8001424:	2000076c 	.word	0x2000076c

08001428 <Module16>:
     s1[i] = '\0';
     return s1;
}
int16_t Module16 (int16_t value)
{
	if (value == 0) return 0;
 8001428:	2800      	cmp	r0, #0
 800142a:	d002      	beq.n	8001432 <Module16+0xa>
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
 800142c:	bfdc      	itt	le
 800142e:	4240      	negle	r0, r0
 8001430:	b200      	sxthle	r0, r0
}
 8001432:	4770      	bx	lr

08001434 <strlen1>:
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
}

uint8_t strlen1(char string[])
{
 8001434:	4602      	mov	r2, r0
	uint8_t i=0;
	while(string[i]!='\0')
 8001436:	2300      	movs	r3, #0
 8001438:	b2d8      	uxtb	r0, r3
 800143a:	5c11      	ldrb	r1, [r2, r0]
 800143c:	3301      	adds	r3, #1
 800143e:	2900      	cmp	r1, #0
 8001440:	d1fa      	bne.n	8001438 <strlen1+0x4>
		i++;
	return i;
}
 8001442:	4770      	bx	lr

08001444 <Merge2Strings>:

char * Merge2Strings(char * str1in, char * str2in, char * strout)
{
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	4605      	mov	r5, r0
	int8_t i, j;
	for (i=0; str1in[i]!='\0'; i++)
 8001448:	2400      	movs	r4, #0
{
 800144a:	4610      	mov	r0, r2
	for (i=0; str1in[i]!='\0'; i++)
 800144c:	b262      	sxtb	r2, r4
 800144e:	5cab      	ldrb	r3, [r5, r2]
 8001450:	1c66      	adds	r6, r4, #1
 8001452:	b943      	cbnz	r3, 8001466 <Merge2Strings+0x22>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 8001454:	b25a      	sxtb	r2, r3
 8001456:	5c8d      	ldrb	r5, [r1, r2]
 8001458:	18e2      	adds	r2, r4, r3
 800145a:	b252      	sxtb	r2, r2
 800145c:	1886      	adds	r6, r0, r2
 800145e:	3301      	adds	r3, #1
 8001460:	b925      	cbnz	r5, 800146c <Merge2Strings+0x28>
	{
		strout[i] = str2in[j];
	}
	strout[i] = '\0';
 8001462:	7035      	strb	r5, [r6, #0]
	return strout;
}
 8001464:	bd70      	pop	{r4, r5, r6, pc}
		strout[i] = str1in[i];
 8001466:	4634      	mov	r4, r6
 8001468:	5483      	strb	r3, [r0, r2]
	for (i=0; str1in[i]!='\0'; i++)
 800146a:	e7ef      	b.n	800144c <Merge2Strings+0x8>
		strout[i] = str2in[j];
 800146c:	5485      	strb	r5, [r0, r2]
	for (j=0; str2in[j]!='\0'; j++,i++)
 800146e:	e7f1      	b.n	8001454 <Merge2Strings+0x10>

08001470 <Merge3Strings>:
char * Merge3Strings(char * str1in, char * str2in,char * str3in, char * strout)
{
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	4604      	mov	r4, r0
 8001474:	460f      	mov	r7, r1
 8001476:	4618      	mov	r0, r3
	int8_t i, j,k;
	for (i=0; str1in[i]!='\0'; i++)
 8001478:	2500      	movs	r5, #0
 800147a:	b269      	sxtb	r1, r5
 800147c:	5c63      	ldrb	r3, [r4, r1]
 800147e:	1c6e      	adds	r6, r5, #1
 8001480:	b983      	cbnz	r3, 80014a4 <Merge3Strings+0x34>
 8001482:	b2de      	uxtb	r6, r3
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 8001484:	5cf9      	ldrb	r1, [r7, r3]
 8001486:	1974      	adds	r4, r6, r5
 8001488:	fa5f fc84 	uxtb.w	ip, r4
 800148c:	b264      	sxtb	r4, r4
 800148e:	b961      	cbnz	r1, 80014aa <Merge3Strings+0x3a>
	{
		strout[i] = str2in[j];
	}
	for (k=0; str3in[k]!='\0'; k++,i++)
 8001490:	b24b      	sxtb	r3, r1
 8001492:	5cd4      	ldrb	r4, [r2, r3]
 8001494:	eb0c 0301 	add.w	r3, ip, r1
 8001498:	b25b      	sxtb	r3, r3
 800149a:	18c5      	adds	r5, r0, r3
 800149c:	3101      	adds	r1, #1
 800149e:	b944      	cbnz	r4, 80014b2 <Merge3Strings+0x42>
	{
		strout[i] = str3in[k];
	}
	strout[i] = '\0';
 80014a0:	702c      	strb	r4, [r5, #0]
	return strout;
}
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strout[i] = str1in[i];
 80014a4:	4635      	mov	r5, r6
 80014a6:	5443      	strb	r3, [r0, r1]
	for (i=0; str1in[i]!='\0'; i++)
 80014a8:	e7e7      	b.n	800147a <Merge3Strings+0xa>
		strout[i] = str2in[j];
 80014aa:	1c73      	adds	r3, r6, #1
 80014ac:	5501      	strb	r1, [r0, r4]
	for (j=0; str2in[j]!='\0'; j++,i++)
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	e7e7      	b.n	8001482 <Merge3Strings+0x12>
		strout[i] = str3in[k];
 80014b2:	54c4      	strb	r4, [r0, r3]
	for (k=0; str3in[k]!='\0'; k++,i++)
 80014b4:	e7ec      	b.n	8001490 <Merge3Strings+0x20>

080014b6 <ClockStringWithSec>:

char *ClockStringWithSec(uint32_t time, char *OutStr)
{
 80014b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014ba:	4607      	mov	r7, r0
	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 80014bc:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 80014c0:	b086      	sub	sp, #24
 80014c2:	460c      	mov	r4, r1
	itoaP(time/3600,s);
 80014c4:	fbb7 f0f0 	udiv	r0, r7, r0
 80014c8:	a901      	add	r1, sp, #4
 80014ca:	f7ff ff09 	bl	80012e0 <itoaP>
	i=0;
	if (strlen1(s)<2)
 80014ce:	a801      	add	r0, sp, #4
 80014d0:	f7ff ffb0 	bl	8001434 <strlen1>
 80014d4:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 80014d6:	bf96      	itet	ls
 80014d8:	2201      	movls	r2, #1
	i=0;
 80014da:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 80014dc:	2330      	movls	r3, #48	; 0x30
	i=0;
 80014de:	4615      	mov	r5, r2
		OutStr[i] = '0';
 80014e0:	bf98      	it	ls
 80014e2:	7023      	strbls	r3, [r4, #0]
		i++;
 80014e4:	b2ee      	uxtb	r6, r5
	}

	for (k=0; s[k]!='\0';k++, i++)
 80014e6:	1ab3      	subs	r3, r6, r2
 80014e8:	a906      	add	r1, sp, #24
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	440b      	add	r3, r1
 80014ee:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80014f2:	1963      	adds	r3, r4, r5
 80014f4:	1c75      	adds	r5, r6, #1
 80014f6:	b26d      	sxtb	r5, r5
 80014f8:	2900      	cmp	r1, #0
 80014fa:	d149      	bne.n	8001590 <ClockStringWithSec+0xda>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 80014fc:	223a      	movs	r2, #58	; 0x3a
 80014fe:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 8001500:	233c      	movs	r3, #60	; 0x3c
 8001502:	fbb7 f2f3 	udiv	r2, r7, r3
 8001506:	fbb2 f0f3 	udiv	r0, r2, r3
 800150a:	a901      	add	r1, sp, #4
 800150c:	fb03 2010 	mls	r0, r3, r0, r2
 8001510:	f7ff fee6 	bl	80012e0 <itoaP>
	if (strlen1(s)<2)
 8001514:	a801      	add	r0, sp, #4
 8001516:	f7ff ff8d 	bl	8001434 <strlen1>
 800151a:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 800151c:	bf9f      	itttt	ls
 800151e:	2330      	movls	r3, #48	; 0x30
 8001520:	5563      	strbls	r3, [r4, r5]
		i++;
 8001522:	1cb5      	addls	r5, r6, #2
 8001524:	b26d      	sxtbls	r5, r5
	i=0;
 8001526:	462e      	mov	r6, r5
 8001528:	fa5f f886 	uxtb.w	r8, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 800152c:	eba8 0305 	sub.w	r3, r8, r5
 8001530:	aa06      	add	r2, sp, #24
 8001532:	b25b      	sxtb	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800153a:	19a3      	adds	r3, r4, r6
 800153c:	f108 0601 	add.w	r6, r8, #1
 8001540:	b276      	sxtb	r6, r6
 8001542:	bb3a      	cbnz	r2, 8001594 <ClockStringWithSec+0xde>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = ':';
 8001544:	223a      	movs	r2, #58	; 0x3a
 8001546:	701a      	strb	r2, [r3, #0]
	i++;

	itoaP(time%60,s);
 8001548:	233c      	movs	r3, #60	; 0x3c
 800154a:	fbb7 f0f3 	udiv	r0, r7, r3
 800154e:	a901      	add	r1, sp, #4
 8001550:	fb03 7010 	mls	r0, r3, r0, r7
 8001554:	f7ff fec4 	bl	80012e0 <itoaP>
	if (strlen1(s)<2)
 8001558:	a801      	add	r0, sp, #4
 800155a:	f7ff ff6b 	bl	8001434 <strlen1>
 800155e:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001560:	bf9c      	itt	ls
 8001562:	2330      	movls	r3, #48	; 0x30
 8001564:	55a3      	strbls	r3, [r4, r6]
	i=0;
 8001566:	f04f 0300 	mov.w	r3, #0
		i++;
 800156a:	bf9c      	itt	ls
 800156c:	f108 0602 	addls.w	r6, r8, #2
 8001570:	b276      	sxtbls	r6, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001572:	b25a      	sxtb	r2, r3
 8001574:	a906      	add	r1, sp, #24
 8001576:	440a      	add	r2, r1
 8001578:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800157c:	199a      	adds	r2, r3, r6
 800157e:	b252      	sxtb	r2, r2
 8001580:	18a0      	adds	r0, r4, r2
 8001582:	3301      	adds	r3, #1
 8001584:	b941      	cbnz	r1, 8001598 <ClockStringWithSec+0xe2>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = '\0';
 8001586:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 8001588:	4620      	mov	r0, r4
 800158a:	b006      	add	sp, #24
 800158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		OutStr[i] = s[k];
 8001590:	7019      	strb	r1, [r3, #0]
	for (k=0; s[k]!='\0';k++, i++)
 8001592:	e7a7      	b.n	80014e4 <ClockStringWithSec+0x2e>
		OutStr[i] = s[j];
 8001594:	701a      	strb	r2, [r3, #0]
	for (j=0; s[j]!='\0'; i++,j++)
 8001596:	e7c7      	b.n	8001528 <ClockStringWithSec+0x72>
		OutStr[i] = s[j];
 8001598:	54a1      	strb	r1, [r4, r2]
	for (j=0; s[j]!='\0'; i++,j++)
 800159a:	e7ea      	b.n	8001572 <ClockStringWithSec+0xbc>

0800159c <ClockStringNoSec>:

char *ClockStringNoSec(uint32_t time, char *OutStr)
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159e:	4606      	mov	r6, r0

	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 80015a0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 80015a4:	b087      	sub	sp, #28
 80015a6:	460c      	mov	r4, r1
	itoaP(time/3600,s);
 80015a8:	fbb6 f0f0 	udiv	r0, r6, r0
 80015ac:	a901      	add	r1, sp, #4
 80015ae:	f7ff fe97 	bl	80012e0 <itoaP>
	i=0;
	if (strlen1(s)<2)
 80015b2:	a801      	add	r0, sp, #4
 80015b4:	f7ff ff3e 	bl	8001434 <strlen1>
 80015b8:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 80015ba:	bf96      	itet	ls
 80015bc:	2201      	movls	r2, #1
	i=0;
 80015be:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 80015c0:	2330      	movls	r3, #48	; 0x30
	i=0;
 80015c2:	4615      	mov	r5, r2
		OutStr[i] = '0';
 80015c4:	bf98      	it	ls
 80015c6:	7023      	strbls	r3, [r4, #0]
		i++;
 80015c8:	b2ef      	uxtb	r7, r5
	}

	for (k=0; s[k]!='\0';k++, i++)
 80015ca:	1abb      	subs	r3, r7, r2
 80015cc:	a906      	add	r1, sp, #24
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	440b      	add	r3, r1
 80015d2:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80015d6:	1963      	adds	r3, r4, r5
 80015d8:	1c7d      	adds	r5, r7, #1
 80015da:	b26d      	sxtb	r5, r5
 80015dc:	bb29      	cbnz	r1, 800162a <ClockStringNoSec+0x8e>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 80015de:	223a      	movs	r2, #58	; 0x3a
 80015e0:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 80015e2:	233c      	movs	r3, #60	; 0x3c
 80015e4:	fbb6 f6f3 	udiv	r6, r6, r3
 80015e8:	fbb6 f0f3 	udiv	r0, r6, r3
 80015ec:	a901      	add	r1, sp, #4
 80015ee:	fb03 6010 	mls	r0, r3, r0, r6
 80015f2:	f7ff fe75 	bl	80012e0 <itoaP>
	if (strlen1(s)<2)
 80015f6:	a801      	add	r0, sp, #4
 80015f8:	f7ff ff1c 	bl	8001434 <strlen1>
 80015fc:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 80015fe:	bf9c      	itt	ls
 8001600:	2330      	movls	r3, #48	; 0x30
 8001602:	5563      	strbls	r3, [r4, r5]
	i=0;
 8001604:	f04f 0300 	mov.w	r3, #0
		i++;
 8001608:	bf9c      	itt	ls
 800160a:	1cbd      	addls	r5, r7, #2
 800160c:	b26d      	sxtbls	r5, r5
	}
	for (j=0; s[j]!='\0'; i++,j++)
 800160e:	b25a      	sxtb	r2, r3
 8001610:	a906      	add	r1, sp, #24
 8001612:	440a      	add	r2, r1
 8001614:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001618:	195a      	adds	r2, r3, r5
 800161a:	b252      	sxtb	r2, r2
 800161c:	18a0      	adds	r0, r4, r2
 800161e:	3301      	adds	r3, #1
 8001620:	b929      	cbnz	r1, 800162e <ClockStringNoSec+0x92>
	{
		OutStr[i] = s[j];
	}


	OutStr[i] = '\0';
 8001622:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 8001624:	4620      	mov	r0, r4
 8001626:	b007      	add	sp, #28
 8001628:	bdf0      	pop	{r4, r5, r6, r7, pc}
		OutStr[i] = s[k];
 800162a:	7019      	strb	r1, [r3, #0]
	for (k=0; s[k]!='\0';k++, i++)
 800162c:	e7cc      	b.n	80015c8 <ClockStringNoSec+0x2c>
		OutStr[i] = s[j];
 800162e:	54a1      	strb	r1, [r4, r2]
	for (j=0; s[j]!='\0'; i++,j++)
 8001630:	e7ed      	b.n	800160e <ClockStringNoSec+0x72>
	...

08001634 <middle_of_3Imax1>:

int32_t middle_of_3Imax1(int32_t value)
{
   static int32_t InputValueI1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI1[2] = InputValueI1[1];
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <middle_of_3Imax1+0x34>)
 8001636:	684b      	ldr	r3, [r1, #4]
   InputValueI1[1] = InputValueI1[0];
 8001638:	680a      	ldr	r2, [r1, #0]
   InputValueI1[2] = InputValueI1[1];
 800163a:	608b      	str	r3, [r1, #8]
   InputValueI1[0] = value;
   a = InputValueI1[2];
   b = InputValueI1[1];
   c = InputValueI1[0];
   if ((a <= b) && (a <= c)){
 800163c:	4293      	cmp	r3, r2
   InputValueI1[0] = value;
 800163e:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 8001642:	dc05      	bgt.n	8001650 <middle_of_3Imax1+0x1c>
 8001644:	4283      	cmp	r3, r0
 8001646:	dc09      	bgt.n	800165c <middle_of_3Imax1+0x28>
      middle = (b <= c) ? b : c;
 8001648:	4290      	cmp	r0, r2
 800164a:	bfa8      	it	ge
 800164c:	4610      	movge	r0, r2
 800164e:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001650:	4282      	cmp	r2, r0
 8001652:	dc03      	bgt.n	800165c <middle_of_3Imax1+0x28>
         middle = (a <= c) ? a : c;
 8001654:	4298      	cmp	r0, r3
 8001656:	bfa8      	it	ge
 8001658:	4618      	movge	r0, r3
 800165a:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 800165c:	4293      	cmp	r3, r2
 800165e:	bfa8      	it	ge
 8001660:	4613      	movge	r3, r2
 8001662:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000720 	.word	0x20000720

0800166c <middle_of_3Imax2>:

int32_t middle_of_3Imax2(int32_t value)
{
   static int32_t InputValueI2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI2[2] = InputValueI2[1];
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <middle_of_3Imax2+0x34>)
 800166e:	684b      	ldr	r3, [r1, #4]
   InputValueI2[1] = InputValueI2[0];
 8001670:	680a      	ldr	r2, [r1, #0]
   InputValueI2[2] = InputValueI2[1];
 8001672:	608b      	str	r3, [r1, #8]
   InputValueI2[0] = value;
   a = InputValueI2[2];
   b = InputValueI2[1];
   c = InputValueI2[0];
   if ((a <= b) && (a <= c)){
 8001674:	4293      	cmp	r3, r2
   InputValueI2[0] = value;
 8001676:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 800167a:	dc05      	bgt.n	8001688 <middle_of_3Imax2+0x1c>
 800167c:	4283      	cmp	r3, r0
 800167e:	dc09      	bgt.n	8001694 <middle_of_3Imax2+0x28>
      middle = (b <= c) ? b : c;
 8001680:	4290      	cmp	r0, r2
 8001682:	bfa8      	it	ge
 8001684:	4610      	movge	r0, r2
 8001686:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001688:	4282      	cmp	r2, r0
 800168a:	dc03      	bgt.n	8001694 <middle_of_3Imax2+0x28>
         middle = (a <= c) ? a : c;
 800168c:	4298      	cmp	r0, r3
 800168e:	bfa8      	it	ge
 8001690:	4618      	movge	r0, r3
 8001692:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001694:	4293      	cmp	r3, r2
 8001696:	bfa8      	it	ge
 8001698:	4613      	movge	r3, r2
 800169a:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000072c 	.word	0x2000072c

080016a4 <middle_of_3Umax1>:

int32_t middle_of_3Umax1(int32_t value)
{
   static int32_t InputValueU1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU1[2] = InputValueU1[1];
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <middle_of_3Umax1+0x34>)
 80016a6:	684b      	ldr	r3, [r1, #4]
   InputValueU1[1] = InputValueU1[0];
 80016a8:	680a      	ldr	r2, [r1, #0]
   InputValueU1[2] = InputValueU1[1];
 80016aa:	608b      	str	r3, [r1, #8]
   InputValueU1[0] = value;
   a = InputValueU1[2];
   b = InputValueU1[1];
   c = InputValueU1[0];
   if ((a <= b) && (a <= c)){
 80016ac:	4293      	cmp	r3, r2
   InputValueU1[0] = value;
 80016ae:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 80016b2:	dc05      	bgt.n	80016c0 <middle_of_3Umax1+0x1c>
 80016b4:	4283      	cmp	r3, r0
 80016b6:	dc09      	bgt.n	80016cc <middle_of_3Umax1+0x28>
      middle = (b <= c) ? b : c;
 80016b8:	4290      	cmp	r0, r2
 80016ba:	bfa8      	it	ge
 80016bc:	4610      	movge	r0, r2
 80016be:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80016c0:	4282      	cmp	r2, r0
 80016c2:	dc03      	bgt.n	80016cc <middle_of_3Umax1+0x28>
         middle = (a <= c) ? a : c;
 80016c4:	4298      	cmp	r0, r3
 80016c6:	bfa8      	it	ge
 80016c8:	4618      	movge	r0, r3
 80016ca:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80016cc:	4293      	cmp	r3, r2
 80016ce:	bfa8      	it	ge
 80016d0:	4613      	movge	r3, r2
 80016d2:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000738 	.word	0x20000738

080016dc <middle_of_3Umax2>:

int32_t middle_of_3Umax2(int32_t value)
{
   static int32_t InputValueU2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU2[2] = InputValueU2[1];
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <middle_of_3Umax2+0x34>)
 80016de:	684b      	ldr	r3, [r1, #4]
   InputValueU2[1] = InputValueU2[0];
 80016e0:	680a      	ldr	r2, [r1, #0]
   InputValueU2[2] = InputValueU2[1];
 80016e2:	608b      	str	r3, [r1, #8]
   InputValueU2[0] = value;
   a = InputValueU2[2];
   b = InputValueU2[1];
   c = InputValueU2[0];
   if ((a <= b) && (a <= c)){
 80016e4:	4293      	cmp	r3, r2
   InputValueU2[0] = value;
 80016e6:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 80016ea:	dc05      	bgt.n	80016f8 <middle_of_3Umax2+0x1c>
 80016ec:	4283      	cmp	r3, r0
 80016ee:	dc09      	bgt.n	8001704 <middle_of_3Umax2+0x28>
      middle = (b <= c) ? b : c;
 80016f0:	4290      	cmp	r0, r2
 80016f2:	bfa8      	it	ge
 80016f4:	4610      	movge	r0, r2
 80016f6:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80016f8:	4282      	cmp	r2, r0
 80016fa:	dc03      	bgt.n	8001704 <middle_of_3Umax2+0x28>
         middle = (a <= c) ? a : c;
 80016fc:	4298      	cmp	r0, r3
 80016fe:	bfa8      	it	ge
 8001700:	4618      	movge	r0, r3
 8001702:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001704:	4293      	cmp	r3, r2
 8001706:	bfa8      	it	ge
 8001708:	4613      	movge	r3, r2
 800170a:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000744 	.word	0x20000744

08001714 <middle_of_3Umax3>:
int32_t middle_of_3Umax3(int32_t value)
{
   static int32_t InputValueU3[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU3[2] = InputValueU3[1];
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <middle_of_3Umax3+0x34>)
 8001716:	684b      	ldr	r3, [r1, #4]
   InputValueU3[1] = InputValueU3[0];
 8001718:	680a      	ldr	r2, [r1, #0]
   InputValueU3[2] = InputValueU3[1];
 800171a:	608b      	str	r3, [r1, #8]
   InputValueU3[0] = value;
   a = InputValueU3[2];
   b = InputValueU3[1];
   c = InputValueU3[0];
   if ((a <= b) && (a <= c)){
 800171c:	4293      	cmp	r3, r2
   InputValueU3[0] = value;
 800171e:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 8001722:	dc05      	bgt.n	8001730 <middle_of_3Umax3+0x1c>
 8001724:	4283      	cmp	r3, r0
 8001726:	dc09      	bgt.n	800173c <middle_of_3Umax3+0x28>
      middle = (b <= c) ? b : c;
 8001728:	4290      	cmp	r0, r2
 800172a:	bfa8      	it	ge
 800172c:	4610      	movge	r0, r2
 800172e:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001730:	4282      	cmp	r2, r0
 8001732:	dc03      	bgt.n	800173c <middle_of_3Umax3+0x28>
         middle = (a <= c) ? a : c;
 8001734:	4298      	cmp	r0, r3
 8001736:	bfa8      	it	ge
 8001738:	4618      	movge	r0, r3
 800173a:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 800173c:	4293      	cmp	r3, r2
 800173e:	bfa8      	it	ge
 8001740:	4613      	movge	r3, r2
 8001742:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000750 	.word	0x20000750

0800174c <RunningAverageI1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
	return filteredlValueI1/10;
}
 800174c:	4770      	bx	lr

0800174e <RunningAverageI2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
	return filteredlValueI2/10;
}
 800174e:	4770      	bx	lr

08001750 <RunningAverageU1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
	return filteredlValueU1/10;
}
 8001750:	4770      	bx	lr

08001752 <RunningAverageU2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU2 = 0;
	filteredlValueU2 += (newValue - filteredlValueU2) * k;
	return filteredlValueU2/10;
}
 8001752:	4770      	bx	lr

08001754 <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
 return CurrentMenuItem;
}
 8001754:	4b01      	ldr	r3, [pc, #4]	; (800175c <Menu_GetCurrentMenu+0x8>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000024c 	.word	0x2000024c

08001760 <Menu_Navigate>:

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <Menu_Navigate+0x28>)
{
 8001762:	b510      	push	{r4, lr}
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001764:	4298      	cmp	r0, r3
 8001766:	d00d      	beq.n	8001784 <Menu_Navigate+0x24>
 8001768:	b160      	cbz	r0, 8001784 <Menu_Navigate+0x24>
  return;

 CurrentMenuItem = NewMenu;

 if (MenuWriteFunc)
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <Menu_Navigate+0x2c>)
 CurrentMenuItem = NewMenu;
 800176c:	4c08      	ldr	r4, [pc, #32]	; (8001790 <Menu_Navigate+0x30>)
 if (MenuWriteFunc)
 800176e:	6812      	ldr	r2, [r2, #0]
 CurrentMenuItem = NewMenu;
 8001770:	6020      	str	r0, [r4, #0]
 if (MenuWriteFunc)
 8001772:	b10a      	cbz	r2, 8001778 <Menu_Navigate+0x18>
  MenuWriteFunc(CurrentMenuItem->Text);
 8001774:	3018      	adds	r0, #24
 8001776:	4790      	blx	r2

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	691b      	ldr	r3, [r3, #16]

 if (EnterCallback)
 800177c:	b113      	cbz	r3, 8001784 <Menu_Navigate+0x24>
  EnterCallback();
}
 800177e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EnterCallback();
 8001782:	4718      	bx	r3
}
 8001784:	bd10      	pop	{r4, pc}
 8001786:	bf00      	nop
 8001788:	08006024 	.word	0x08006024
 800178c:	20000780 	.word	0x20000780
 8001790:	2000024c 	.word	0x2000024c

08001794 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)( char* Text))
{
 MenuWriteFunc = WriteFunc;
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <Menu_SetGenericWriteCallback+0xc>)
 8001796:	6018      	str	r0, [r3, #0]
 Menu_Navigate(CurrentMenuItem);
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <Menu_SetGenericWriteCallback+0x10>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f7ff bfe0 	b.w	8001760 <Menu_Navigate>
 80017a0:	20000780 	.word	0x20000780
 80017a4:	2000024c 	.word	0x2000024c

080017a8 <Menu_SelectItem>:
}

void Menu_SelectItem(Key_Pressed_t key)
{
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <Menu_SelectItem+0x14>)
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <Menu_SelectItem+0x18>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d003      	beq.n	80017ba <Menu_SelectItem+0x12>
 80017b2:	b113      	cbz	r3, 80017ba <Menu_SelectItem+0x12>
  return;

 void (*SelectCallback)(Key_Pressed_t) = CurrentMenuItem->SelectCallback;
 80017b4:	695b      	ldr	r3, [r3, #20]

 if (SelectCallback)
 80017b6:	b103      	cbz	r3, 80017ba <Menu_SelectItem+0x12>
  SelectCallback(key);
 80017b8:	4718      	bx	r3
}
 80017ba:	4770      	bx	lr
 80017bc:	2000024c 	.word	0x2000024c
 80017c0:	08006024 	.word	0x08006024

080017c4 <strobe>:
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void strobe(void)
{
	LCD_PORT->BSRR=LCD_EN_BS;
 80017c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
{
 80017c8:	b510      	push	{r4, lr}
	LCD_PORT->BSRR=LCD_EN_BS;
 80017ca:	4c06      	ldr	r4, [pc, #24]	; (80017e4 <strobe+0x20>)
	delay_us(2);
 80017cc:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BS;
 80017ce:	6123      	str	r3, [r4, #16]
	delay_us(2);
 80017d0:	f7ff fbf6 	bl	8000fc0 <delay_us>
	LCD_PORT->BSRR=LCD_EN_BC;
 80017d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	delay_us(2);
 80017d8:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BC;
 80017da:	6123      	str	r3, [r4, #16]
}
 80017dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(2);
 80017e0:	f7ff bbee 	b.w	8000fc0 <delay_us>
 80017e4:	40010c00 	.word	0x40010c00

080017e8 <lcd_set_4bit_mode>:
			}
		}
	}
}

void lcd_set_4bit_mode(void) {
 80017e8:	b570      	push	{r4, r5, r6, lr}


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80017ea:	f04f 457c 	mov.w	r5, #4227858432	; 0xfc000000
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80017ee:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80017f2:	4c0d      	ldr	r4, [pc, #52]	; (8001828 <lcd_set_4bit_mode+0x40>)
 80017f4:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80017f6:	6126      	str	r6, [r4, #16]

	//LCD_PORT->BSRR=LCD_EN_BS;
	//delay_ms(1);
	//LCD_PORT->BSRR=LCD_EN_BC;

	strobe();
 80017f8:	f7ff ffe4 	bl	80017c4 <strobe>
	delay_ms(1);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff fc17 	bl	8001030 <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001802:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 8001804:	6126      	str	r6, [r4, #16]

	strobe();
 8001806:	f7ff ffdd 	bl	80017c4 <strobe>
	delay_ms(1);
 800180a:	2001      	movs	r0, #1
 800180c:	f7ff fc10 	bl	8001030 <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
	LCD_PORT->BSRR=(LCD_DB7_BS);
 8001810:	f44f 6380 	mov.w	r3, #1024	; 0x400
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001814:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB7_BS);
 8001816:	6123      	str	r3, [r4, #16]

	strobe();
 8001818:	f7ff ffd4 	bl	80017c4 <strobe>
	delay_ms(1);

}
 800181c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(1);
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff bc05 	b.w	8001030 <delay_ms>
 8001826:	bf00      	nop
 8001828:	40010c00 	.word	0x40010c00

0800182c <lcd_send>:

void lcd_send(uint8_t byte, dat_or_comm dc)  {

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 800182c:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <lcd_send+0x98>)
void lcd_send(uint8_t byte, dat_or_comm dc)  {
 8001832:	b570      	push	{r4, r5, r6, lr}
 8001834:	4604      	mov	r4, r0

	if (dc) {
 8001836:	460d      	mov	r5, r1
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001838:	611a      	str	r2, [r3, #16]
	if (dc) {
 800183a:	b111      	cbz	r1, 8001842 <lcd_send+0x16>
		LCD_PORT->BSRR=LCD_CD_BS;
 800183c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001840:	611a      	str	r2, [r3, #16]
	}

	if (byte & 0x10) {
 8001842:	06e2      	lsls	r2, r4, #27
		LCD_PORT->BSRR=LCD_DB4_BS;
 8001844:	bf44      	itt	mi
 8001846:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 800184a:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x20) {
 800184c:	f014 0f20 	tst.w	r4, #32
		LCD_PORT->BSRR=LCD_DB5_BS;
 8001850:	bf18      	it	ne
 8001852:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <lcd_send+0x98>)
 8001858:	bf18      	it	ne
 800185a:	611a      	strne	r2, [r3, #16]
	}
	if (byte & 0x40) {
 800185c:	0666      	lsls	r6, r4, #25
		LCD_PORT->BSRR=LCD_DB6_BS;
 800185e:	bf44      	itt	mi
 8001860:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 8001864:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x80) {
 8001866:	f014 0f80 	tst.w	r4, #128	; 0x80
		LCD_PORT->BSRR=LCD_DB7_BS;
 800186a:	bf18      	it	ne
 800186c:	f44f 6380 	movne.w	r3, #1024	; 0x400
 8001870:	4e14      	ldr	r6, [pc, #80]	; (80018c4 <lcd_send+0x98>)
 8001872:	bf18      	it	ne
 8001874:	6133      	strne	r3, [r6, #16]
	}

	strobe();
 8001876:	f7ff ffa5 	bl	80017c4 <strobe>


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 800187a:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000

	if (byte & 0x01) {
 800187e:	07e0      	lsls	r0, r4, #31
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8001880:	6133      	str	r3, [r6, #16]
		LCD_PORT->BSRR=LCD_DB4_BS;
 8001882:	bf44      	itt	mi
 8001884:	f44f 5300 	movmi.w	r3, #8192	; 0x2000
 8001888:	6133      	strmi	r3, [r6, #16]
	}
	if (byte & 0x02) {
 800188a:	07a1      	lsls	r1, r4, #30
		LCD_PORT->BSRR=LCD_DB5_BS;
 800188c:	bf42      	ittt	mi
 800188e:	f44f 5280 	movmi.w	r2, #4096	; 0x1000
 8001892:	4b0c      	ldrmi	r3, [pc, #48]	; (80018c4 <lcd_send+0x98>)
 8001894:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x04) {
 8001896:	0762      	lsls	r2, r4, #29
		LCD_PORT->BSRR=LCD_DB6_BS;
 8001898:	bf42      	ittt	mi
 800189a:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 800189e:	4b09      	ldrmi	r3, [pc, #36]	; (80018c4 <lcd_send+0x98>)
 80018a0:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x08) {
 80018a2:	0723      	lsls	r3, r4, #28
		LCD_PORT->BSRR=LCD_DB7_BS;
 80018a4:	bf42      	ittt	mi
 80018a6:	f44f 6280 	movmi.w	r2, #1024	; 0x400
 80018aa:	4b06      	ldrmi	r3, [pc, #24]	; (80018c4 <lcd_send+0x98>)
 80018ac:	611a      	strmi	r2, [r3, #16]
	}



	strobe();
 80018ae:	f7ff ff89 	bl	80017c4 <strobe>
	delay_ms(2);
 80018b2:	2002      	movs	r0, #2
 80018b4:	f7ff fbbc 	bl	8001030 <delay_ms>
	if (dc) {
 80018b8:	b11d      	cbz	r5, 80018c2 <lcd_send+0x96>
			LCD_PORT->BSRR=LCD_CD_BC;
 80018ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018be:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <lcd_send+0x98>)
 80018c0:	611a      	str	r2, [r3, #16]
		}

}
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
 80018c4:	40010c00 	.word	0x40010c00

080018c8 <lcd_set_user_char>:
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80018c8:	00c0      	lsls	r0, r0, #3
 80018ca:	f040 0040 	orr.w	r0, r0, #64	; 0x40
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 80018ce:	b538      	push	{r3, r4, r5, lr}
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80018d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 80018d4:	460c      	mov	r4, r1
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80018d6:	2100      	movs	r1, #0
 80018d8:	f7ff ffa8 	bl	800182c <lcd_send>
	for (i=0;i<=7;i++) {
 80018dc:	1e65      	subs	r5, r4, #1
 80018de:	3407      	adds	r4, #7
		lcd_send(char_data[i],DATA);
 80018e0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80018e4:	2101      	movs	r1, #1
 80018e6:	f7ff ffa1 	bl	800182c <lcd_send>
	for (i=0;i<=7;i++) {
 80018ea:	42a5      	cmp	r5, r4
 80018ec:	d1f8      	bne.n	80018e0 <lcd_set_user_char+0x18>
}
 80018ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send((1<<7), COMMAND);
 80018f2:	2100      	movs	r1, #0
 80018f4:	2080      	movs	r0, #128	; 0x80
 80018f6:	f7ff bf99 	b.w	800182c <lcd_send>
	...

080018fc <SetSymbols>:
{
 80018fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sym[4]=0b00000;
 80018fe:	4c1f      	ldr	r4, [pc, #124]	; (800197c <SetSymbols+0x80>)
 8001900:	4d1f      	ldr	r5, [pc, #124]	; (8001980 <SetSymbols+0x84>)
	lcd_set_user_char(0,sym);//charge
 8001902:	4669      	mov	r1, sp
 8001904:	2000      	movs	r0, #0
	sym[4]=0b00000;
 8001906:	e9cd 4500 	strd	r4, r5, [sp]
	sym[4]=0b00000;
 800190a:	4e1e      	ldr	r6, [pc, #120]	; (8001984 <SetSymbols+0x88>)
	lcd_set_user_char(0,sym);//charge
 800190c:	f7ff ffdc 	bl	80018c8 <lcd_set_user_char>
	sym[4]=0b00000;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <SetSymbols+0x8c>)
	lcd_set_user_char(1,sym);//charge
 8001912:	4669      	mov	r1, sp
 8001914:	2001      	movs	r0, #1
	sym[4]=0b00000;
 8001916:	e9cd 3600 	strd	r3, r6, [sp]
	lcd_set_user_char(1,sym);//charge
 800191a:	f7ff ffd5 	bl	80018c8 <lcd_set_user_char>
	sym[0]=0b00000;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <SetSymbols+0x90>)
	lcd_set_user_char(2,sym);//discharge
 8001920:	4669      	mov	r1, sp
	sym[4]=0b00000;
 8001922:	e9cd 3500 	strd	r3, r5, [sp]
	lcd_set_user_char(2,sym);//discharge
 8001926:	2002      	movs	r0, #2
	sym[0]=0b00100;
 8001928:	4d19      	ldr	r5, [pc, #100]	; (8001990 <SetSymbols+0x94>)
	lcd_set_user_char(2,sym);//discharge
 800192a:	f7ff ffcd 	bl	80018c8 <lcd_set_user_char>
	lcd_set_user_char(3,sym);//discharge
 800192e:	4669      	mov	r1, sp
 8001930:	2003      	movs	r0, #3
	sym[4]=0b00000;
 8001932:	e9cd 5600 	strd	r5, r6, [sp]
	lcd_set_user_char(3,sym);//discharge
 8001936:	f7ff ffc7 	bl	80018c8 <lcd_set_user_char>
	lcd_set_user_char(4,sym);//training
 800193a:	4669      	mov	r1, sp
 800193c:	2004      	movs	r0, #4
	sym[4]=0b00100;
 800193e:	e9cd 5400 	strd	r5, r4, [sp]
	lcd_set_user_char(4,sym);//training
 8001942:	f7ff ffc1 	bl	80018c8 <lcd_set_user_char>
	sym[4]=0b01010;
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <SetSymbols+0x98>)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <SetSymbols+0x9c>)
	lcd_set_user_char(5,sym);//swing
 800194a:	4669      	mov	r1, sp
 800194c:	2005      	movs	r0, #5
	sym[4]=0b01010;
 800194e:	e9cd 2300 	strd	r2, r3, [sp]
	lcd_set_user_char(5,sym);//swing
 8001952:	f7ff ffb9 	bl	80018c8 <lcd_set_user_char>
	sym[4]=0b00101;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <SetSymbols+0xa0>)
 8001958:	4911      	ldr	r1, [pc, #68]	; (80019a0 <SetSymbols+0xa4>)
	lcd_set_user_char(6,sym);//Л
 800195a:	2006      	movs	r0, #6
	sym[4]=0b00101;
 800195c:	e9cd 1300 	strd	r1, r3, [sp]
	lcd_set_user_char(6,sym);//Л
 8001960:	4669      	mov	r1, sp
 8001962:	f7ff ffb1 	bl	80018c8 <lcd_set_user_char>
	sym[4]=0b00001;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <SetSymbols+0xa8>)
 8001968:	480f      	ldr	r0, [pc, #60]	; (80019a8 <SetSymbols+0xac>)
	lcd_set_user_char(7,sym);//Ч
 800196a:	4669      	mov	r1, sp
	sym[4]=0b00001;
 800196c:	e9cd 0300 	strd	r0, r3, [sp]
	lcd_set_user_char(7,sym);//Ч
 8001970:	2007      	movs	r0, #7
 8001972:	f7ff ffa9 	bl	80018c8 <lcd_set_user_char>
}
 8001976:	b002      	add	sp, #8
 8001978:	bd70      	pop	{r4, r5, r6, pc}
 800197a:	bf00      	nop
 800197c:	040e1504 	.word	0x040e1504
 8001980:	1f1f0400 	.word	0x1f1f0400
 8001984:	1f040000 	.word	0x1f040000
 8001988:	00040e15 	.word	0x00040e15
 800198c:	150e0400 	.word	0x150e0400
 8001990:	04150e04 	.word	0x04150e04
 8001994:	0a070702 	.word	0x0a070702
 8001998:	081c1c0a 	.word	0x081c1c0a
 800199c:	00091505 	.word	0x00091505
 80019a0:	0505050f 	.word	0x0505050f
 80019a4:	00010101 	.word	0x00010101
 80019a8:	1f111111 	.word	0x1f111111

080019ac <lcd_set_xy>:
	pos_x = x;
 80019ac:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <lcd_set_xy+0x1c>)
 80019ae:	7010      	strb	r0, [r2, #0]
	pos_y = y;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <lcd_set_xy+0x20>)
 80019b2:	7011      	strb	r1, [r2, #0]
	if (y==0) {
 80019b4:	b919      	cbnz	r1, 80019be <lcd_set_xy+0x12>
		lcd_send( ((1<<7) | (x)),COMMAND);
 80019b6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		lcd_send( ((3<<6) | (x)),COMMAND);
 80019ba:	f7ff bf37 	b.w	800182c <lcd_send>
 80019be:	2100      	movs	r1, #0
 80019c0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80019c4:	e7f9      	b.n	80019ba <lcd_set_xy+0xe>
 80019c6:	bf00      	nop
 80019c8:	20000784 	.word	0x20000784
 80019cc:	20000785 	.word	0x20000785

080019d0 <lcd_out>:
void lcd_out(char * txt,uint8_t TypeOfLCD) {
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	4605      	mov	r5, r0
 80019d4:	460e      	mov	r6, r1
	while(*txt)
 80019d6:	4604      	mov	r4, r0
 80019d8:	7820      	ldrb	r0, [r4, #0]
 80019da:	b900      	cbnz	r0, 80019de <lcd_out+0xe>
}
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
		lcd_send(*txt,DATA);
 80019de:	2101      	movs	r1, #1
 80019e0:	f7ff ff24 	bl	800182c <lcd_send>
		if ((TypeOfLCD ==1)&&(i==7) )
 80019e4:	2e01      	cmp	r6, #1
 80019e6:	d107      	bne.n	80019f8 <lcd_out+0x28>
 80019e8:	1b63      	subs	r3, r4, r5
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d103      	bne.n	80019f8 <lcd_out+0x28>
			lcd_set_xy(0,1);
 80019f0:	4631      	mov	r1, r6
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff ffda 	bl	80019ac <lcd_set_xy>
		txt++;
 80019f8:	3401      	adds	r4, #1
		i++;
 80019fa:	e7ed      	b.n	80019d8 <lcd_out+0x8>

080019fc <LcdOutbyNumber>:
	lcd_send(num,DATA);
 80019fc:	2101      	movs	r1, #1
 80019fe:	b2c0      	uxtb	r0, r0
 8001a00:	f7ff bf14 	b.w	800182c <lcd_send>

08001a04 <LcdOut>:
{
 8001a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a08:	460d      	mov	r5, r1
			lcd_send(russ[*txt-192],DATA);
 8001a0a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001a84 <LcdOut+0x80>
		pos_x++;
 8001a0e:	4e1b      	ldr	r6, [pc, #108]	; (8001a7c <LcdOut+0x78>)
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001a10:	4f1b      	ldr	r7, [pc, #108]	; (8001a80 <LcdOut+0x7c>)
 8001a12:	1e44      	subs	r4, r0, #1
	while(*txt)
 8001a14:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001a18:	b908      	cbnz	r0, 8001a1e <LcdOut+0x1a>
}
 8001a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(*txt==178)//І
 8001a1e:	28b2      	cmp	r0, #178	; 0xb2
 8001a20:	d119      	bne.n	8001a56 <LcdOut+0x52>
			lcd_send(73,DATA);
 8001a22:	2101      	movs	r1, #1
 8001a24:	2049      	movs	r0, #73	; 0x49
			lcd_send(russ[*txt-192],DATA);
 8001a26:	f7ff ff01 	bl	800182c <lcd_send>
		pos_x++;
 8001a2a:	7833      	ldrb	r3, [r6, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001a2c:	f897 9000 	ldrb.w	r9, [r7]
		pos_x++;
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	7033      	strb	r3, [r6, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001a36:	f1b9 0f00 	cmp.w	r9, #0
 8001a3a:	d1eb      	bne.n	8001a14 <LcdOut+0x10>
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d1e9      	bne.n	8001a14 <LcdOut+0x10>
 8001a40:	2d02      	cmp	r5, #2
 8001a42:	d1e7      	bne.n	8001a14 <LcdOut+0x10>
			lcd_set_xy(0,1);
 8001a44:	2101      	movs	r1, #1
 8001a46:	4648      	mov	r0, r9
 8001a48:	f7ff ffb0 	bl	80019ac <lcd_set_xy>
			pos_y = 1;
 8001a4c:	2301      	movs	r3, #1
			pos_x = 0;
 8001a4e:	f886 9000 	strb.w	r9, [r6]
			pos_y = 1;
 8001a52:	703b      	strb	r3, [r7, #0]
 8001a54:	e7de      	b.n	8001a14 <LcdOut+0x10>
		}else if(*txt==175)//Ї
 8001a56:	28af      	cmp	r0, #175	; 0xaf
 8001a58:	d102      	bne.n	8001a60 <LcdOut+0x5c>
			lcd_send(3,DATA);
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	e7e2      	b.n	8001a26 <LcdOut+0x22>
		}else if(*txt==170)//Є
 8001a60:	28aa      	cmp	r0, #170	; 0xaa
 8001a62:	d102      	bne.n	8001a6a <LcdOut+0x66>
			lcd_send(2,DATA);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2002      	movs	r0, #2
 8001a68:	e7dd      	b.n	8001a26 <LcdOut+0x22>
		}else if(*txt<192)
 8001a6a:	28bf      	cmp	r0, #191	; 0xbf
			lcd_send(russ[*txt-192],DATA);
 8001a6c:	bf89      	itett	hi
 8001a6e:	4440      	addhi	r0, r8
			lcd_send(*txt,DATA);
 8001a70:	2101      	movls	r1, #1
			lcd_send(russ[*txt-192],DATA);
 8001a72:	2101      	movhi	r1, #1
 8001a74:	f810 0cc0 	ldrbhi.w	r0, [r0, #-192]
 8001a78:	e7d5      	b.n	8001a26 <LcdOut+0x22>
 8001a7a:	bf00      	nop
 8001a7c:	20000784 	.word	0x20000784
 8001a80:	20000785 	.word	0x20000785
 8001a84:	20000250 	.word	0x20000250

08001a88 <lcd_clear>:
	lcd_send(0x01,COMMAND);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff bece 	b.w	800182c <lcd_send>

08001a90 <lcd_init>:
void lcd_init() {
 8001a90:	b508      	push	{r3, lr}
	delay_ms(100);
 8001a92:	2064      	movs	r0, #100	; 0x64
 8001a94:	f7ff facc 	bl	8001030 <delay_ms>
	lcd_set_4bit_mode();
 8001a98:	f7ff fea6 	bl	80017e8 <lcd_set_4bit_mode>
				lcd_send(0x0E,COMMAND);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	200e      	movs	r0, #14
 8001aa0:	f7ff fec4 	bl	800182c <lcd_send>
}
 8001aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_clear();
 8001aa8:	f7ff bfee 	b.w	8001a88 <lcd_clear>

08001aac <PrintToLCD>:


void PrintToLCD(char* str )
{
	LcdOut(str,2);
 8001aac:	2102      	movs	r1, #2
 8001aae:	f7ff bfa9 	b.w	8001a04 <LcdOut>

08001ab2 <PrintToLCD_xy>:
	//Send_String_to_UART(str);
}

void PrintToLCD_xy(char* str ,uint8_t x, uint8_t y)
{
 8001ab2:	b510      	push	{r4, lr}
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	4608      	mov	r0, r1
	lcd_set_xy(x,y);
 8001ab8:	4611      	mov	r1, r2
 8001aba:	f7ff ff77 	bl	80019ac <lcd_set_xy>

	LcdOut(str,2);
 8001abe:	4620      	mov	r0, r4
	//Send_String_to_UART(str);
}
 8001ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LcdOut(str,2);
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	f7ff bf9d 	b.w	8001a04 <LcdOut>

08001aca <InitLCD>:

{
	PrintToLCD(itoa_koma(x,k));
}
void InitLCD()
{
 8001aca:	b508      	push	{r3, lr}



	lcd_init();
 8001acc:	f7ff ffe0 	bl	8001a90 <lcd_init>
	lcd_clear();
 8001ad0:	f7ff ffda 	bl	8001a88 <lcd_clear>
	lcd_set_state(LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
}
 8001ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				lcd_send(0x0C,COMMAND);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	200c      	movs	r0, #12
 8001adc:	f7ff bea6 	b.w	800182c <lcd_send>

08001ae0 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <LL_APB2_GRP1_EnableClock+0x18>)
{
 8001ae2:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	4302      	orrs	r2, r0
 8001ae8:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4018      	ands	r0, r3
 8001aee:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001af0:	9b01      	ldr	r3, [sp, #4]
}
 8001af2:	b002      	add	sp, #8
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <MenuLog_Enter>:
			ClockOnLCD_noSec(DischargeTimeSec);
		}
}
void MenuLog_Enter()
{
	i_LogItems = 0;
 8001afc:	2200      	movs	r2, #0
 8001afe:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <MenuLog_Enter+0x8>)
 8001b00:	801a      	strh	r2, [r3, #0]
}
 8001b02:	4770      	bx	lr
 8001b04:	200007f2 	.word	0x200007f2

08001b08 <MenuCalibrationWriteToFlash_Enter>:
			break;
	}
}

void MenuCalibrationWriteToFlash_Enter(Key_Pressed_t key)
{
 8001b08:	b508      	push	{r3, lr}
	CalibrationWriteToFlash_CRC();
 8001b0a:	f7fe ff29 	bl	8000960 <CalibrationWriteToFlash_CRC>
	WriteInLOG("Calibration");
}
 8001b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	WriteInLOG("Calibration");
 8001b12:	4801      	ldr	r0, [pc, #4]	; (8001b18 <MenuCalibrationWriteToFlash_Enter+0x10>)
 8001b14:	f7ff b8c6 	b.w	8000ca4 <WriteInLOG>
 8001b18:	0800603c 	.word	0x0800603c

08001b1c <MenuSettingsBatteryType_Enter>:
{
 8001b1c:	b510      	push	{r4, lr}
	if(CountShowBT == 0)
 8001b1e:	4c3b      	ldr	r4, [pc, #236]	; (8001c0c <MenuSettingsBatteryType_Enter+0xf0>)
 8001b20:	f994 1000 	ldrsb.w	r1, [r4]
 8001b24:	b961      	cbnz	r1, 8001b40 <MenuSettingsBatteryType_Enter+0x24>
		lcd_set_xy(0,0);
 8001b26:	4608      	mov	r0, r1
 8001b28:	f7ff ff40 	bl	80019ac <lcd_set_xy>
		PrintToLCD(" 10.8V  14.6V   ");
 8001b2c:	4838      	ldr	r0, [pc, #224]	; (8001c10 <MenuSettingsBatteryType_Enter+0xf4>)
 8001b2e:	f7ff ffbd 	bl	8001aac <PrintToLCD>
		SettingsData.LowVoltage = 1080;
 8001b32:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <MenuSettingsBatteryType_Enter+0xf8>)
 8001b38:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1460;
 8001b3a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001b3e:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 1)
 8001b40:	f994 3000 	ldrsb.w	r3, [r4]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10d      	bne.n	8001b64 <MenuSettingsBatteryType_Enter+0x48>
		lcd_set_xy(0,0);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4608      	mov	r0, r1
 8001b4c:	f7ff ff2e 	bl	80019ac <lcd_set_xy>
		PrintToLCD("  3.0V   4.2V   ");
 8001b50:	4831      	ldr	r0, [pc, #196]	; (8001c18 <MenuSettingsBatteryType_Enter+0xfc>)
 8001b52:	f7ff ffab 	bl	8001aac <PrintToLCD>
		SettingsData.LowVoltage = 300;
 8001b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <MenuSettingsBatteryType_Enter+0xf8>)
 8001b5c:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 420;
 8001b5e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001b62:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 2)
 8001b64:	f994 3000 	ldrsb.w	r3, [r4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d10d      	bne.n	8001b88 <MenuSettingsBatteryType_Enter+0x6c>
		lcd_set_xy(0,0);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4608      	mov	r0, r1
 8001b70:	f7ff ff1c 	bl	80019ac <lcd_set_xy>
		PrintToLCD("  2.8V   3.7V   ");
 8001b74:	4829      	ldr	r0, [pc, #164]	; (8001c1c <MenuSettingsBatteryType_Enter+0x100>)
 8001b76:	f7ff ff99 	bl	8001aac <PrintToLCD>
		SettingsData.LowVoltage = 280;
 8001b7a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <MenuSettingsBatteryType_Enter+0xf8>)
 8001b80:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 370;
 8001b82:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001b86:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 3)
 8001b88:	f994 3000 	ldrsb.w	r3, [r4]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d10c      	bne.n	8001baa <MenuSettingsBatteryType_Enter+0x8e>
		lcd_set_xy(0,0);
 8001b90:	2100      	movs	r1, #0
 8001b92:	4608      	mov	r0, r1
 8001b94:	f7ff ff0a 	bl	80019ac <lcd_set_xy>
		PrintToLCD("  1.6V   2.8V   ");
 8001b98:	4821      	ldr	r0, [pc, #132]	; (8001c20 <MenuSettingsBatteryType_Enter+0x104>)
 8001b9a:	f7ff ff87 	bl	8001aac <PrintToLCD>
		SettingsData.LowVoltage = 160;
 8001b9e:	22a0      	movs	r2, #160	; 0xa0
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <MenuSettingsBatteryType_Enter+0xf8>)
 8001ba2:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 280;
 8001ba4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ba8:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 4)
 8001baa:	f994 3000 	ldrsb.w	r3, [r4]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d10d      	bne.n	8001bce <MenuSettingsBatteryType_Enter+0xb2>
		lcd_set_xy(0,0);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	f7ff fef9 	bl	80019ac <lcd_set_xy>
		PrintToLCD("   8V  13.6V    ");
 8001bba:	481a      	ldr	r0, [pc, #104]	; (8001c24 <MenuSettingsBatteryType_Enter+0x108>)
 8001bbc:	f7ff ff76 	bl	8001aac <PrintToLCD>
		SettingsData.LowVoltage = 800;
 8001bc0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MenuSettingsBatteryType_Enter+0xf8>)
 8001bc6:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1360;
 8001bc8:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8001bcc:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 5)
 8001bce:	f994 3000 	ldrsb.w	r3, [r4]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d10c      	bne.n	8001bf0 <MenuSettingsBatteryType_Enter+0xd4>
		lcd_set_xy(0,0);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4608      	mov	r0, r1
 8001bda:	f7ff fee7 	bl	80019ac <lcd_set_xy>
		PrintToLCD("  1V    20V     ");
 8001bde:	4812      	ldr	r0, [pc, #72]	; (8001c28 <MenuSettingsBatteryType_Enter+0x10c>)
 8001be0:	f7ff ff64 	bl	8001aac <PrintToLCD>
		SettingsData.LowVoltage = 100;
 8001be4:	2264      	movs	r2, #100	; 0x64
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MenuSettingsBatteryType_Enter+0xf8>)
 8001be8:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 2000;
 8001bea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bee:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 6)
 8001bf0:	f994 3000 	ldrsb.w	r3, [r4]
 8001bf4:	2b06      	cmp	r3, #6
		CountShowBT = 0;
 8001bf6:	bf04      	itt	eq
 8001bf8:	2300      	moveq	r3, #0
 8001bfa:	7023      	strbeq	r3, [r4, #0]
	SettingsWriteToFlash_CRC();
 8001bfc:	f7fe fee6 	bl	80009cc <SettingsWriteToFlash_CRC>
}
 8001c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(600);
 8001c04:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001c08:	f7ff ba12 	b.w	8001030 <delay_ms>
 8001c0c:	2000079f 	.word	0x2000079f
 8001c10:	08006048 	.word	0x08006048
 8001c14:	20000154 	.word	0x20000154
 8001c18:	08006059 	.word	0x08006059
 8001c1c:	0800606a 	.word	0x0800606a
 8001c20:	0800607b 	.word	0x0800607b
 8001c24:	0800608c 	.word	0x0800608c
 8001c28:	0800609d 	.word	0x0800609d

08001c2c <MenuSettingsWriteToFlash_Enter>:

void MenuSettingsWriteToFlash_Enter(Key_Pressed_t key)
{
	SettingsWriteToFlash_CRC();
 8001c2c:	f7fe bece 	b.w	80009cc <SettingsWriteToFlash_CRC>

08001c30 <MenuOption_Enter>:
	}

}

void MenuOption_Enter(Key_Pressed_t key)
{
 8001c30:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2007      	movs	r0, #7
 8001c36:	f7ff feb9 	bl	80019ac <lcd_set_xy>
	lcd_send(255,DATA);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	20ff      	movs	r0, #255	; 0xff
 8001c3e:	f7ff fdf5 	bl	800182c <lcd_send>
	SettingsWriteToFlash_CRC();
 8001c42:	f7fe fec3 	bl	80009cc <SettingsWriteToFlash_CRC>
	SelectedOptionValue = SettingsData.Option1;
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <MenuOption_Enter+0x28>)
	delay_ms(200);
 8001c48:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue = SettingsData.Option1;
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <MenuOption_Enter+0x2c>)
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001c54:	f7ff b9ec 	b.w	8001030 <delay_ms>
 8001c58:	20000154 	.word	0x20000154
 8001c5c:	20000a2c 	.word	0x20000a2c

08001c60 <MenuOption_Enter1>:

void MenuOption_Enter1(Key_Pressed_t key)
{
 8001c60:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001c62:	2101      	movs	r1, #1
 8001c64:	2007      	movs	r0, #7
 8001c66:	f7ff fea1 	bl	80019ac <lcd_set_xy>
	lcd_send(255,DATA);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	20ff      	movs	r0, #255	; 0xff
 8001c6e:	f7ff fddd 	bl	800182c <lcd_send>
	SettingsWriteToFlash_CRC();
 8001c72:	f7fe feab 	bl	80009cc <SettingsWriteToFlash_CRC>
	SelectedOptionValue1 = SettingsData.Option2;
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <MenuOption_Enter1+0x28>)
	delay_ms(200);
 8001c78:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue1 = SettingsData.Option2;
 8001c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <MenuOption_Enter1+0x2c>)
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001c84:	f7ff b9d4 	b.w	8001030 <delay_ms>
 8001c88:	20000154 	.word	0x20000154
 8001c8c:	20000a24 	.word	0x20000a24

08001c90 <Generic_Write>:
	if (Text) PrintToLCD_xy(Text,0,0);
 8001c90:	b118      	cbz	r0, 8001c9a <Generic_Write+0xa>
 8001c92:	2200      	movs	r2, #0
 8001c94:	4611      	mov	r1, r2
 8001c96:	f7ff bf0c 	b.w	8001ab2 <PrintToLCD_xy>
}
 8001c9a:	4770      	bx	lr

08001c9c <MenuDischarge_Enter>:
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001c9c:	f649 23af 	movw	r3, #39599	; 0x9aaf
{
 8001ca0:	b510      	push	{r4, lr}
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001ca2:	4c0e      	ldr	r4, [pc, #56]	; (8001cdc <MenuDischarge_Enter+0x40>)
{
 8001ca4:	b090      	sub	sp, #64	; 0x40
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d915      	bls.n	8001cd8 <MenuDischarge_Enter+0x3c>
		ClockStringNoSec(DischargeTimeSec,s_clock);
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MenuDischarge_Enter+0x44>)
 8001cae:	a90b      	add	r1, sp, #44	; 0x2c
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	f7ff fc73 	bl	800159c <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8001cb6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001cba:	6820      	ldr	r0, [r4, #0]
 8001cbc:	a901      	add	r1, sp, #4
 8001cbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc2:	f7ff fb0d 	bl	80012e0 <itoaP>
 8001cc6:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <MenuDischarge_Enter+0x48>)
 8001cc8:	ab06      	add	r3, sp, #24
 8001cca:	aa0b      	add	r2, sp, #44	; 0x2c
 8001ccc:	f7ff fbd0 	bl	8001470 <Merge3Strings>
		WriteInLOGc(strout,DISCHARGE_l);
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	a806      	add	r0, sp, #24
 8001cd4:	f7ff f8ac 	bl	8000e30 <WriteInLOGc>
}
 8001cd8:	b010      	add	sp, #64	; 0x40
 8001cda:	bd10      	pop	{r4, pc}
 8001cdc:	2000078c 	.word	0x2000078c
 8001ce0:	200007a8 	.word	0x200007a8
 8001ce4:	080060ae 	.word	0x080060ae

08001ce8 <MenuCharge_Enter>:
{
 8001ce8:	b510      	push	{r4, lr}
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001cea:	4c16      	ldr	r4, [pc, #88]	; (8001d44 <MenuCharge_Enter+0x5c>)
 8001cec:	4816      	ldr	r0, [pc, #88]	; (8001d48 <MenuCharge_Enter+0x60>)
{
 8001cee:	b090      	sub	sp, #64	; 0x40
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001cf0:	f003 fb76 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6821      	ldr	r1, [r4, #0]
 8001cf8:	4814      	ldr	r0, [pc, #80]	; (8001d4c <MenuCharge_Enter+0x64>)
 8001cfa:	f003 fbaf 	bl	800545c <printToBufferUART1D>
	if (BatteryCapacityCharge/3600>10)
 8001cfe:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8001d02:	6822      	ldr	r2, [r4, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d91b      	bls.n	8001d40 <MenuCharge_Enter+0x58>
		ClockStringNoSec(ChargeTimeSec,s_clock);
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MenuCharge_Enter+0x68>)
 8001d0a:	a90b      	add	r1, sp, #44	; 0x2c
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	f7ff fc45 	bl	800159c <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityCharge/3600,str),"mAh",s_clock,strout);
 8001d12:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d16:	6820      	ldr	r0, [r4, #0]
 8001d18:	a901      	add	r1, sp, #4
 8001d1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d1e:	f7ff fadf 	bl	80012e0 <itoaP>
 8001d22:	ab06      	add	r3, sp, #24
 8001d24:	aa0b      	add	r2, sp, #44	; 0x2c
 8001d26:	490b      	ldr	r1, [pc, #44]	; (8001d54 <MenuCharge_Enter+0x6c>)
 8001d28:	f7ff fba2 	bl	8001470 <Merge3Strings>
		WriteInLOGc(strout,CHARGE_H);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	a806      	add	r0, sp, #24
 8001d30:	f7ff f87e 	bl	8000e30 <WriteInLOGc>
		logDebug(strout);
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <MenuCharge_Enter+0x60>)
 8001d36:	f003 fb53 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001d3a:	a806      	add	r0, sp, #24
 8001d3c:	f003 faea 	bl	8005314 <printToBufferUART1>
}
 8001d40:	b010      	add	sp, #64	; 0x40
 8001d42:	bd10      	pop	{r4, pc}
 8001d44:	20000788 	.word	0x20000788
 8001d48:	08005ac8 	.word	0x08005ac8
 8001d4c:	080060b2 	.word	0x080060b2
 8001d50:	20000798 	.word	0x20000798
 8001d54:	080060ae 	.word	0x080060ae

08001d58 <SelectedOption.part.0>:
void SelectedOption(void)
 8001d58:	b508      	push	{r3, lr}
		lcd_set_xy(7,1);
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2007      	movs	r0, #7
 8001d5e:	f7ff fe25 	bl	80019ac <lcd_set_xy>
}
 8001d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_send(255,DATA);
 8001d66:	2101      	movs	r1, #1
 8001d68:	20ff      	movs	r0, #255	; 0xff
 8001d6a:	f7ff bd5f 	b.w	800182c <lcd_send>
	...

08001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>:
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	fa91 f1a1 	rbit	r1, r1
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001d7a:	fab1 f381 	clz	r3, r1
 8001d7e:	4c10      	ldr	r4, [pc, #64]	; (8001dc0 <LL_ADC_SetChannelSamplingTime.constprop.0+0x50>)
 8001d80:	f000 7100 	and.w	r1, r0, #33554432	; 0x2000000
 8001d84:	40d9      	lsrs	r1, r3
 8001d86:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
  
  MODIFY_REG(*preg,
 8001d8a:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8001d8e:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8001d92:	fa92 f3a2 	rbit	r3, r2
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	fa92 f2a2 	rbit	r2, r2
 8001d9e:	2607      	movs	r6, #7
 8001da0:	fab2 f282 	clz	r2, r2
 8001da4:	fa20 f303 	lsr.w	r3, r0, r3
 8001da8:	fa06 f303 	lsl.w	r3, r6, r3
 8001dac:	40d0      	lsrs	r0, r2
 8001dae:	ea25 0303 	bic.w	r3, r5, r3
 8001db2:	fa06 f000 	lsl.w	r0, r6, r0
 8001db6:	4318      	orrs	r0, r3
 8001db8:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
 8001dbe:	bf00      	nop
 8001dc0:	4001240c 	.word	0x4001240c

08001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>:
 8001dc4:	f44f 7340 	mov.w	r3, #768	; 0x300
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8001dc8:	b530      	push	{r4, r5, lr}
 8001dca:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001dce:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8001dd2:	241f      	movs	r4, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001dd4:	4d08      	ldr	r5, [pc, #32]	; (8001df8 <LL_ADC_REG_SetSequencerRanks.constprop.0+0x34>)
 8001dd6:	f400 7240 	and.w	r2, r0, #768	; 0x300
 8001dda:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8001ddc:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001de0:	f000 001f 	and.w	r0, r0, #31
 8001de4:	4084      	lsls	r4, r0
 8001de6:	f001 011f 	and.w	r1, r1, #31
 8001dea:	ea23 0304 	bic.w	r3, r3, r4
 8001dee:	4081      	lsls	r1, r0
 8001df0:	4319      	orrs	r1, r3
 8001df2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8001df6:	bd30      	pop	{r4, r5, pc}
 8001df8:	4001242c 	.word	0x4001242c

08001dfc <NVIC_EncodePriority.constprop.0>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	4770      	bx	lr

08001e00 <MenuTraining_WriteInLOG>:
	s[1] = '\0';
 8001e00:	2300      	movs	r3, #0
{
 8001e02:	b510      	push	{r4, lr}
 8001e04:	b096      	sub	sp, #88	; 0x58
 8001e06:	4604      	mov	r4, r0
 8001e08:	4608      	mov	r0, r1
	ClockStringNoSec(Time,s_clock);
 8001e0a:	a911      	add	r1, sp, #68	; 0x44
	s[0] = c;
 8001e0c:	f88d 2004 	strb.w	r2, [sp, #4]
	s[1] = '\0';
 8001e10:	f88d 3005 	strb.w	r3, [sp, #5]
	ClockStringNoSec(Time,s_clock);
 8001e14:	f7ff fbc2 	bl	800159c <ClockStringNoSec>
	Merge3Strings(itoaP(Capacity/3600,str),"mAh",s_clock,strout);
 8001e18:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001e1c:	a902      	add	r1, sp, #8
 8001e1e:	fbb4 f0f0 	udiv	r0, r4, r0
 8001e22:	f7ff fa5d 	bl	80012e0 <itoaP>
 8001e26:	ab07      	add	r3, sp, #28
 8001e28:	aa11      	add	r2, sp, #68	; 0x44
 8001e2a:	4907      	ldr	r1, [pc, #28]	; (8001e48 <MenuTraining_WriteInLOG+0x48>)
 8001e2c:	f7ff fb20 	bl	8001470 <Merge3Strings>
	Merge2Strings(s,strout,strout1);
 8001e30:	aa0c      	add	r2, sp, #48	; 0x30
 8001e32:	a907      	add	r1, sp, #28
 8001e34:	a801      	add	r0, sp, #4
 8001e36:	f7ff fb05 	bl	8001444 <Merge2Strings>
	WriteInLOGc(strout1,TRAINING_);
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	a80c      	add	r0, sp, #48	; 0x30
 8001e3e:	f7fe fff7 	bl	8000e30 <WriteInLOGc>
}
 8001e42:	b016      	add	sp, #88	; 0x58
 8001e44:	bd10      	pop	{r4, pc}
 8001e46:	bf00      	nop
 8001e48:	080060ae 	.word	0x080060ae

08001e4c <MenuLog>:
	if (key == KEY_NEXT)
 8001e4c:	2802      	cmp	r0, #2
{
 8001e4e:	b538      	push	{r3, r4, r5, lr}
 8001e50:	4c1e      	ldr	r4, [pc, #120]	; (8001ecc <MenuLog+0x80>)
 8001e52:	4d1f      	ldr	r5, [pc, #124]	; (8001ed0 <MenuLog+0x84>)
	if (key == KEY_NEXT)
 8001e54:	d12a      	bne.n	8001eac <MenuLog+0x60>
		i_LogItems++;
 8001e56:	8823      	ldrh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001e58:	682a      	ldr	r2, [r5, #0]
		i_LogItems++;
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b21b      	sxth	r3, r3
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001e5e:	4293      	cmp	r3, r2
		i_LogItems++;
 8001e60:	8023      	strh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8001e62:	d301      	bcc.n	8001e68 <MenuLog+0x1c>
 8001e64:	2300      	movs	r3, #0
 8001e66:	8023      	strh	r3, [r4, #0]
	lcd_set_xy(0,0);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4608      	mov	r0, r1
 8001e6c:	f7ff fd9e 	bl	80019ac <lcd_set_xy>
	PrintToLCD(LoggingData.Records[LoggingData.RecordsQuantity - i_LogItems-1]);
 8001e70:	6828      	ldr	r0, [r5, #0]
 8001e72:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001e76:	3801      	subs	r0, #1
 8001e78:	1ac0      	subs	r0, r0, r3
 8001e7a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8001e7e:	3004      	adds	r0, #4
 8001e80:	4428      	add	r0, r5
 8001e82:	f7ff fe13 	bl	8001aac <PrintToLCD>
	logDebugD("i_LogItems: ",i_LogItems,0);
 8001e86:	4813      	ldr	r0, [pc, #76]	; (8001ed4 <MenuLog+0x88>)
 8001e88:	f003 faaa 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001e8c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	4811      	ldr	r0, [pc, #68]	; (8001ed8 <MenuLog+0x8c>)
 8001e94:	f003 fae2 	bl	800545c <printToBufferUART1D>
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8001e98:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <MenuLog+0x88>)
 8001e9a:	f003 faa1 	bl	80053e0 <printToBufferWithoutEndUART1>
 8001e9e:	6829      	ldr	r1, [r5, #0]
 8001ea0:	2200      	movs	r2, #0
}
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8001ea6:	480d      	ldr	r0, [pc, #52]	; (8001edc <MenuLog+0x90>)
 8001ea8:	f003 bad8 	b.w	800545c <printToBufferUART1D>
	if (key == KEY_BACK)
 8001eac:	2801      	cmp	r0, #1
 8001eae:	d1db      	bne.n	8001e68 <MenuLog+0x1c>
		i_LogItems--;
 8001eb0:	8823      	ldrh	r3, [r4, #0]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001eb6:	2b00      	cmp	r3, #0
		i_LogItems--;
 8001eb8:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001eba:	dad5      	bge.n	8001e68 <MenuLog+0x1c>
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=0;
 8001ec2:	2b00      	cmp	r3, #0
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8001ec4:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=0;
 8001ec6:	dbcd      	blt.n	8001e64 <MenuLog+0x18>
 8001ec8:	e7ce      	b.n	8001e68 <MenuLog+0x1c>
 8001eca:	bf00      	nop
 8001ecc:	200007f2 	.word	0x200007f2
 8001ed0:	20000888 	.word	0x20000888
 8001ed4:	08005ac8 	.word	0x08005ac8
 8001ed8:	080060ba 	.word	0x080060ba
 8001edc:	080060c7 	.word	0x080060c7

08001ee0 <MenuCalibration_CURRENT_Out_to_0>:
	lcd_set_xy(0,0);
 8001ee0:	2100      	movs	r1, #0
{
 8001ee2:	b510      	push	{r4, lr}
 8001ee4:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	f7ff fd60 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <MenuCalibration_CURRENT_Out_to_0+0x38>)
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	f7ff f9ba 	bl	8001268 <itoa>
 8001ef4:	f7ff fdda 	bl	8001aac <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 8001ef8:	4808      	ldr	r0, [pc, #32]	; (8001f1c <MenuCalibration_CURRENT_Out_to_0+0x3c>)
 8001efa:	f7ff fdd7 	bl	8001aac <PrintToLCD>
	if (key == KEY_NEXT)
 8001efe:	2c02      	cmp	r4, #2
 8001f00:	d108      	bne.n	8001f14 <MenuCalibration_CURRENT_Out_to_0+0x34>
}
 8001f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent = Current_Out;
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MenuCalibration_CURRENT_Out_to_0+0x40>)
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <MenuCalibration_CURRENT_Out_to_0+0x44>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	6093      	str	r3, [r2, #8]
		CalibrationWriteToFlash_CRC();
 8001f10:	f7fe bd26 	b.w	8000960 <CalibrationWriteToFlash_CRC>
}
 8001f14:	bd10      	pop	{r4, pc}
 8001f16:	bf00      	nop
 8001f18:	200002b4 	.word	0x200002b4
 8001f1c:	080060da 	.word	0x080060da
 8001f20:	200002bc 	.word	0x200002bc
 8001f24:	20000004 	.word	0x20000004

08001f28 <MenuCalibration_CURRENT_Load_to_0>:
	lcd_set_xy(0,0);
 8001f28:	2100      	movs	r1, #0
{
 8001f2a:	b510      	push	{r4, lr}
 8001f2c:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8001f2e:	4608      	mov	r0, r1
 8001f30:	f7ff fd3c 	bl	80019ac <lcd_set_xy>
	PrintToLCD(	itoa(Current));
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MenuCalibration_CURRENT_Load_to_0+0x38>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	f7ff f996 	bl	8001268 <itoa>
 8001f3c:	f7ff fdb6 	bl	8001aac <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <MenuCalibration_CURRENT_Load_to_0+0x3c>)
 8001f42:	f7ff fdb3 	bl	8001aac <PrintToLCD>
	if (key == KEY_NEXT)
 8001f46:	2c02      	cmp	r4, #2
 8001f48:	d108      	bne.n	8001f5c <MenuCalibration_CURRENT_Load_to_0+0x34>
}
 8001f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent1 = Current_load;
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MenuCalibration_CURRENT_Load_to_0+0x40>)
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <MenuCalibration_CURRENT_Load_to_0+0x44>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	6113      	str	r3, [r2, #16]
		CalibrationWriteToFlash_CRC();
 8001f58:	f7fe bd02 	b.w	8000960 <CalibrationWriteToFlash_CRC>
}
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	bf00      	nop
 8001f60:	200002b4 	.word	0x200002b4
 8001f64:	080060da 	.word	0x080060da
 8001f68:	200002be 	.word	0x200002be
 8001f6c:	20000004 	.word	0x20000004

08001f70 <MenuCalibration_BackToFactory>:
	lcd_set_xy(0,0);
 8001f70:	2100      	movs	r1, #0
{
 8001f72:	b510      	push	{r4, lr}
 8001f74:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8001f76:	4608      	mov	r0, r1
 8001f78:	f7ff fd18 	bl	80019ac <lcd_set_xy>
	PrintToLCD("Factory-press >>");
 8001f7c:	481f      	ldr	r0, [pc, #124]	; (8001ffc <MenuCalibration_BackToFactory+0x8c>)
 8001f7e:	f7ff fd95 	bl	8001aac <PrintToLCD>
	if (key == KEY_NEXT)
 8001f82:	2c02      	cmp	r4, #2
 8001f84:	d130      	bne.n	8001fe8 <MenuCalibration_BackToFactory+0x78>
		FactoryWriteToFlash_CRC();
 8001f86:	f7fe fd7b 	bl	8000a80 <FactoryWriteToFlash_CRC>
		EEpromReadStatus = ReadFromFlash();
 8001f8a:	f7fe fca7 	bl	80008dc <ReadFromFlash>
		lcd_set_xy(0,0);
 8001f8e:	2100      	movs	r1, #0
		EEpromReadStatus = ReadFromFlash();
 8001f90:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 8001f92:	4608      	mov	r0, r1
 8001f94:	f7ff fd0a 	bl	80019ac <lcd_set_xy>
		PrintToLCD("In Proccess ....");
 8001f98:	4819      	ldr	r0, [pc, #100]	; (8002000 <MenuCalibration_BackToFactory+0x90>)
 8001f9a:	f7ff fd87 	bl	8001aac <PrintToLCD>
		delay_ms(2000);
 8001f9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fa2:	f7ff f845 	bl	8001030 <delay_ms>
		lcd_set_xy(0,0);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4608      	mov	r0, r1
 8001faa:	f7ff fcff 	bl	80019ac <lcd_set_xy>
		if (EEpromReadStatus == 1)
 8001fae:	2c01      	cmp	r4, #1
 8001fb0:	d11b      	bne.n	8001fea <MenuCalibration_BackToFactory+0x7a>
			PrintToLCD("Factory are OK  ");
 8001fb2:	4814      	ldr	r0, [pc, #80]	; (8002004 <MenuCalibration_BackToFactory+0x94>)
 8001fb4:	f7ff fd7a 	bl	8001aac <PrintToLCD>
			WriteInLOG("Factory are OK");
 8001fb8:	4813      	ldr	r0, [pc, #76]	; (8002008 <MenuCalibration_BackToFactory+0x98>)
 8001fba:	f7fe fe73 	bl	8000ca4 <WriteInLOG>
			delay_ms(2000);
 8001fbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fc2:	f7ff f835 	bl	8001030 <delay_ms>
		    BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.CurrentConsumption1s;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <MenuCalibration_BackToFactory+0x9c>)
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MenuCalibration_BackToFactory+0xa0>)
 8001fcc:	601a      	str	r2, [r3, #0]
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 8001fce:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MenuCalibration_BackToFactory+0xa4>)
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	434a      	muls	r2, r1
 8001fd8:	490f      	ldr	r1, [pc, #60]	; (8002018 <MenuCalibration_BackToFactory+0xa8>)
 8001fda:	600a      	str	r2, [r1, #0]
		    SelectedOptionValue = SettingsData.Option1;
 8001fdc:	6899      	ldr	r1, [r3, #8]
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <MenuCalibration_BackToFactory+0xac>)
 8001fe0:	6011      	str	r1, [r2, #0]
		    SelectedOptionValue1 = SettingsData.Option2;
 8001fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MenuCalibration_BackToFactory+0xb0>)
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	bd10      	pop	{r4, pc}
			PrintToLCD("EEprom read FAIL");
 8001fea:	480e      	ldr	r0, [pc, #56]	; (8002024 <MenuCalibration_BackToFactory+0xb4>)
 8001fec:	f7ff fd5e 	bl	8001aac <PrintToLCD>
}
 8001ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			delay_ms(4000);
 8001ff4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001ff8:	f7ff b81a 	b.w	8001030 <delay_ms>
 8001ffc:	080060e9 	.word	0x080060e9
 8002000:	080060fa 	.word	0x080060fa
 8002004:	0800610b 	.word	0x0800610b
 8002008:	0800611c 	.word	0x0800611c
 800200c:	200000f4 	.word	0x200000f4
 8002010:	20000790 	.word	0x20000790
 8002014:	20000154 	.word	0x20000154
 8002018:	20000a28 	.word	0x20000a28
 800201c:	20000a2c 	.word	0x20000a2c
 8002020:	20000a24 	.word	0x20000a24
 8002024:	0800612b 	.word	0x0800612b

08002028 <MenuSettingsChargeTime>:
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 8002028:	2802      	cmp	r0, #2
{
 800202a:	b510      	push	{r4, lr}
 800202c:	4c0e      	ldr	r4, [pc, #56]	; (8002068 <MenuSettingsChargeTime+0x40>)
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 800202e:	d115      	bne.n	800205c <MenuSettingsChargeTime+0x34>
 8002030:	6923      	ldr	r3, [r4, #16]
 8002032:	3301      	adds	r3, #1
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 8002034:	6123      	str	r3, [r4, #16]
	lcd_set_xy(0,0);
 8002036:	2100      	movs	r1, #0
 8002038:	4608      	mov	r0, r1
 800203a:	f7ff fcb7 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeTime));
 800203e:	6920      	ldr	r0, [r4, #16]
 8002040:	f7ff f912 	bl	8001268 <itoa>
 8002044:	f7ff fd32 	bl	8001aac <PrintToLCD>
	PrintToLCD("h   ");
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <MenuSettingsChargeTime+0x44>)
 800204a:	f7ff fd2f 	bl	8001aac <PrintToLCD>
    ChargeDurationSec = SettingsData.ChargeTime*3600;
 800204e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002052:	6922      	ldr	r2, [r4, #16]
 8002054:	4353      	muls	r3, r2
 8002056:	4a06      	ldr	r2, [pc, #24]	; (8002070 <MenuSettingsChargeTime+0x48>)
 8002058:	6013      	str	r3, [r2, #0]
}
 800205a:	bd10      	pop	{r4, pc}
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 800205c:	2801      	cmp	r0, #1
 800205e:	d1ea      	bne.n	8002036 <MenuSettingsChargeTime+0xe>
 8002060:	6923      	ldr	r3, [r4, #16]
 8002062:	3b01      	subs	r3, #1
 8002064:	e7e6      	b.n	8002034 <MenuSettingsChargeTime+0xc>
 8002066:	bf00      	nop
 8002068:	20000154 	.word	0x20000154
 800206c:	0800613c 	.word	0x0800613c
 8002070:	20000a28 	.word	0x20000a28

08002074 <MenuSettingsBatteryType>:
{
 8002074:	b510      	push	{r4, lr}
 8002076:	4c33      	ldr	r4, [pc, #204]	; (8002144 <MenuSettingsBatteryType+0xd0>)
	if (key == KEY_NEXT)
 8002078:	2802      	cmp	r0, #2
 800207a:	f994 3000 	ldrsb.w	r3, [r4]
 800207e:	d10d      	bne.n	800209c <MenuSettingsBatteryType+0x28>
		CountShowBT++;
 8002080:	3301      	adds	r3, #1
 8002082:	b25b      	sxtb	r3, r3
		if (CountShowBT==MAXITEM_BT) CountShowBT=0;
 8002084:	2b07      	cmp	r3, #7
 8002086:	d10f      	bne.n	80020a8 <MenuSettingsBatteryType+0x34>
 8002088:	2300      	movs	r3, #0
 800208a:	7023      	strb	r3, [r4, #0]
		lcd_set_xy(0,0);
 800208c:	2100      	movs	r1, #0
 800208e:	4608      	mov	r0, r1
 8002090:	f7ff fc8c 	bl	80019ac <lcd_set_xy>
		PrintToLCD("12V Pb Battery  ");
 8002094:	482c      	ldr	r0, [pc, #176]	; (8002148 <MenuSettingsBatteryType+0xd4>)
 8002096:	f7ff fd09 	bl	8001aac <PrintToLCD>
 800209a:	e00a      	b.n	80020b2 <MenuSettingsBatteryType+0x3e>
	if (key == KEY_BACK)
 800209c:	2801      	cmp	r0, #1
 800209e:	d104      	bne.n	80020aa <MenuSettingsBatteryType+0x36>
		CountShowBT--;
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b25b      	sxtb	r3, r3
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db10      	blt.n	80020ca <MenuSettingsBatteryType+0x56>
		CountShowBT++;
 80020a8:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 0)
 80020aa:	f994 3000 	ldrsb.w	r3, [r4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0ec      	beq.n	800208c <MenuSettingsBatteryType+0x18>
	if(CountShowBT == 1)
 80020b2:	f994 3000 	ldrsb.w	r3, [r4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d109      	bne.n	80020ce <MenuSettingsBatteryType+0x5a>
		lcd_set_xy(0,0);
 80020ba:	2100      	movs	r1, #0
 80020bc:	4608      	mov	r0, r1
 80020be:	f7ff fc75 	bl	80019ac <lcd_set_xy>
		PrintToLCD("Li ion  Battery  ");
 80020c2:	4822      	ldr	r0, [pc, #136]	; (800214c <MenuSettingsBatteryType+0xd8>)
 80020c4:	f7ff fcf2 	bl	8001aac <PrintToLCD>
 80020c8:	e001      	b.n	80020ce <MenuSettingsBatteryType+0x5a>
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 80020ca:	2306      	movs	r3, #6
 80020cc:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 2)
 80020ce:	f994 3000 	ldrsb.w	r3, [r4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d106      	bne.n	80020e4 <MenuSettingsBatteryType+0x70>
		lcd_set_xy(0,0);
 80020d6:	2100      	movs	r1, #0
 80020d8:	4608      	mov	r0, r1
 80020da:	f7ff fc67 	bl	80019ac <lcd_set_xy>
		PrintToLCD("LiFePo4 Battery ");
 80020de:	481c      	ldr	r0, [pc, #112]	; (8002150 <MenuSettingsBatteryType+0xdc>)
 80020e0:	f7ff fce4 	bl	8001aac <PrintToLCD>
	if(CountShowBT == 3)
 80020e4:	f994 3000 	ldrsb.w	r3, [r4]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d106      	bne.n	80020fa <MenuSettingsBatteryType+0x86>
		lcd_set_xy(0,0);
 80020ec:	2100      	movs	r1, #0
 80020ee:	4608      	mov	r0, r1
 80020f0:	f7ff fc5c 	bl	80019ac <lcd_set_xy>
		PrintToLCD("LiTo Battery   ");
 80020f4:	4817      	ldr	r0, [pc, #92]	; (8002154 <MenuSettingsBatteryType+0xe0>)
 80020f6:	f7ff fcd9 	bl	8001aac <PrintToLCD>
	if(CountShowBT == 4)
 80020fa:	f994 3000 	ldrsb.w	r3, [r4]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d106      	bne.n	8002110 <MenuSettingsBatteryType+0x9c>
		lcd_set_xy(0,0);
 8002102:	2100      	movs	r1, #0
 8002104:	4608      	mov	r0, r1
 8002106:	f7ff fc51 	bl	80019ac <lcd_set_xy>
		PrintToLCD("NIMh 9.6V Bat.  ");
 800210a:	4813      	ldr	r0, [pc, #76]	; (8002158 <MenuSettingsBatteryType+0xe4>)
 800210c:	f7ff fcce 	bl	8001aac <PrintToLCD>
	if(CountShowBT == 5)
 8002110:	f994 3000 	ldrsb.w	r3, [r4]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d106      	bne.n	8002126 <MenuSettingsBatteryType+0xb2>
		lcd_set_xy(0,0);
 8002118:	2100      	movs	r1, #0
 800211a:	4608      	mov	r0, r1
 800211c:	f7ff fc46 	bl	80019ac <lcd_set_xy>
		PrintToLCD("Min 1V  MAX 20V");
 8002120:	480e      	ldr	r0, [pc, #56]	; (800215c <MenuSettingsBatteryType+0xe8>)
 8002122:	f7ff fcc3 	bl	8001aac <PrintToLCD>
	if(CountShowBT == 6)
 8002126:	f994 3000 	ldrsb.w	r3, [r4]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d108      	bne.n	8002140 <MenuSettingsBatteryType+0xcc>
		lcd_set_xy(0,0);
 800212e:	2100      	movs	r1, #0
 8002130:	4608      	mov	r0, r1
 8002132:	f7ff fc3b 	bl	80019ac <lcd_set_xy>
}
 8002136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PrintToLCD("   OK to Exit  ");
 800213a:	4809      	ldr	r0, [pc, #36]	; (8002160 <MenuSettingsBatteryType+0xec>)
 800213c:	f7ff bcb6 	b.w	8001aac <PrintToLCD>
}
 8002140:	bd10      	pop	{r4, pc}
 8002142:	bf00      	nop
 8002144:	2000079f 	.word	0x2000079f
 8002148:	08006141 	.word	0x08006141
 800214c:	08006152 	.word	0x08006152
 8002150:	08006164 	.word	0x08006164
 8002154:	08006175 	.word	0x08006175
 8002158:	08006185 	.word	0x08006185
 800215c:	08006196 	.word	0x08006196
 8002160:	080061a6 	.word	0x080061a6

08002164 <MenuSettingsLowVolt>:
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 8002164:	2802      	cmp	r0, #2
{
 8002166:	b510      	push	{r4, lr}
 8002168:	4c0d      	ldr	r4, [pc, #52]	; (80021a0 <MenuSettingsLowVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 800216a:	d114      	bne.n	8002196 <MenuSettingsLowVolt+0x32>
 800216c:	69a3      	ldr	r3, [r4, #24]
 800216e:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 8002170:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 8002172:	2100      	movs	r1, #0
 8002174:	4608      	mov	r0, r1
 8002176:	f7ff fc19 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 800217a:	230a      	movs	r3, #10
 800217c:	69a0      	ldr	r0, [r4, #24]
 800217e:	2101      	movs	r1, #1
 8002180:	fbb0 f0f3 	udiv	r0, r0, r3
 8002184:	f7ff f8e8 	bl	8001358 <itoa_koma>
 8002188:	f7ff fc90 	bl	8001aac <PrintToLCD>
}
 800218c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <MenuSettingsLowVolt+0x40>)
 8002192:	f7ff bc8b 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 8002196:	2801      	cmp	r0, #1
 8002198:	d1eb      	bne.n	8002172 <MenuSettingsLowVolt+0xe>
 800219a:	69a3      	ldr	r3, [r4, #24]
 800219c:	3b0a      	subs	r3, #10
 800219e:	e7e7      	b.n	8002170 <MenuSettingsLowVolt+0xc>
 80021a0:	20000154 	.word	0x20000154
 80021a4:	08006065 	.word	0x08006065

080021a8 <MenuSettingsMaxVolt>:
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 80021a8:	2802      	cmp	r0, #2
{
 80021aa:	b510      	push	{r4, lr}
 80021ac:	4c0d      	ldr	r4, [pc, #52]	; (80021e4 <MenuSettingsMaxVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 80021ae:	d114      	bne.n	80021da <MenuSettingsMaxVolt+0x32>
 80021b0:	6a23      	ldr	r3, [r4, #32]
 80021b2:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 80021b4:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 80021b6:	2100      	movs	r1, #0
 80021b8:	4608      	mov	r0, r1
 80021ba:	f7ff fbf7 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80021be:	230a      	movs	r3, #10
 80021c0:	6a20      	ldr	r0, [r4, #32]
 80021c2:	2101      	movs	r1, #1
 80021c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80021c8:	f7ff f8c6 	bl	8001358 <itoa_koma>
 80021cc:	f7ff fc6e 	bl	8001aac <PrintToLCD>
}
 80021d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MenuSettingsMaxVolt+0x40>)
 80021d6:	f7ff bc69 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 80021da:	2801      	cmp	r0, #1
 80021dc:	d1eb      	bne.n	80021b6 <MenuSettingsMaxVolt+0xe>
 80021de:	6a23      	ldr	r3, [r4, #32]
 80021e0:	3b0a      	subs	r3, #10
 80021e2:	e7e7      	b.n	80021b4 <MenuSettingsMaxVolt+0xc>
 80021e4:	20000154 	.word	0x20000154
 80021e8:	08006065 	.word	0x08006065

080021ec <MenuSettingsSwngChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 80021ec:	2802      	cmp	r0, #2
{
 80021ee:	b510      	push	{r4, lr}
 80021f0:	4c0b      	ldr	r4, [pc, #44]	; (8002220 <MenuSettingsSwngChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 80021f2:	d110      	bne.n	8002216 <MenuSettingsSwngChrgTime+0x2a>
 80021f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021f6:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 80021f8:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 80021fa:	2100      	movs	r1, #0
 80021fc:	4608      	mov	r0, r1
 80021fe:	f7ff fbd5 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 8002202:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002204:	f7ff f830 	bl	8001268 <itoa>
 8002208:	f7ff fc50 	bl	8001aac <PrintToLCD>
}
 800220c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <MenuSettingsSwngChrgTime+0x38>)
 8002212:	f7ff bc4b 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 8002216:	2801      	cmp	r0, #1
 8002218:	d1ef      	bne.n	80021fa <MenuSettingsSwngChrgTime+0xe>
 800221a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800221c:	3b01      	subs	r3, #1
 800221e:	e7eb      	b.n	80021f8 <MenuSettingsSwngChrgTime+0xc>
 8002220:	20000154 	.word	0x20000154
 8002224:	080061b6 	.word	0x080061b6

08002228 <MenuSettingsSwngDChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 8002228:	2802      	cmp	r0, #2
{
 800222a:	b510      	push	{r4, lr}
 800222c:	4c0b      	ldr	r4, [pc, #44]	; (800225c <MenuSettingsSwngDChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 800222e:	d110      	bne.n	8002252 <MenuSettingsSwngDChrgTime+0x2a>
 8002230:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002232:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 8002234:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 8002236:	2100      	movs	r1, #0
 8002238:	4608      	mov	r0, r1
 800223a:	f7ff fbb7 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 800223e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002240:	f7ff f812 	bl	8001268 <itoa>
 8002244:	f7ff fc32 	bl	8001aac <PrintToLCD>
}
 8002248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <MenuSettingsSwngDChrgTime+0x38>)
 800224e:	f7ff bc2d 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 8002252:	2801      	cmp	r0, #1
 8002254:	d1ef      	bne.n	8002236 <MenuSettingsSwngDChrgTime+0xe>
 8002256:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002258:	3b01      	subs	r3, #1
 800225a:	e7eb      	b.n	8002234 <MenuSettingsSwngDChrgTime+0xc>
 800225c:	20000154 	.word	0x20000154
 8002260:	080061b6 	.word	0x080061b6

08002264 <MenuSettingsChargeAddapt>:
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 8002264:	2802      	cmp	r0, #2
{
 8002266:	b538      	push	{r3, r4, r5, lr}
 8002268:	4c1a      	ldr	r4, [pc, #104]	; (80022d4 <MenuSettingsChargeAddapt+0x70>)
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 800226a:	d12d      	bne.n	80022c8 <MenuSettingsChargeAddapt+0x64>
 800226c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800226e:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 8002270:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 8002272:	2100      	movs	r1, #0
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002274:	250a      	movs	r5, #10
	lcd_set_xy(0,0);
 8002276:	4608      	mov	r0, r1
 8002278:	f7ff fb98 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeAdapt));
 800227c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800227e:	f7fe fff3 	bl	8001268 <itoa>
 8002282:	f7ff fc13 	bl	8001aac <PrintToLCD>
	PrintToLCD("% ");
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <MenuSettingsChargeAddapt+0x74>)
 8002288:	f7ff fc10 	bl	8001aac <PrintToLCD>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800228c:	6a20      	ldr	r0, [r4, #32]
 800228e:	2101      	movs	r1, #1
 8002290:	fbb0 f0f5 	udiv	r0, r0, r5
 8002294:	f7ff f860 	bl	8001358 <itoa_koma>
 8002298:	f7ff fc08 	bl	8001aac <PrintToLCD>
	PrintToLCD("V ");
 800229c:	480f      	ldr	r0, [pc, #60]	; (80022dc <MenuSettingsChargeAddapt+0x78>)
 800229e:	f7ff fc05 	bl	8001aac <PrintToLCD>
	PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage * SettingsData.ChargeAdapt/100))/10,1));
 80022a2:	2264      	movs	r2, #100	; 0x64
 80022a4:	6a23      	ldr	r3, [r4, #32]
 80022a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022a8:	2101      	movs	r1, #1
 80022aa:	4358      	muls	r0, r3
 80022ac:	fbb0 f0f2 	udiv	r0, r0, r2
 80022b0:	1a18      	subs	r0, r3, r0
 80022b2:	fbb0 f0f5 	udiv	r0, r0, r5
 80022b6:	f7ff f84f 	bl	8001358 <itoa_koma>
 80022ba:	f7ff fbf7 	bl	8001aac <PrintToLCD>
}
 80022be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("V   ");
 80022c2:	4807      	ldr	r0, [pc, #28]	; (80022e0 <MenuSettingsChargeAddapt+0x7c>)
 80022c4:	f7ff bbf2 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 80022c8:	2801      	cmp	r0, #1
 80022ca:	d1d2      	bne.n	8002272 <MenuSettingsChargeAddapt+0xe>
 80022cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022ce:	3b01      	subs	r3, #1
 80022d0:	e7ce      	b.n	8002270 <MenuSettingsChargeAddapt+0xc>
 80022d2:	bf00      	nop
 80022d4:	20000154 	.word	0x20000154
 80022d8:	080061bf 	.word	0x080061bf
 80022dc:	080061c2 	.word	0x080061c2
 80022e0:	08006065 	.word	0x08006065

080022e4 <SelectedOption>:
	if (SelectedOptionValue == SettingsData.Option1)
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SelectedOption+0x14>)
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SelectedOption+0x18>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d101      	bne.n	80022f4 <SelectedOption+0x10>
 80022f0:	f7ff bd32 	b.w	8001d58 <SelectedOption.part.0>
}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000154 	.word	0x20000154
 80022fc:	20000a2c 	.word	0x20000a2c

08002300 <SelectedOption1>:
	if (SelectedOptionValue1 == SettingsData.Option2)
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SelectedOption1+0x14>)
 8002302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SelectedOption1+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d101      	bne.n	8002310 <SelectedOption1+0x10>
 800230c:	f7ff bd24 	b.w	8001d58 <SelectedOption.part.0>
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000154 	.word	0x20000154
 8002318:	20000a24 	.word	0x20000a24

0800231c <MenuSettingsSaveMenuPosWhenOFF>:
	lcd_set_xy(0,0);
 800231c:	2100      	movs	r1, #0
{
 800231e:	b510      	push	{r4, lr}
 8002320:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002322:	4608      	mov	r0, r1
 8002324:	f7ff fb42 	bl	80019ac <lcd_set_xy>
	if (key == KEY_NEXT)
 8002328:	2c02      	cmp	r4, #2
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <MenuSettingsSaveMenuPosWhenOFF+0x8c>)
 800232c:	d10d      	bne.n	800234a <MenuSettingsSaveMenuPosWhenOFF+0x2e>
		SettingsData.Option1++;
 800232e:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 8002330:	2a07      	cmp	r2, #7
		SettingsData.Option1++;
 8002332:	f102 0101 	add.w	r1, r2, #1
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 8002336:	d127      	bne.n	8002388 <MenuSettingsSaveMenuPosWhenOFF+0x6c>
 8002338:	2201      	movs	r2, #1
 800233a:	609a      	str	r2, [r3, #8]
			PrintToLCD("PowerSupply     ");
 800233c:	481b      	ldr	r0, [pc, #108]	; (80023ac <MenuSettingsSaveMenuPosWhenOFF+0x90>)
			PrintToLCD("Swing           ");
 800233e:	f7ff fbb5 	bl	8001aac <PrintToLCD>
}
 8002342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption();
 8002346:	f7ff bfcd 	b.w	80022e4 <SelectedOption>
	if (key == KEY_BACK)
 800234a:	2c01      	cmp	r4, #1
 800234c:	d103      	bne.n	8002356 <MenuSettingsSaveMenuPosWhenOFF+0x3a>
		SettingsData.Option1--;
 800234e:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 8002350:	3a01      	subs	r2, #1
 8002352:	d015      	beq.n	8002380 <MenuSettingsSaveMenuPosWhenOFF+0x64>
		SettingsData.Option1--;
 8002354:	609a      	str	r2, [r3, #8]
	switch (SettingsData.Option1)
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	3a01      	subs	r2, #1
 800235a:	2a06      	cmp	r2, #6
 800235c:	d820      	bhi.n	80023a0 <MenuSettingsSaveMenuPosWhenOFF+0x84>
 800235e:	a101      	add	r1, pc, #4	; (adr r1, 8002364 <MenuSettingsSaveMenuPosWhenOFF+0x48>)
 8002360:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002364:	0800233d 	.word	0x0800233d
 8002368:	0800238d 	.word	0x0800238d
 800236c:	08002391 	.word	0x08002391
 8002370:	08002395 	.word	0x08002395
 8002374:	08002399 	.word	0x08002399
 8002378:	0800239d 	.word	0x0800239d
 800237c:	08002385 	.word	0x08002385
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 8002380:	2207      	movs	r2, #7
 8002382:	609a      	str	r2, [r3, #8]
			PrintToLCD("Swing           ");
 8002384:	480a      	ldr	r0, [pc, #40]	; (80023b0 <MenuSettingsSaveMenuPosWhenOFF+0x94>)
 8002386:	e7da      	b.n	800233e <MenuSettingsSaveMenuPosWhenOFF+0x22>
		SettingsData.Option1++;
 8002388:	6099      	str	r1, [r3, #8]
 800238a:	e7e4      	b.n	8002356 <MenuSettingsSaveMenuPosWhenOFF+0x3a>
			PrintToLCD("Load Menu       ");
 800238c:	4809      	ldr	r0, [pc, #36]	; (80023b4 <MenuSettingsSaveMenuPosWhenOFF+0x98>)
 800238e:	e7d6      	b.n	800233e <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Charge CC CV    ");
 8002390:	4809      	ldr	r0, [pc, #36]	; (80023b8 <MenuSettingsSaveMenuPosWhenOFF+0x9c>)
 8002392:	e7d4      	b.n	800233e <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Charge addapt   ");
 8002394:	4809      	ldr	r0, [pc, #36]	; (80023bc <MenuSettingsSaveMenuPosWhenOFF+0xa0>)
 8002396:	e7d2      	b.n	800233e <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("DisCharge       ");
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <MenuSettingsSaveMenuPosWhenOFF+0xa4>)
 800239a:	e7d0      	b.n	800233e <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Training        ");
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <MenuSettingsSaveMenuPosWhenOFF+0xa8>)
 800239e:	e7ce      	b.n	800233e <MenuSettingsSaveMenuPosWhenOFF+0x22>
			SettingsData.Option1 =1;
 80023a0:	2201      	movs	r2, #1
 80023a2:	609a      	str	r2, [r3, #8]
}
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	bf00      	nop
 80023a8:	20000154 	.word	0x20000154
 80023ac:	080061c5 	.word	0x080061c5
 80023b0:	0800622b 	.word	0x0800622b
 80023b4:	080061d6 	.word	0x080061d6
 80023b8:	080061e7 	.word	0x080061e7
 80023bc:	080061f8 	.word	0x080061f8
 80023c0:	08006209 	.word	0x08006209
 80023c4:	0800621a 	.word	0x0800621a

080023c8 <MenuSettingsOutAfterPowerUp>:
	lcd_set_xy(0,0);
 80023c8:	2100      	movs	r1, #0
{
 80023ca:	b510      	push	{r4, lr}
 80023cc:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80023ce:	4608      	mov	r0, r1
 80023d0:	f7ff faec 	bl	80019ac <lcd_set_xy>
	if (key == KEY_NEXT)
 80023d4:	2c02      	cmp	r4, #2
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MenuSettingsOutAfterPowerUp+0x60>)
 80023d8:	d10d      	bne.n	80023f6 <MenuSettingsOutAfterPowerUp+0x2e>
		SettingsData.Option2++;
 80023da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 80023dc:	2a03      	cmp	r2, #3
		SettingsData.Option2++;
 80023de:	f102 0101 	add.w	r1, r2, #1
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 80023e2:	d11c      	bne.n	800241e <MenuSettingsOutAfterPowerUp+0x56>
 80023e4:	2201      	movs	r2, #1
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
			PrintToLCD("OFF             ");
 80023e8:	4810      	ldr	r0, [pc, #64]	; (800242c <MenuSettingsOutAfterPowerUp+0x64>)
			PrintToLCD("Previous        ");
 80023ea:	f7ff fb5f 	bl	8001aac <PrintToLCD>
}
 80023ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption1();
 80023f2:	f7ff bf85 	b.w	8002300 <SelectedOption1>
	if (key == KEY_BACK)
 80023f6:	2c01      	cmp	r4, #1
 80023f8:	d103      	bne.n	8002402 <MenuSettingsOutAfterPowerUp+0x3a>
		SettingsData.Option2--;
 80023fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 80023fc:	3a01      	subs	r2, #1
 80023fe:	d00a      	beq.n	8002416 <MenuSettingsOutAfterPowerUp+0x4e>
		SettingsData.Option2--;
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
	switch (SettingsData.Option2)
 8002402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002404:	2a02      	cmp	r2, #2
 8002406:	d00c      	beq.n	8002422 <MenuSettingsOutAfterPowerUp+0x5a>
 8002408:	2a03      	cmp	r2, #3
 800240a:	d006      	beq.n	800241a <MenuSettingsOutAfterPowerUp+0x52>
 800240c:	2a01      	cmp	r2, #1
 800240e:	d0eb      	beq.n	80023e8 <MenuSettingsOutAfterPowerUp+0x20>
			SettingsData.Option2 =1;
 8002410:	2201      	movs	r2, #1
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002414:	bd10      	pop	{r4, pc}
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 8002416:	2203      	movs	r2, #3
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
			PrintToLCD("Previous        ");
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MenuSettingsOutAfterPowerUp+0x68>)
 800241c:	e7e5      	b.n	80023ea <MenuSettingsOutAfterPowerUp+0x22>
		SettingsData.Option2++;
 800241e:	6419      	str	r1, [r3, #64]	; 0x40
 8002420:	e7ef      	b.n	8002402 <MenuSettingsOutAfterPowerUp+0x3a>
			PrintToLCD("ON              ");
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <MenuSettingsOutAfterPowerUp+0x6c>)
 8002424:	e7e1      	b.n	80023ea <MenuSettingsOutAfterPowerUp+0x22>
 8002426:	bf00      	nop
 8002428:	20000154 	.word	0x20000154
 800242c:	0800623c 	.word	0x0800623c
 8002430:	0800625e 	.word	0x0800625e
 8002434:	0800624d 	.word	0x0800624d

08002438 <BUT_Debrief>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <BUT_Debrief+0x58>)
 800243a:	4916      	ldr	r1, [pc, #88]	; (8002494 <BUT_Debrief+0x5c>)
 800243c:	689a      	ldr	r2, [r3, #8]
int16_t comp = 0;
void BUT_Debrief(void)
{
	Key_Pressed_t key;

	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4))
 800243e:	f012 0f10 	tst.w	r2, #16
 8002442:	d00c      	beq.n	800245e <BUT_Debrief+0x26>
 8002444:	689a      	ldr	r2, [r3, #8]
		key = KEY_OK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_5))
 8002446:	0690      	lsls	r0, r2, #26
 8002448:	d516      	bpl.n	8002478 <BUT_Debrief+0x40>
 800244a:	689a      	ldr	r2, [r3, #8]
		key = KEY_NEXT;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
 800244c:	0652      	lsls	r2, r2, #25
 800244e:	d515      	bpl.n	800247c <BUT_Debrief+0x44>
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	43db      	mvns	r3, r3
		key = KEY_BACK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_7))
 8002454:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002458:	d112      	bne.n	8002480 <BUT_Debrief+0x48>
			{
			pressedKey = key;
			return;
		}
	}
	else comp=0;
 800245a:	800b      	strh	r3, [r1, #0]
 800245c:	4770      	bx	lr
		key = KEY_OK;
 800245e:	2203      	movs	r2, #3
		if (comp > THRESHOLD2)
 8002460:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002464:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002468:	4283      	cmp	r3, r0
 800246a:	dd0b      	ble.n	8002484 <BUT_Debrief+0x4c>
			comp = THRESHOLD2 - 40;
 800246c:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8002470:	800b      	strh	r3, [r1, #0]
			pressedKey = key;
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <BUT_Debrief+0x60>)
 8002474:	701a      	strb	r2, [r3, #0]
			return;
 8002476:	e00a      	b.n	800248e <BUT_Debrief+0x56>
		key = KEY_NEXT;
 8002478:	2202      	movs	r2, #2
 800247a:	e7f1      	b.n	8002460 <BUT_Debrief+0x28>
		key = KEY_BACK;
 800247c:	2201      	movs	r2, #1
 800247e:	e7ef      	b.n	8002460 <BUT_Debrief+0x28>
		key = KEY_UP;
 8002480:	2204      	movs	r2, #4
 8002482:	e7ed      	b.n	8002460 <BUT_Debrief+0x28>
		else comp++;
 8002484:	3301      	adds	r3, #1
 8002486:	b21b      	sxth	r3, r3
		if (comp == THRESHOLD)
 8002488:	2b14      	cmp	r3, #20
		else comp++;
 800248a:	800b      	strh	r3, [r1, #0]
		if (comp == THRESHOLD)
 800248c:	d0f1      	beq.n	8002472 <BUT_Debrief+0x3a>
}
 800248e:	4770      	bx	lr
 8002490:	40010c00 	.word	0x40010c00
 8002494:	200007f0 	.word	0x200007f0
 8002498:	200007f4 	.word	0x200007f4

0800249c <BUT_GetKey>:

Key_Pressed_t BUT_GetKey(void)
{
	if (pressedKey) PowerOffTimesec=0;
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <BUT_GetKey+0x14>)
 800249e:	7818      	ldrb	r0, [r3, #0]
 80024a0:	b110      	cbz	r0, 80024a8 <BUT_GetKey+0xc>
 80024a2:	2100      	movs	r1, #0
 80024a4:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <BUT_GetKey+0x18>)
 80024a6:	6011      	str	r1, [r2, #0]
	Key_Pressed_t key = pressedKey;
	pressedKey = 0;
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
	return key;
}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	200007f4 	.word	0x200007f4
 80024b4:	200007b4 	.word	0x200007b4

080024b8 <Start_Timer_sec>:

void Start_Timer_sec()
{
	Timer_Sec = 0;
 80024b8:	2200      	movs	r2, #0
 80024ba:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <Start_Timer_sec+0x10>)
 80024bc:	601a      	str	r2, [r3, #0]
	Status_Timer_Sec = 1;
 80024be:	2201      	movs	r2, #1
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <Start_Timer_sec+0x14>)
 80024c2:	701a      	strb	r2, [r3, #0]
}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	200007e0 	.word	0x200007e0
 80024cc:	200007ba 	.word	0x200007ba

080024d0 <ClockOnLCD_noSec>:
	if (strlen1(string)<2) lcd_out("0",1);
	lcd_out(string,1);

}
void ClockOnLCD_noSec (uint32_t time)
{
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4604      	mov	r4, r0
	char *string;
	//(" ",1);
	string = itoa(time/3600);
 80024d4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80024d8:	fbb4 f0f0 	udiv	r0, r4, r0
 80024dc:	f7fe fec4 	bl	8001268 <itoa>
 80024e0:	4605      	mov	r5, r0
	if (strlen1(string)<2) lcd_out("0",1);
 80024e2:	f7fe ffa7 	bl	8001434 <strlen1>
 80024e6:	2801      	cmp	r0, #1
 80024e8:	d803      	bhi.n	80024f2 <ClockOnLCD_noSec+0x22>
 80024ea:	2101      	movs	r1, #1
 80024ec:	4811      	ldr	r0, [pc, #68]	; (8002534 <ClockOnLCD_noSec+0x64>)
 80024ee:	f7ff fa6f 	bl	80019d0 <lcd_out>
	lcd_out(string,1);
 80024f2:	2101      	movs	r1, #1
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7ff fa6b 	bl	80019d0 <lcd_out>

	lcd_out(":",1);
 80024fa:	2101      	movs	r1, #1
 80024fc:	480e      	ldr	r0, [pc, #56]	; (8002538 <ClockOnLCD_noSec+0x68>)
 80024fe:	f7ff fa67 	bl	80019d0 <lcd_out>
	string = itoa((time/60)%60);
 8002502:	233c      	movs	r3, #60	; 0x3c
 8002504:	fbb4 f4f3 	udiv	r4, r4, r3
 8002508:	fbb4 f0f3 	udiv	r0, r4, r3
 800250c:	fb03 4010 	mls	r0, r3, r0, r4
 8002510:	f7fe feaa 	bl	8001268 <itoa>
 8002514:	4604      	mov	r4, r0
	if (strlen1(string)<2) lcd_out("0",1);
 8002516:	f7fe ff8d 	bl	8001434 <strlen1>
 800251a:	2801      	cmp	r0, #1
 800251c:	d803      	bhi.n	8002526 <ClockOnLCD_noSec+0x56>
 800251e:	2101      	movs	r1, #1
 8002520:	4804      	ldr	r0, [pc, #16]	; (8002534 <ClockOnLCD_noSec+0x64>)
 8002522:	f7ff fa55 	bl	80019d0 <lcd_out>
	lcd_out(string,1);
 8002526:	4620      	mov	r0, r4


}
 8002528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_out(string,1);
 800252c:	2101      	movs	r1, #1
 800252e:	f7ff ba4f 	b.w	80019d0 <lcd_out>
 8002532:	bf00      	nop
 8002534:	0800626f 	.word	0x0800626f
 8002538:	080063ed 	.word	0x080063ed

0800253c <OUT_OFF>:
*/

void OUT_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BR1;//ON-OFF OUT
 800253c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <OUT_OFF+0x24>)
 8002542:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1

	GPIOA->BSRR =  GPIO_BSRR_BR8;//led out on/off
 8002544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002548:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800254c:	611a      	str	r2, [r3, #16]

	On_off = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <OUT_OFF+0x28>)
 8002552:	7013      	strb	r3, [r2, #0]
   	//Print_to_USART1_d(On_off,"Select OFF:",0);
	Status_Out = 0;
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <OUT_OFF+0x2c>)
 8002556:	7013      	strb	r3, [r2, #0]
	DisChargeStatusForTimer = 0;
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <OUT_OFF+0x30>)
 800255a:	7013      	strb	r3, [r2, #0]

}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40010c00 	.word	0x40010c00
 8002564:	200007b2 	.word	0x200007b2
 8002568:	200007b9 	.word	0x200007b9
 800256c:	200007a4 	.word	0x200007a4

08002570 <OUT_ON>:
void OUT_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BS1;//ON-OFF OUT
 8002570:	2202      	movs	r2, #2
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <OUT_ON+0x20>)
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1

	On_off = 1;
   	//Print_to_USART1_d(On_off,"SelectON:",0);
	Status_Out = 1;
	GPIOA->BSRR =  GPIO_BSRR_BS8;//led out on/off
 8002574:	f44f 7180 	mov.w	r1, #256	; 0x100
	GPIOB->BSRR =  GPIO_BSRR_BS1;//ON-OFF OUT
 8002578:	611a      	str	r2, [r3, #16]
	On_off = 1;
 800257a:	2301      	movs	r3, #1
 800257c:	4a05      	ldr	r2, [pc, #20]	; (8002594 <OUT_ON+0x24>)
 800257e:	7013      	strb	r3, [r2, #0]
	Status_Out = 1;
 8002580:	4a05      	ldr	r2, [pc, #20]	; (8002598 <OUT_ON+0x28>)
 8002582:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS8;//led out on/off
 8002584:	4a05      	ldr	r2, [pc, #20]	; (800259c <OUT_ON+0x2c>)
 8002586:	6111      	str	r1, [r2, #16]
	DisChargeStatusForTimer = 1;
 8002588:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <OUT_ON+0x30>)
 800258a:	7013      	strb	r3, [r2, #0]
}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40010c00 	.word	0x40010c00
 8002594:	200007b2 	.word	0x200007b2
 8002598:	200007b9 	.word	0x200007b9
 800259c:	40010800 	.word	0x40010800
 80025a0:	200007a4 	.word	0x200007a4

080025a4 <OUTStateAfterPowerUpFunction>:
    if (OutStateAfterPowerUp ==2)
 80025a4:	4808      	ldr	r0, [pc, #32]	; (80025c8 <OUTStateAfterPowerUpFunction+0x24>)
{
 80025a6:	b508      	push	{r3, lr}
    if (OutStateAfterPowerUp ==2)
 80025a8:	6802      	ldr	r2, [r0, #0]
 80025aa:	2a02      	cmp	r2, #2
 80025ac:	d104      	bne.n	80025b8 <OUTStateAfterPowerUpFunction+0x14>
    	OUT_ON();
 80025ae:	f7ff ffdf 	bl	8002570 <OUT_ON>
    	OutStateAfterPowerUp = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	6003      	str	r3, [r0, #0]
}
 80025b6:	bd08      	pop	{r3, pc}
    if (OutStateAfterPowerUp ==3)
 80025b8:	2a03      	cmp	r2, #3
 80025ba:	d1fc      	bne.n	80025b6 <OUTStateAfterPowerUpFunction+0x12>
    	if (SaveDataWhenPowerOff.OutState==1)
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <OUTStateAfterPowerUpFunction+0x28>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d1f8      	bne.n	80025b6 <OUTStateAfterPowerUpFunction+0x12>
 80025c4:	e7f3      	b.n	80025ae <OUTStateAfterPowerUpFunction+0xa>
 80025c6:	bf00      	nop
 80025c8:	20000274 	.word	0x20000274
 80025cc:	200000f4 	.word	0x200000f4

080025d0 <MenuPowerSupply>:
	EnterInMenu_Status = 1;
 80025d0:	2201      	movs	r2, #1
{
 80025d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	EnterInMenu_Status = 1;
 80025d4:	4b88      	ldr	r3, [pc, #544]	; (80027f8 <MenuPowerSupply+0x228>)
	if (key == KEY_BACK)
 80025d6:	4290      	cmp	r0, r2
{
 80025d8:	4605      	mov	r5, r0
 80025da:	4e88      	ldr	r6, [pc, #544]	; (80027fc <MenuPowerSupply+0x22c>)
	EnterInMenu_Status = 1;
 80025dc:	701a      	strb	r2, [r3, #0]
	if (key == KEY_BACK)
 80025de:	d106      	bne.n	80025ee <MenuPowerSupply+0x1e>
		CountShow--;
 80025e0:	7833      	ldrb	r3, [r6, #0]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM3-1;
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f2c0 809a 	blt.w	8002720 <MenuPowerSupply+0x150>
		CountShow--;
 80025ec:	7033      	strb	r3, [r6, #0]
	if(CountShow == 0)
 80025ee:	f996 3000 	ldrsb.w	r3, [r6]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d163      	bne.n	80026be <MenuPowerSupply+0xee>
		if (key == KEY_NEXT)
 80025f6:	2d02      	cmp	r5, #2
 80025f8:	4f81      	ldr	r7, [pc, #516]	; (8002800 <MenuPowerSupply+0x230>)
 80025fa:	d105      	bne.n	8002608 <MenuPowerSupply+0x38>
			if (On_off == 0)
 80025fc:	783b      	ldrb	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 80c2 	bne.w	8002788 <MenuPowerSupply+0x1b8>
				OUT_ON();
 8002604:	f7ff ffb4 	bl	8002570 <OUT_ON>
		lcd_set_xy(0,0);
 8002608:	2100      	movs	r1, #0
 800260a:	4608      	mov	r0, r1
 800260c:	f7ff f9ce 	bl	80019ac <lcd_set_xy>
		PrintToLCD(itoa_koma(U_PS,2));
 8002610:	4b7c      	ldr	r3, [pc, #496]	; (8002804 <MenuPowerSupply+0x234>)
 8002612:	2102      	movs	r1, #2
 8002614:	8818      	ldrh	r0, [r3, #0]
 8002616:	4c7c      	ldr	r4, [pc, #496]	; (8002808 <MenuPowerSupply+0x238>)
 8002618:	b280      	uxth	r0, r0
 800261a:	f7fe fe9d 	bl	8001358 <itoa_koma>
 800261e:	f7ff fa45 	bl	8001aac <PrintToLCD>
		PrintToLCD("V  ");
 8002622:	487a      	ldr	r0, [pc, #488]	; (800280c <MenuPowerSupply+0x23c>)
 8002624:	f7ff fa42 	bl	8001aac <PrintToLCD>
		lcd_set_xy(7,0);
 8002628:	2100      	movs	r1, #0
 800262a:	2007      	movs	r0, #7
 800262c:	f7ff f9be 	bl	80019ac <lcd_set_xy>
		if (On_off == 1)
 8002630:	783b      	ldrb	r3, [r7, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	f040 80ab 	bne.w	800278e <MenuPowerSupply+0x1be>
			if (Current < 1000)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800263e:	da07      	bge.n	8002650 <MenuPowerSupply+0x80>
				PrintToLCD(itoa(Current));
 8002640:	6820      	ldr	r0, [r4, #0]
 8002642:	f7fe fe11 	bl	8001268 <itoa>
 8002646:	f7ff fa31 	bl	8001aac <PrintToLCD>
				PrintToLCD("uA    ");
 800264a:	4871      	ldr	r0, [pc, #452]	; (8002810 <MenuPowerSupply+0x240>)
 800264c:	f7ff fa2e 	bl	8001aac <PrintToLCD>
			if ((Current >= 1000)&&Current < 10000 )
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002656:	db10      	blt.n	800267a <MenuPowerSupply+0xaa>
 8002658:	f242 730f 	movw	r3, #9999	; 0x270f
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	dc0b      	bgt.n	800267a <MenuPowerSupply+0xaa>
				PrintToLCD(itoa_koma(Current/100,1));
 8002662:	2364      	movs	r3, #100	; 0x64
 8002664:	6820      	ldr	r0, [r4, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	fb90 f0f3 	sdiv	r0, r0, r3
 800266c:	f7fe fe74 	bl	8001358 <itoa_koma>
 8002670:	f7ff fa1c 	bl	8001aac <PrintToLCD>
				PrintToLCD("mA    ");
 8002674:	4867      	ldr	r0, [pc, #412]	; (8002814 <MenuPowerSupply+0x244>)
 8002676:	f7ff fa19 	bl	8001aac <PrintToLCD>
			if (Current >= 10000)
 800267a:	f242 730f 	movw	r3, #9999	; 0x270f
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	dd0b      	ble.n	800269c <MenuPowerSupply+0xcc>
				PrintToLCD(itoa(Current/1000));
 8002684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002688:	6820      	ldr	r0, [r4, #0]
 800268a:	fb90 f0f3 	sdiv	r0, r0, r3
 800268e:	f7fe fdeb 	bl	8001268 <itoa>
 8002692:	f7ff fa0b 	bl	8001aac <PrintToLCD>
				PrintToLCD("mA    ");
 8002696:	485f      	ldr	r0, [pc, #380]	; (8002814 <MenuPowerSupply+0x244>)
			PrintToLCD("uA     ");
 8002698:	f7ff fa08 	bl	8001aac <PrintToLCD>
		if (On_off ==0)
 800269c:	783b      	ldrb	r3, [r7, #0]
			lcd_set_xy(7,1);
 800269e:	2101      	movs	r1, #1
 80026a0:	2007      	movs	r0, #7
 80026a2:	4c5d      	ldr	r4, [pc, #372]	; (8002818 <MenuPowerSupply+0x248>)
		if (On_off ==0)
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d179      	bne.n	800279c <MenuPowerSupply+0x1cc>
			lcd_set_xy(7,1);
 80026a8:	f7ff f980 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(0,1);
 80026ac:	2101      	movs	r1, #1
 80026ae:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 80026b0:	f7ff f9a4 	bl	80019fc <LcdOutbyNumber>
		if (Blink_message_counter>10)
 80026b4:	7823      	ldrb	r3, [r4, #0]
 80026b6:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 80026b8:	bf84      	itt	hi
 80026ba:	2300      	movhi	r3, #0
 80026bc:	7023      	strbhi	r3, [r4, #0]
	if(CountShow == 1)
 80026be:	f996 3000 	ldrsb.w	r3, [r6]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d12e      	bne.n	8002724 <MenuPowerSupply+0x154>
		if (key == KEY_NEXT)
 80026c6:	2d02      	cmp	r5, #2
		lcd_set_xy(0,0);
 80026c8:	f04f 0100 	mov.w	r1, #0
			CurrentCapacity5ms = 0;
 80026cc:	bf08      	it	eq
 80026ce:	2300      	moveq	r3, #0
 80026d0:	4f52      	ldr	r7, [pc, #328]	; (800281c <MenuPowerSupply+0x24c>)
 80026d2:	4c53      	ldr	r4, [pc, #332]	; (8002820 <MenuPowerSupply+0x250>)
		lcd_set_xy(0,0);
 80026d4:	4608      	mov	r0, r1
			CurrentCapacity5ms = 0;
 80026d6:	bf04      	itt	eq
 80026d8:	603b      	streq	r3, [r7, #0]
			DischargeTimeSec = 0;
 80026da:	6023      	streq	r3, [r4, #0]
		lcd_set_xy(0,0);
 80026dc:	f7ff f966 	bl	80019ac <lcd_set_xy>
		PrintToLCD("5ms ");
 80026e0:	4850      	ldr	r0, [pc, #320]	; (8002824 <MenuPowerSupply+0x254>)
 80026e2:	f7ff f9e3 	bl	8001aac <PrintToLCD>
		if ((CurrentCapacity5ms/3600)<1000)
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <MenuPowerSupply+0x258>)
			PrintToLCD(itoa(CurrentCapacity5ms/3600));
 80026ea:	6838      	ldr	r0, [r7, #0]
		if ((CurrentCapacity5ms/3600)<1000)
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d25d      	bcs.n	80027ac <MenuPowerSupply+0x1dc>
			PrintToLCD(itoa(CurrentCapacity5ms/3600));
 80026f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80026f8:	f7fe fdb6 	bl	8001268 <itoa>
 80026fc:	f7ff f9d6 	bl	8001aac <PrintToLCD>
			PrintToLCD("uAh ");
 8002700:	484a      	ldr	r0, [pc, #296]	; (800282c <MenuPowerSupply+0x25c>)
			PrintToLCD("mAh ");
 8002702:	f7ff f9d3 	bl	8001aac <PrintToLCD>
		if (DischargeTimeSec<7200)
 8002706:	6823      	ldr	r3, [r4, #0]
			PrintToLCD(itoa(DischargeTimeSec));
 8002708:	6820      	ldr	r0, [r4, #0]
		if (DischargeTimeSec<7200)
 800270a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800270e:	d255      	bcs.n	80027bc <MenuPowerSupply+0x1ec>
			PrintToLCD(itoa(DischargeTimeSec));
 8002710:	f7fe fdaa 	bl	8001268 <itoa>
 8002714:	f7ff f9ca 	bl	8001aac <PrintToLCD>
			PrintToLCD("s            ");
 8002718:	4845      	ldr	r0, [pc, #276]	; (8002830 <MenuPowerSupply+0x260>)
			PrintToLCD("h            ");
 800271a:	f7ff f9c7 	bl	8001aac <PrintToLCD>
 800271e:	e001      	b.n	8002724 <MenuPowerSupply+0x154>
		if (CountShow<0) CountShow=MAXITEM3-1;
 8002720:	2302      	movs	r3, #2
 8002722:	7033      	strb	r3, [r6, #0]
	if(CountShow == 2)
 8002724:	f996 3000 	ldrsb.w	r3, [r6]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d163      	bne.n	80027f4 <MenuPowerSupply+0x224>
		if (key == KEY_NEXT)
 800272c:	2d02      	cmp	r5, #2
		lcd_set_xy(0,0);
 800272e:	f04f 0100 	mov.w	r1, #0
			CurrentConsumption1s = 0;
 8002732:	bf08      	it	eq
 8002734:	2300      	moveq	r3, #0
 8002736:	4d3f      	ldr	r5, [pc, #252]	; (8002834 <MenuPowerSupply+0x264>)
 8002738:	4c39      	ldr	r4, [pc, #228]	; (8002820 <MenuPowerSupply+0x250>)
		lcd_set_xy(0,0);
 800273a:	4608      	mov	r0, r1
			CurrentConsumption1s = 0;
 800273c:	bf04      	itt	eq
 800273e:	602b      	streq	r3, [r5, #0]
			DischargeTimeSec = 0;
 8002740:	6023      	streq	r3, [r4, #0]
		lcd_set_xy(0,0);
 8002742:	f7ff f933 	bl	80019ac <lcd_set_xy>
		PrintToLCD("1s ");
 8002746:	483c      	ldr	r0, [pc, #240]	; (8002838 <MenuPowerSupply+0x268>)
 8002748:	f7ff f9b0 	bl	8001aac <PrintToLCD>
		if ((CurrentConsumption1s/3600)<1000)
 800274c:	682a      	ldr	r2, [r5, #0]
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <MenuPowerSupply+0x258>)
			PrintToLCD(itoa(CurrentConsumption1s/3600));
 8002750:	6828      	ldr	r0, [r5, #0]
		if ((CurrentConsumption1s/3600)<1000)
 8002752:	429a      	cmp	r2, r3
 8002754:	d23c      	bcs.n	80027d0 <MenuPowerSupply+0x200>
			PrintToLCD(itoa(CurrentConsumption1s/3600));
 8002756:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800275a:	fbb0 f0f3 	udiv	r0, r0, r3
 800275e:	f7fe fd83 	bl	8001268 <itoa>
 8002762:	f7ff f9a3 	bl	8001aac <PrintToLCD>
			PrintToLCD("uAh ");
 8002766:	4831      	ldr	r0, [pc, #196]	; (800282c <MenuPowerSupply+0x25c>)
			PrintToLCD("mAh ");
 8002768:	f7ff f9a0 	bl	8001aac <PrintToLCD>
		if (DischargeTimeSec<7200)
 800276c:	6823      	ldr	r3, [r4, #0]
			PrintToLCD(itoa(DischargeTimeSec));
 800276e:	6820      	ldr	r0, [r4, #0]
		if (DischargeTimeSec<7200)
 8002770:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002774:	d234      	bcs.n	80027e0 <MenuPowerSupply+0x210>
			PrintToLCD(itoa(DischargeTimeSec));
 8002776:	f7fe fd77 	bl	8001268 <itoa>
 800277a:	f7ff f997 	bl	8001aac <PrintToLCD>
			PrintToLCD("s            ");
 800277e:	482c      	ldr	r0, [pc, #176]	; (8002830 <MenuPowerSupply+0x260>)
}
 8002780:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			PrintToLCD("h            ");
 8002784:	f7ff b992 	b.w	8001aac <PrintToLCD>
				OUT_OFF();
 8002788:	f7ff fed8 	bl	800253c <OUT_OFF>
 800278c:	e73c      	b.n	8002608 <MenuPowerSupply+0x38>
			PrintToLCD(itoa(Current));
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	f7fe fd6a 	bl	8001268 <itoa>
 8002794:	f7ff f98a 	bl	8001aac <PrintToLCD>
			PrintToLCD("uA     ");
 8002798:	4828      	ldr	r0, [pc, #160]	; (800283c <MenuPowerSupply+0x26c>)
 800279a:	e77d      	b.n	8002698 <MenuPowerSupply+0xc8>
			if (Blink_message_counter<=5)
 800279c:	7823      	ldrb	r3, [r4, #0]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d982      	bls.n	80026a8 <MenuPowerSupply+0xd8>
					lcd_set_xy(7,1);
 80027a2:	f7ff f903 	bl	80019ac <lcd_set_xy>
					LcdOutbyNumber(1,1);
 80027a6:	2101      	movs	r1, #1
 80027a8:	4608      	mov	r0, r1
 80027aa:	e781      	b.n	80026b0 <MenuPowerSupply+0xe0>
			PrintToLCD(itoa(CurrentCapacity5ms/3600000));
 80027ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80027b0:	f7fe fd5a 	bl	8001268 <itoa>
 80027b4:	f7ff f97a 	bl	8001aac <PrintToLCD>
			PrintToLCD("mAh ");
 80027b8:	4821      	ldr	r0, [pc, #132]	; (8002840 <MenuPowerSupply+0x270>)
 80027ba:	e7a2      	b.n	8002702 <MenuPowerSupply+0x132>
			PrintToLCD(itoa(DischargeTimeSec/3600));
 80027bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80027c4:	f7fe fd50 	bl	8001268 <itoa>
 80027c8:	f7ff f970 	bl	8001aac <PrintToLCD>
			PrintToLCD("h            ");
 80027cc:	481d      	ldr	r0, [pc, #116]	; (8002844 <MenuPowerSupply+0x274>)
 80027ce:	e7a4      	b.n	800271a <MenuPowerSupply+0x14a>
			PrintToLCD(itoa(CurrentConsumption1s/3600000));
 80027d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80027d4:	f7fe fd48 	bl	8001268 <itoa>
 80027d8:	f7ff f968 	bl	8001aac <PrintToLCD>
			PrintToLCD("mAh ");
 80027dc:	4818      	ldr	r0, [pc, #96]	; (8002840 <MenuPowerSupply+0x270>)
 80027de:	e7c3      	b.n	8002768 <MenuPowerSupply+0x198>
			PrintToLCD(itoa(DischargeTimeSec/3600));
 80027e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80027e8:	f7fe fd3e 	bl	8001268 <itoa>
 80027ec:	f7ff f95e 	bl	8001aac <PrintToLCD>
			PrintToLCD("h            ");
 80027f0:	4814      	ldr	r0, [pc, #80]	; (8002844 <MenuPowerSupply+0x274>)
 80027f2:	e7c5      	b.n	8002780 <MenuPowerSupply+0x1b0>
}
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200007b0 	.word	0x200007b0
 80027fc:	2000079d 	.word	0x2000079d
 8002800:	200007b2 	.word	0x200007b2
 8002804:	20000884 	.word	0x20000884
 8002808:	200002b4 	.word	0x200002b4
 800280c:	08006271 	.word	0x08006271
 8002810:	08006275 	.word	0x08006275
 8002814:	0800627c 	.word	0x0800627c
 8002818:	20000795 	.word	0x20000795
 800281c:	200002b8 	.word	0x200002b8
 8002820:	200007a8 	.word	0x200007a8
 8002824:	0800628b 	.word	0x0800628b
 8002828:	0036ee80 	.word	0x0036ee80
 800282c:	08006290 	.word	0x08006290
 8002830:	0800629a 	.word	0x0800629a
 8002834:	200007a0 	.word	0x200007a0
 8002838:	080062b6 	.word	0x080062b6
 800283c:	08006283 	.word	0x08006283
 8002840:	08006295 	.word	0x08006295
 8002844:	080062a8 	.word	0x080062a8

08002848 <MenuCalibration_CURRENT_Out>:
	EnterInMenu_Status=1;
 8002848:	2201      	movs	r2, #1
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <MenuCalibration_CURRENT_Out+0x58>)
{
 800284c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800284e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002850:	f7ff fe8e 	bl	8002570 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationForCurrent_mA1++;
 8002854:	2802      	cmp	r0, #2
 8002856:	4c13      	ldr	r4, [pc, #76]	; (80028a4 <MenuCalibration_CURRENT_Out+0x5c>)
 8002858:	d11d      	bne.n	8002896 <MenuCalibration_CURRENT_Out+0x4e>
 800285a:	69a3      	ldr	r3, [r4, #24]
 800285c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationForCurrent_mA1--;
 800285e:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 8002860:	2100      	movs	r1, #0
 8002862:	4608      	mov	r0, r1
 8002864:	f7ff f8a2 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationForCurrent_mA1));
 8002868:	69a0      	ldr	r0, [r4, #24]
 800286a:	f7fe fcfd 	bl	8001268 <itoa>
 800286e:	f7ff f91d 	bl	8001aac <PrintToLCD>
	PrintToLCD("   ");
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <MenuCalibration_CURRENT_Out+0x60>)
 8002874:	f7ff f91a 	bl	8001aac <PrintToLCD>
	lcd_set_xy(0,1);
 8002878:	2101      	movs	r1, #1
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff f896 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <MenuCalibration_CURRENT_Out+0x64>)
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	f7fe fcf0 	bl	8001268 <itoa>
 8002888:	f7ff f910 	bl	8001aac <PrintToLCD>
}
 800288c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 8002890:	4807      	ldr	r0, [pc, #28]	; (80028b0 <MenuCalibration_CURRENT_Out+0x68>)
 8002892:	f7ff b90b 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationForCurrent_mA1--;
 8002896:	2801      	cmp	r0, #1
 8002898:	d1e2      	bne.n	8002860 <MenuCalibration_CURRENT_Out+0x18>
 800289a:	69a3      	ldr	r3, [r4, #24]
 800289c:	3b01      	subs	r3, #1
 800289e:	e7de      	b.n	800285e <MenuCalibration_CURRENT_Out+0x16>
 80028a0:	200007b0 	.word	0x200007b0
 80028a4:	20000004 	.word	0x20000004
 80028a8:	0800625a 	.word	0x0800625a
 80028ac:	200002b4 	.word	0x200002b4
 80028b0:	080062ba 	.word	0x080062ba

080028b4 <MenuCalibration_VoltagePS>:
	EnterInMenu_Status=1;
 80028b4:	2201      	movs	r2, #1
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MenuCalibration_VoltagePS+0x5c>)
{
 80028b8:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 80028ba:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80028bc:	f7ff fe58 	bl	8002570 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage++;
 80028c0:	2802      	cmp	r0, #2
 80028c2:	4c14      	ldr	r4, [pc, #80]	; (8002914 <MenuCalibration_VoltagePS+0x60>)
 80028c4:	d11f      	bne.n	8002906 <MenuCalibration_VoltagePS+0x52>
 80028c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028c8:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 80028ca:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 80028cc:	2100      	movs	r1, #0
 80028ce:	4608      	mov	r0, r1
 80028d0:	f7ff f86c 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage));
 80028d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028d6:	f7fe fcc7 	bl	8001268 <itoa>
 80028da:	f7ff f8e7 	bl	8001aac <PrintToLCD>
	PrintToLCD("   ");
 80028de:	480e      	ldr	r0, [pc, #56]	; (8002918 <MenuCalibration_VoltagePS+0x64>)
 80028e0:	f7ff f8e4 	bl	8001aac <PrintToLCD>
	lcd_set_xy(0,1);
 80028e4:	2101      	movs	r1, #1
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7ff f860 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa_koma(U_PS,2));
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <MenuCalibration_VoltagePS+0x68>)
 80028ee:	2102      	movs	r1, #2
 80028f0:	8818      	ldrh	r0, [r3, #0]
 80028f2:	b280      	uxth	r0, r0
 80028f4:	f7fe fd30 	bl	8001358 <itoa_koma>
 80028f8:	f7ff f8d8 	bl	8001aac <PrintToLCD>
}
 80028fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <MenuCalibration_VoltagePS+0x6c>)
 8002902:	f7ff b8d3 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 8002906:	2801      	cmp	r0, #1
 8002908:	d1e0      	bne.n	80028cc <MenuCalibration_VoltagePS+0x18>
 800290a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	e7dc      	b.n	80028ca <MenuCalibration_VoltagePS+0x16>
 8002910:	200007b0 	.word	0x200007b0
 8002914:	20000004 	.word	0x20000004
 8002918:	0800625a 	.word	0x0800625a
 800291c:	20000884 	.word	0x20000884
 8002920:	08006271 	.word	0x08006271

08002924 <MenuCalibration_VoltageOut>:
	EnterInMenu_Status=1;
 8002924:	2201      	movs	r2, #1
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <MenuCalibration_VoltageOut+0x5c>)
{
 8002928:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800292a:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 800292c:	f7ff fe20 	bl	8002570 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage1++;
 8002930:	2802      	cmp	r0, #2
 8002932:	4c14      	ldr	r4, [pc, #80]	; (8002984 <MenuCalibration_VoltageOut+0x60>)
 8002934:	d11f      	bne.n	8002976 <MenuCalibration_VoltageOut+0x52>
 8002936:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002938:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage1--;
 800293a:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 800293c:	2100      	movs	r1, #0
 800293e:	4608      	mov	r0, r1
 8002940:	f7ff f834 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage1));
 8002944:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002946:	f7fe fc8f 	bl	8001268 <itoa>
 800294a:	f7ff f8af 	bl	8001aac <PrintToLCD>
	PrintToLCD("   ");
 800294e:	480e      	ldr	r0, [pc, #56]	; (8002988 <MenuCalibration_VoltageOut+0x64>)
 8002950:	f7ff f8ac 	bl	8001aac <PrintToLCD>
	lcd_set_xy(0,1);
 8002954:	2101      	movs	r1, #1
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff f828 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MenuCalibration_VoltageOut+0x68>)
 800295e:	2102      	movs	r1, #2
 8002960:	8818      	ldrh	r0, [r3, #0]
 8002962:	b280      	uxth	r0, r0
 8002964:	f7fe fcf8 	bl	8001358 <itoa_koma>
 8002968:	f7ff f8a0 	bl	8001aac <PrintToLCD>
}
 800296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002970:	4807      	ldr	r0, [pc, #28]	; (8002990 <MenuCalibration_VoltageOut+0x6c>)
 8002972:	f7ff b89b 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage1--;
 8002976:	2801      	cmp	r0, #1
 8002978:	d1e0      	bne.n	800293c <MenuCalibration_VoltageOut+0x18>
 800297a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800297c:	3b01      	subs	r3, #1
 800297e:	e7dc      	b.n	800293a <MenuCalibration_VoltageOut+0x16>
 8002980:	200007b0 	.word	0x200007b0
 8002984:	20000004 	.word	0x20000004
 8002988:	0800625a 	.word	0x0800625a
 800298c:	2000087c 	.word	0x2000087c
 8002990:	08006271 	.word	0x08006271

08002994 <MenuCalibration_VoltageIn>:
	EnterInMenu_Status=1;
 8002994:	2201      	movs	r2, #1
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <MenuCalibration_VoltageIn+0x5c>)
{
 8002998:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800299a:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 800299c:	f7ff fde8 	bl	8002570 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage2++;
 80029a0:	2802      	cmp	r0, #2
 80029a2:	4c14      	ldr	r4, [pc, #80]	; (80029f4 <MenuCalibration_VoltageIn+0x60>)
 80029a4:	d11f      	bne.n	80029e6 <MenuCalibration_VoltageIn+0x52>
 80029a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029a8:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 80029aa:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 80029ac:	2100      	movs	r1, #0
 80029ae:	4608      	mov	r0, r1
 80029b0:	f7fe fffc 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage2));
 80029b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029b6:	f7fe fc57 	bl	8001268 <itoa>
 80029ba:	f7ff f877 	bl	8001aac <PrintToLCD>
	PrintToLCD("   ");
 80029be:	480e      	ldr	r0, [pc, #56]	; (80029f8 <MenuCalibration_VoltageIn+0x64>)
 80029c0:	f7ff f874 	bl	8001aac <PrintToLCD>
	lcd_set_xy(0,1);
 80029c4:	2101      	movs	r1, #1
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe fff0 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa_koma(U_IN,2));
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <MenuCalibration_VoltageIn+0x68>)
 80029ce:	2102      	movs	r1, #2
 80029d0:	8818      	ldrh	r0, [r3, #0]
 80029d2:	b280      	uxth	r0, r0
 80029d4:	f7fe fcc0 	bl	8001358 <itoa_koma>
 80029d8:	f7ff f868 	bl	8001aac <PrintToLCD>
}
 80029dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 80029e0:	4807      	ldr	r0, [pc, #28]	; (8002a00 <MenuCalibration_VoltageIn+0x6c>)
 80029e2:	f7ff b863 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 80029e6:	2801      	cmp	r0, #1
 80029e8:	d1e0      	bne.n	80029ac <MenuCalibration_VoltageIn+0x18>
 80029ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ec:	3b01      	subs	r3, #1
 80029ee:	e7dc      	b.n	80029aa <MenuCalibration_VoltageIn+0x16>
 80029f0:	200007b0 	.word	0x200007b0
 80029f4:	20000004 	.word	0x20000004
 80029f8:	0800625a 	.word	0x0800625a
 80029fc:	20000868 	.word	0x20000868
 8002a00:	08006271 	.word	0x08006271

08002a04 <MenuCalibration_Resist_Comp_5V1A>:
		EnterInMenu_Status=1;
 8002a04:	2201      	movs	r2, #1
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <MenuCalibration_Resist_Comp_5V1A+0xa4>)
{
 8002a08:	b570      	push	{r4, r5, r6, lr}
		EnterInMenu_Status=1;
 8002a0a:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 8002a0c:	f7ff fdb0 	bl	8002570 <OUT_ON>
		if (key == KEY_NEXT) ResistanceComp_Voltage++;
 8002a10:	2802      	cmp	r0, #2
 8002a12:	4e26      	ldr	r6, [pc, #152]	; (8002aac <MenuCalibration_Resist_Comp_5V1A+0xa8>)
 8002a14:	d140      	bne.n	8002a98 <MenuCalibration_Resist_Comp_5V1A+0x94>
 8002a16:	8833      	ldrh	r3, [r6, #0]
 8002a18:	3301      	adds	r3, #1
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002a1a:	8033      	strh	r3, [r6, #0]
		lcd_set_xy(0,0);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4608      	mov	r0, r1
 8002a20:	f7fe ffc4 	bl	80019ac <lcd_set_xy>
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002a24:	2102      	movs	r1, #2
 8002a26:	8830      	ldrh	r0, [r6, #0]
 8002a28:	f7fe fc96 	bl	8001358 <itoa_koma>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a2c:	4d20      	ldr	r5, [pc, #128]	; (8002ab0 <MenuCalibration_Resist_Comp_5V1A+0xac>)
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002a2e:	4c21      	ldr	r4, [pc, #132]	; (8002ab4 <MenuCalibration_Resist_Comp_5V1A+0xb0>)
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002a30:	f7ff f83c 	bl	8001aac <PrintToLCD>
		PrintToLCD("V ");
 8002a34:	4820      	ldr	r0, [pc, #128]	; (8002ab8 <MenuCalibration_Resist_Comp_5V1A+0xb4>)
 8002a36:	f7ff f839 	bl	8001aac <PrintToLCD>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a3a:	882b      	ldrh	r3, [r5, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002a3c:	6822      	ldr	r2, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a3e:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002a40:	2a00      	cmp	r2, #0
 8002a42:	dd2e      	ble.n	8002aa2 <MenuCalibration_Resist_Comp_5V1A+0x9e>
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a44:	f242 7010 	movw	r0, #10000	; 0x2710
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a48:	8832      	ldrh	r2, [r6, #0]
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a52:	4343      	muls	r3, r0
 8002a54:	6822      	ldr	r2, [r4, #0]
 8002a56:	fb93 f0f2 	sdiv	r0, r3, r2
 8002a5a:	4e18      	ldr	r6, [pc, #96]	; (8002abc <MenuCalibration_Resist_Comp_5V1A+0xb8>)
 8002a5c:	6430      	str	r0, [r6, #64]	; 0x40
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8002a5e:	f7fe fc03 	bl	8001268 <itoa>
 8002a62:	f7ff f823 	bl	8001aac <PrintToLCD>
		PrintToLCD("mOm       ");
 8002a66:	4816      	ldr	r0, [pc, #88]	; (8002ac0 <MenuCalibration_Resist_Comp_5V1A+0xbc>)
 8002a68:	f7ff f820 	bl	8001aac <PrintToLCD>
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <MenuCalibration_Resist_Comp_5V1A+0xc0>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	882a      	ldrh	r2, [r5, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002a72:	6821      	ldr	r1, [r4, #0]
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a74:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002a76:	2900      	cmp	r1, #0
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a78:	b292      	uxth	r2, r2
 8002a7a:	bfc1      	itttt	gt
 8002a7c:	1a9b      	subgt	r3, r3, r2
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a7e:	f242 7210 	movwgt	r2, #10000	; 0x2710
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a82:	b21b      	sxthgt	r3, r3
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a84:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
 8002a88:	bfc5      	ittet	gt
 8002a8a:	4353      	mulgt	r3, r2
 8002a8c:	6821      	ldrgt	r1, [r4, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002a8e:	230a      	movle	r3, #10
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a90:	fb93 f3f1 	sdivgt	r3, r3, r1
 8002a94:	64b3      	str	r3, [r6, #72]	; 0x48
}
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002a98:	2801      	cmp	r0, #1
 8002a9a:	d1bf      	bne.n	8002a1c <MenuCalibration_Resist_Comp_5V1A+0x18>
 8002a9c:	8833      	ldrh	r3, [r6, #0]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	e7bb      	b.n	8002a1a <MenuCalibration_Resist_Comp_5V1A+0x16>
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002aa2:	2046      	movs	r0, #70	; 0x46
 8002aa4:	e7d9      	b.n	8002a5a <MenuCalibration_Resist_Comp_5V1A+0x56>
 8002aa6:	bf00      	nop
 8002aa8:	200007b0 	.word	0x200007b0
 8002aac:	20000278 	.word	0x20000278
 8002ab0:	200002c0 	.word	0x200002c0
 8002ab4:	200002b4 	.word	0x200002b4
 8002ab8:	080061c2 	.word	0x080061c2
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	080062bf 	.word	0x080062bf
 8002ac4:	20000884 	.word	0x20000884

08002ac8 <LOAD_ON>:
void LOAD_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	//GPIOB->BSRR =  GPIO_BSRR_BS1; //load1
	On_off = 1;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	4a04      	ldr	r2, [pc, #16]	; (8002adc <LOAD_ON+0x14>)
 8002acc:	7013      	strb	r3, [r2, #0]
	Status_Load = 1;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <LOAD_ON+0x18>)
 8002ad0:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS11;//led load on/off
 8002ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad6:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <LOAD_ON+0x1c>)
 8002ad8:	611a      	str	r2, [r3, #16]
}
 8002ada:	4770      	bx	lr
 8002adc:	200007b2 	.word	0x200007b2
 8002ae0:	200007b8 	.word	0x200007b8
 8002ae4:	40010800 	.word	0x40010800

08002ae8 <discharge>:
{
 8002ae8:	b508      	push	{r3, lr}
	OUT_OFF();
 8002aea:	f7ff fd27 	bl	800253c <OUT_OFF>
}
 8002aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOAD_ON();
 8002af2:	f7ff bfe9 	b.w	8002ac8 <LOAD_ON>
	...

08002af8 <MenuCalibration_CURRENT_Load>:
	EnterInMenu_Status=1;
 8002af8:	2201      	movs	r2, #1
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <MenuCalibration_CURRENT_Load+0x58>)
{
 8002afc:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002afe:	701a      	strb	r2, [r3, #0]
	discharge();
 8002b00:	f7ff fff2 	bl	8002ae8 <discharge>
	if (key == KEY_NEXT) CalibrationData.CalibrationForCurrent_mkA1++;
 8002b04:	2802      	cmp	r0, #2
 8002b06:	4c13      	ldr	r4, [pc, #76]	; (8002b54 <MenuCalibration_CURRENT_Load+0x5c>)
 8002b08:	d11d      	bne.n	8002b46 <MenuCalibration_CURRENT_Load+0x4e>
 8002b0a:	6a23      	ldr	r3, [r4, #32]
 8002b0c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationForCurrent_mkA1--;
 8002b0e:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 8002b10:	2100      	movs	r1, #0
 8002b12:	4608      	mov	r0, r1
 8002b14:	f7fe ff4a 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationForCurrent_mkA1));
 8002b18:	6a20      	ldr	r0, [r4, #32]
 8002b1a:	f7fe fba5 	bl	8001268 <itoa>
 8002b1e:	f7fe ffc5 	bl	8001aac <PrintToLCD>
	PrintToLCD("   ");
 8002b22:	480d      	ldr	r0, [pc, #52]	; (8002b58 <MenuCalibration_CURRENT_Load+0x60>)
 8002b24:	f7fe ffc2 	bl	8001aac <PrintToLCD>
	lcd_set_xy(0,1);
 8002b28:	2101      	movs	r1, #1
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe ff3e 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <MenuCalibration_CURRENT_Load+0x64>)
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	f7fe fb98 	bl	8001268 <itoa>
 8002b38:	f7fe ffb8 	bl	8001aac <PrintToLCD>
}
 8002b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 8002b40:	4807      	ldr	r0, [pc, #28]	; (8002b60 <MenuCalibration_CURRENT_Load+0x68>)
 8002b42:	f7fe bfb3 	b.w	8001aac <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationForCurrent_mkA1--;
 8002b46:	2801      	cmp	r0, #1
 8002b48:	d1e2      	bne.n	8002b10 <MenuCalibration_CURRENT_Load+0x18>
 8002b4a:	6a23      	ldr	r3, [r4, #32]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	e7de      	b.n	8002b0e <MenuCalibration_CURRENT_Load+0x16>
 8002b50:	200007b0 	.word	0x200007b0
 8002b54:	20000004 	.word	0x20000004
 8002b58:	0800625a 	.word	0x0800625a
 8002b5c:	200002b4 	.word	0x200002b4
 8002b60:	080062ba 	.word	0x080062ba

08002b64 <discharge1>:
{
 8002b64:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=2)
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <discharge1+0x2c>)
 8002b68:	f993 2000 	ldrsb.w	r2, [r3]
 8002b6c:	2a02      	cmp	r2, #2
 8002b6e:	d00d      	beq.n	8002b8c <discharge1+0x28>
		ChargeDischargeState = 2;
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
		OUT_OFF();
 8002b74:	f7ff fce2 	bl	800253c <OUT_OFF>
		LOAD_ON();
 8002b78:	f7ff ffa6 	bl	8002ac8 <LOAD_ON>
		TimerForReadyMeasurement_ms = 0;
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <discharge1+0x30>)
		Print_to_USART1("DIsCharge");
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <discharge1+0x34>)
		TimerForReadyMeasurement_ms = 0;
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Print_to_USART1("DIsCharge");
 8002b88:	f002 bd1a 	b.w	80055c0 <Print_to_USART1>
}
 8002b8c:	bd08      	pop	{r3, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000796 	.word	0x20000796
 8002b94:	200007dc 	.word	0x200007dc
 8002b98:	080062ca 	.word	0x080062ca

08002b9c <LOAD_OFF>:
void LOAD_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	On_off = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <LOAD_OFF+0x1c>)
 8002ba0:	7013      	strb	r3, [r2, #0]
	Status_Load = 0;
 8002ba2:	4a06      	ldr	r2, [pc, #24]	; (8002bbc <LOAD_OFF+0x20>)
 8002ba4:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BR11;//led load on/off
 8002ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002baa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bae:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002bb2:	611a      	str	r2, [r3, #16]
}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	200007b2 	.word	0x200007b2
 8002bbc:	200007b8 	.word	0x200007b8

08002bc0 <MenuLoad>:
	EnterInMenu_Status = 1;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <MenuLoad+0x90>)
	if (key == KEY_NEXT)
 8002bc4:	2802      	cmp	r0, #2
{
 8002bc6:	b510      	push	{r4, lr}
 8002bc8:	4c22      	ldr	r4, [pc, #136]	; (8002c54 <MenuLoad+0x94>)
	EnterInMenu_Status = 1;
 8002bca:	701a      	strb	r2, [r3, #0]
	if (key == KEY_NEXT)
 8002bcc:	d103      	bne.n	8002bd6 <MenuLoad+0x16>
		if (On_off == 0)
 8002bce:	7823      	ldrb	r3, [r4, #0]
 8002bd0:	bb73      	cbnz	r3, 8002c30 <MenuLoad+0x70>
			LOAD_ON();
 8002bd2:	f7ff ff79 	bl	8002ac8 <LOAD_ON>
	lcd_set_xy(0,0);
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	f7fe fee7 	bl	80019ac <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8002bde:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <MenuLoad+0x98>)
 8002be0:	2102      	movs	r1, #2
 8002be2:	8818      	ldrh	r0, [r3, #0]
 8002be4:	b280      	uxth	r0, r0
 8002be6:	f7fe fbb7 	bl	8001358 <itoa_koma>
 8002bea:	f7fe ff5f 	bl	8001aac <PrintToLCD>
	PrintToLCD("V ");
 8002bee:	481b      	ldr	r0, [pc, #108]	; (8002c5c <MenuLoad+0x9c>)
 8002bf0:	f7fe ff5c 	bl	8001aac <PrintToLCD>
	PrintToLCD(itoa(Current));
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <MenuLoad+0xa0>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	f7fe fb36 	bl	8001268 <itoa>
 8002bfc:	f7fe ff56 	bl	8001aac <PrintToLCD>
	PrintToLCD("mA    ");
 8002c00:	4818      	ldr	r0, [pc, #96]	; (8002c64 <MenuLoad+0xa4>)
 8002c02:	f7fe ff53 	bl	8001aac <PrintToLCD>
	if (On_off ==0)
 8002c06:	7823      	ldrb	r3, [r4, #0]
			lcd_set_xy(6,1);
 8002c08:	2101      	movs	r1, #1
 8002c0a:	2006      	movs	r0, #6
 8002c0c:	4c16      	ldr	r4, [pc, #88]	; (8002c68 <MenuLoad+0xa8>)
	if (On_off ==0)
 8002c0e:	b993      	cbnz	r3, 8002c36 <MenuLoad+0x76>
			lcd_set_xy(6,1);
 8002c10:	f7fe fecc 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(2,1);
 8002c14:	2101      	movs	r1, #1
 8002c16:	2002      	movs	r0, #2
 8002c18:	f7fe fef0 	bl	80019fc <LcdOutbyNumber>
			LcdOutbyNumber(2,1);
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	2002      	movs	r0, #2
					LcdOutbyNumber(3,1);
 8002c20:	f7fe feec 	bl	80019fc <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8002c24:	7823      	ldrb	r3, [r4, #0]
 8002c26:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8002c28:	bf84      	itt	hi
 8002c2a:	2300      	movhi	r3, #0
 8002c2c:	7023      	strbhi	r3, [r4, #0]
}
 8002c2e:	bd10      	pop	{r4, pc}
			LOAD_OFF();
 8002c30:	f7ff ffb4 	bl	8002b9c <LOAD_OFF>
 8002c34:	e7cf      	b.n	8002bd6 <MenuLoad+0x16>
			if (Blink_message_counter<=5)
 8002c36:	7823      	ldrb	r3, [r4, #0]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d9e9      	bls.n	8002c10 <MenuLoad+0x50>
					lcd_set_xy(6,1);
 8002c3c:	f7fe feb6 	bl	80019ac <lcd_set_xy>
					LcdOutbyNumber(3,1);
 8002c40:	2101      	movs	r1, #1
 8002c42:	2003      	movs	r0, #3
 8002c44:	f7fe feda 	bl	80019fc <LcdOutbyNumber>
					LcdOutbyNumber(3,1);
 8002c48:	2101      	movs	r1, #1
 8002c4a:	2003      	movs	r0, #3
 8002c4c:	e7e8      	b.n	8002c20 <MenuLoad+0x60>
 8002c4e:	bf00      	nop
 8002c50:	200007b0 	.word	0x200007b0
 8002c54:	200007b2 	.word	0x200007b2
 8002c58:	2000087c 	.word	0x2000087c
 8002c5c:	080061c2 	.word	0x080061c2
 8002c60:	200002b4 	.word	0x200002b4
 8002c64:	0800627c 	.word	0x0800627c
 8002c68:	20000795 	.word	0x20000795

08002c6c <MenuBatterySimilation>:
	lcd_set_xy(0,0);
 8002c6c:	2100      	movs	r1, #0
{
 8002c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002c72:	2701      	movs	r7, #1
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <MenuBatterySimilation+0xbc>)
	if (On_off == 0)
 8002c76:	4d2d      	ldr	r5, [pc, #180]	; (8002d2c <MenuBatterySimilation+0xc0>)
{
 8002c78:	4606      	mov	r6, r0
	lcd_set_xy(0,0);
 8002c7a:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002c7c:	701f      	strb	r7, [r3, #0]
	lcd_set_xy(0,0);
 8002c7e:	f7fe fe95 	bl	80019ac <lcd_set_xy>
	if (On_off == 0)
 8002c82:	782b      	ldrb	r3, [r5, #0]
 8002c84:	4c2a      	ldr	r4, [pc, #168]	; (8002d30 <MenuBatterySimilation+0xc4>)
 8002c86:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002c8a:	bb3b      	cbnz	r3, 8002cdc <MenuBatterySimilation+0x70>
		PrintToLCD(itoa_koma(U_PS,2));
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <MenuBatterySimilation+0xc8>)
 8002c8e:	2102      	movs	r1, #2
 8002c90:	8818      	ldrh	r0, [r3, #0]
 8002c92:	b280      	uxth	r0, r0
 8002c94:	f7fe fb60 	bl	8001358 <itoa_koma>
 8002c98:	f7fe ff08 	bl	8001aac <PrintToLCD>
		PrintToLCD("V  ");
 8002c9c:	4826      	ldr	r0, [pc, #152]	; (8002d38 <MenuBatterySimilation+0xcc>)
 8002c9e:	f7fe ff05 	bl	8001aac <PrintToLCD>
		lcd_set_xy(7,0);
 8002ca2:	4641      	mov	r1, r8
 8002ca4:	2007      	movs	r0, #7
 8002ca6:	f7fe fe81 	bl	80019ac <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002caa:	6820      	ldr	r0, [r4, #0]
 8002cac:	f7fe fadc 	bl	8001268 <itoa>
 8002cb0:	f7fe fefc 	bl	8001aac <PrintToLCD>
		PrintToLCD("mA   ");
 8002cb4:	4821      	ldr	r0, [pc, #132]	; (8002d3c <MenuBatterySimilation+0xd0>)
 8002cb6:	f7fe fef9 	bl	8001aac <PrintToLCD>
		lcd_set_xy(5,1);
 8002cba:	2005      	movs	r0, #5
 8002cbc:	4639      	mov	r1, r7
 8002cbe:	f7fe fe75 	bl	80019ac <lcd_set_xy>
		PrintToLCD("OFF ");
 8002cc2:	481f      	ldr	r0, [pc, #124]	; (8002d40 <MenuBatterySimilation+0xd4>)
		PrintToLCD("ON ");
 8002cc4:	f7fe fef2 	bl	8001aac <PrintToLCD>
    if (key == KEY_NEXT)
 8002cc8:	2e02      	cmp	r6, #2
 8002cca:	d12a      	bne.n	8002d22 <MenuBatterySimilation+0xb6>
    	if (On_off == 0)
 8002ccc:	782b      	ldrb	r3, [r5, #0]
 8002cce:	bb13      	cbnz	r3, 8002d16 <MenuBatterySimilation+0xaa>
    		OUT_ON();
 8002cd0:	f7ff fc4e 	bl	8002570 <OUT_ON>
}
 8002cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_ON();
 8002cd8:	f7ff bef6 	b.w	8002ac8 <LOAD_ON>
		PrintToLCD(itoa_koma(U_OUT,2));
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <MenuBatterySimilation+0xd8>)
 8002cde:	2102      	movs	r1, #2
 8002ce0:	8818      	ldrh	r0, [r3, #0]
 8002ce2:	b280      	uxth	r0, r0
 8002ce4:	f7fe fb38 	bl	8001358 <itoa_koma>
 8002ce8:	f7fe fee0 	bl	8001aac <PrintToLCD>
		PrintToLCD("V  ");
 8002cec:	4812      	ldr	r0, [pc, #72]	; (8002d38 <MenuBatterySimilation+0xcc>)
 8002cee:	f7fe fedd 	bl	8001aac <PrintToLCD>
		lcd_set_xy(7,0);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2007      	movs	r0, #7
 8002cf6:	f7fe fe59 	bl	80019ac <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002cfa:	6820      	ldr	r0, [r4, #0]
 8002cfc:	f7fe fab4 	bl	8001268 <itoa>
 8002d00:	f7fe fed4 	bl	8001aac <PrintToLCD>
		PrintToLCD("mA    ");
 8002d04:	4810      	ldr	r0, [pc, #64]	; (8002d48 <MenuBatterySimilation+0xdc>)
 8002d06:	f7fe fed1 	bl	8001aac <PrintToLCD>
		lcd_set_xy(6,1);
 8002d0a:	2006      	movs	r0, #6
 8002d0c:	4639      	mov	r1, r7
 8002d0e:	f7fe fe4d 	bl	80019ac <lcd_set_xy>
		PrintToLCD("ON ");
 8002d12:	480e      	ldr	r0, [pc, #56]	; (8002d4c <MenuBatterySimilation+0xe0>)
 8002d14:	e7d6      	b.n	8002cc4 <MenuBatterySimilation+0x58>
    		OUT_OFF();
 8002d16:	f7ff fc11 	bl	800253c <OUT_OFF>
}
 8002d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_OFF();
 8002d1e:	f7ff bf3d 	b.w	8002b9c <LOAD_OFF>
}
 8002d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d26:	bf00      	nop
 8002d28:	200007b0 	.word	0x200007b0
 8002d2c:	200007b2 	.word	0x200007b2
 8002d30:	200002b4 	.word	0x200002b4
 8002d34:	20000884 	.word	0x20000884
 8002d38:	08006271 	.word	0x08006271
 8002d3c:	080062d4 	.word	0x080062d4
 8002d40:	080062da 	.word	0x080062da
 8002d44:	2000087c 	.word	0x2000087c
 8002d48:	0800627c 	.word	0x0800627c
 8002d4c:	080062df 	.word	0x080062df

08002d50 <charge>:
{
 8002d50:	b508      	push	{r3, lr}
	LOAD_OFF();
 8002d52:	f7ff ff23 	bl	8002b9c <LOAD_OFF>
}
 8002d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OUT_ON();
 8002d5a:	f7ff bc09 	b.w	8002570 <OUT_ON>
	...

08002d60 <charge1>:
{
 8002d60:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=1)
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <charge1+0x2c>)
 8002d64:	f993 2000 	ldrsb.w	r2, [r3]
 8002d68:	2a01      	cmp	r2, #1
 8002d6a:	d00d      	beq.n	8002d88 <charge1+0x28>
		ChargeDischargeState = 1;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
		LOAD_OFF();
 8002d70:	f7ff ff14 	bl	8002b9c <LOAD_OFF>
		OUT_ON();
 8002d74:	f7ff fbfc 	bl	8002570 <OUT_ON>
		TimerForReadyMeasurement_ms = 0;
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <charge1+0x30>)
		Print_to_USART1("Charge");
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <charge1+0x34>)
		TimerForReadyMeasurement_ms = 0;
 8002d7e:	601a      	str	r2, [r3, #0]
}
 8002d80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Print_to_USART1("Charge");
 8002d84:	f002 bc1c 	b.w	80055c0 <Print_to_USART1>
}
 8002d88:	bd08      	pop	{r3, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000796 	.word	0x20000796
 8002d90:	200007dc 	.word	0x200007dc
 8002d94:	080062cd 	.word	0x080062cd

08002d98 <MenuTraining_new>:
{
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8002d9c:	4a96      	ldr	r2, [pc, #600]	; (8002ff8 <MenuTraining_new+0x260>)
{
 8002d9e:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8002da0:	7813      	ldrb	r3, [r2, #0]
 8002da2:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 8003050 <MenuTraining_new+0x2b8>
 8002da6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8003054 <MenuTraining_new+0x2bc>
 8002daa:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8003058 <MenuTraining_new+0x2c0>
 8002dae:	4f93      	ldr	r7, [pc, #588]	; (8002ffc <MenuTraining_new+0x264>)
 8002db0:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800305c <MenuTraining_new+0x2c4>
 8002db4:	4d92      	ldr	r5, [pc, #584]	; (8003000 <MenuTraining_new+0x268>)
{
 8002db6:	9000      	str	r0, [sp, #0]
	if (EnterInMenu_Status == 0)
 8002db8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002dbc:	9201      	str	r2, [sp, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d13e      	bne.n	8002e40 <MenuTraining_new+0xa8>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8002dc2:	4b90      	ldr	r3, [pc, #576]	; (8003004 <MenuTraining_new+0x26c>)
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	4b90      	ldr	r3, [pc, #576]	; (8003008 <MenuTraining_new+0x270>)
 8002dc8:	b292      	uxth	r2, r2
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	3305      	adds	r3, #5
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d215      	bcs.n	8002dfe <MenuTraining_new+0x66>
			lcd_set_xy(0,0);
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f7fe fde9 	bl	80019ac <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8002dda:	488c      	ldr	r0, [pc, #560]	; (800300c <MenuTraining_new+0x274>)
 8002ddc:	f7fe fe66 	bl	8001aac <PrintToLCD>
			delay_ms(2000);
 8002de0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002de4:	f7fe f924 	bl	8001030 <delay_ms>
			lcd_set_xy(0,0);
 8002de8:	4621      	mov	r1, r4
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7fe fdde 	bl	80019ac <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8002df0:	4887      	ldr	r0, [pc, #540]	; (8003010 <MenuTraining_new+0x278>)
 8002df2:	f7fe fe5b 	bl	8001aac <PrintToLCD>
			delay_ms(3000);
 8002df6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002dfa:	f7fe f919 	bl	8001030 <delay_ms>
		EnterInMenu_Status = 1;
 8002dfe:	2601      	movs	r6, #1
		ChargeStatusForTimer = 0;
 8002e00:	2400      	movs	r4, #0
		EnterInMenu_Status = 1;
 8002e02:	9b01      	ldr	r3, [sp, #4]
 8002e04:	701e      	strb	r6, [r3, #0]
		DischargeTimeSec_Previous = 0;
 8002e06:	4b83      	ldr	r3, [pc, #524]	; (8003014 <MenuTraining_new+0x27c>)
		ChargeStatusForTimer = 0;
 8002e08:	f88a 4000 	strb.w	r4, [sl]
		DisChargeStatusForTimer = 0;
 8002e0c:	f88b 4000 	strb.w	r4, [fp]
		ChargeTimeSec = 0;
 8002e10:	f8c9 4000 	str.w	r4, [r9]
		DischargeTimeSec = 0;
 8002e14:	603c      	str	r4, [r7, #0]
		DischargeTimeSec_Previous = 0;
 8002e16:	601c      	str	r4, [r3, #0]
		BatteryCapacityCharge = 0;
 8002e18:	f8c8 4000 	str.w	r4, [r8]
		BatteryCapacityDischargeCurrent = 0;
 8002e1c:	602c      	str	r4, [r5, #0]
		ChargeStatusForTimer = 1;
 8002e1e:	f88a 6000 	strb.w	r6, [sl]
		charge1();
 8002e22:	f7ff ff9d 	bl	8002d60 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8002e26:	4b7c      	ldr	r3, [pc, #496]	; (8003018 <MenuTraining_new+0x280>)
		lcd_set_xy(0,0);
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4620      	mov	r0, r4
		ChargeDischargeStatus = CHARGEs;
 8002e2c:	701e      	strb	r6, [r3, #0]
		lcd_set_xy(0,0);
 8002e2e:	f7fe fdbd 	bl	80019ac <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8002e32:	487a      	ldr	r0, [pc, #488]	; (800301c <MenuTraining_new+0x284>)
 8002e34:	f7fe fe3a 	bl	8001aac <PrintToLCD>
		delay_ms(1000);
 8002e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3c:	f7fe f8f8 	bl	8001030 <delay_ms>
	if (Module16(Current)>5)
 8002e40:	4c77      	ldr	r4, [pc, #476]	; (8003020 <MenuTraining_new+0x288>)
 8002e42:	6820      	ldr	r0, [r4, #0]
 8002e44:	b200      	sxth	r0, r0
 8002e46:	f7fe faef 	bl	8001428 <Module16>
 8002e4a:	2805      	cmp	r0, #5
 8002e4c:	9403      	str	r4, [sp, #12]
 8002e4e:	f340 81c6 	ble.w	80031de <MenuTraining_new+0x446>
		if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8002e52:	4a74      	ldr	r2, [pc, #464]	; (8003024 <MenuTraining_new+0x28c>)
 8002e54:	4e6c      	ldr	r6, [pc, #432]	; (8003008 <MenuTraining_new+0x270>)
 8002e56:	8813      	ldrh	r3, [r2, #0]
 8002e58:	69b1      	ldr	r1, [r6, #24]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	9202      	str	r2, [sp, #8]
 8002e60:	d21f      	bcs.n	8002ea2 <MenuTraining_new+0x10a>
 8002e62:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <MenuTraining_new+0x280>)
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	2a02      	cmp	r2, #2
 8002e68:	d11b      	bne.n	8002ea2 <MenuTraining_new+0x10a>
 8002e6a:	4b6f      	ldr	r3, [pc, #444]	; (8003028 <MenuTraining_new+0x290>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e72:	d916      	bls.n	8002ea2 <MenuTraining_new+0x10a>
			DisChargeStatusForTimer = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f88b 3000 	strb.w	r3, [fp]
			if (BatteryCapacityDischargeCurrent/3600 > 100)
 8002e7a:	6829      	ldr	r1, [r5, #0]
 8002e7c:	4b6b      	ldr	r3, [pc, #428]	; (800302c <MenuTraining_new+0x294>)
 8002e7e:	4299      	cmp	r1, r3
 8002e80:	d903      	bls.n	8002e8a <MenuTraining_new+0xf2>
				MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8002e82:	6828      	ldr	r0, [r5, #0]
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	f7fe ffbb 	bl	8001e00 <MenuTraining_WriteInLOG>
			ChargeTimeSec = 0;
 8002e8a:	2300      	movs	r3, #0
			ChargeStatusForTimer = 1;
 8002e8c:	2401      	movs	r4, #1
			ChargeTimeSec = 0;
 8002e8e:	f8c9 3000 	str.w	r3, [r9]
			BatteryCapacityCharge = 0;
 8002e92:	f8c8 3000 	str.w	r3, [r8]
			ChargeStatusForTimer = 1;
 8002e96:	f88a 4000 	strb.w	r4, [sl]
			charge1();
 8002e9a:	f7ff ff61 	bl	8002d60 <charge1>
			ChargeDischargeStatus = CHARGEs;
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	; (8003018 <MenuTraining_new+0x280>)
 8002ea0:	701c      	strb	r4, [r3, #0]
		if ((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))
 8002ea2:	9b02      	ldr	r3, [sp, #8]
 8002ea4:	6a32      	ldr	r2, [r6, #32]
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d908      	bls.n	8002ec0 <MenuTraining_new+0x128>
 8002eae:	4b5a      	ldr	r3, [pc, #360]	; (8003018 <MenuTraining_new+0x280>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d104      	bne.n	8002ec0 <MenuTraining_new+0x128>
 8002eb6:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <MenuTraining_new+0x290>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ebe:	d809      	bhi.n	8002ed4 <MenuTraining_new+0x13c>
 8002ec0:	4b5b      	ldr	r3, [pc, #364]	; (8003030 <MenuTraining_new+0x298>)
 8002ec2:	f8d9 2000 	ldr.w	r2, [r9]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d923      	bls.n	8002f14 <MenuTraining_new+0x17c>
 8002ecc:	4b52      	ldr	r3, [pc, #328]	; (8003018 <MenuTraining_new+0x280>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d11f      	bne.n	8002f14 <MenuTraining_new+0x17c>
			ChargeStatusForTimer = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f88a 3000 	strb.w	r3, [sl]
			if (BatteryCapacityCharge/3600 > 100)
 8002eda:	f8d8 2000 	ldr.w	r2, [r8]
 8002ede:	4b53      	ldr	r3, [pc, #332]	; (800302c <MenuTraining_new+0x294>)
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d906      	bls.n	8002ef2 <MenuTraining_new+0x15a>
				MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8002ee4:	f8d8 0000 	ldr.w	r0, [r8]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f8d9 1000 	ldr.w	r1, [r9]
 8002eee:	f7fe ff87 	bl	8001e00 <MenuTraining_WriteInLOG>
			DischargeTimeSec_Previous = DischargeTimeSec;
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4b47      	ldr	r3, [pc, #284]	; (8003014 <MenuTraining_new+0x27c>)
 8002ef6:	601a      	str	r2, [r3, #0]
			SaveDataWhenPowerOff.CurrentConsumption5ms = BatteryCapacityDischargeCurrent;
 8002ef8:	682a      	ldr	r2, [r5, #0]
 8002efa:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <MenuTraining_new+0x29c>)
 8002efc:	609a      	str	r2, [r3, #8]
			DischargeTimeSec = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	603b      	str	r3, [r7, #0]
			BatteryCapacityDischargeCurrent = 0;
 8002f02:	602b      	str	r3, [r5, #0]
			DisChargeStatusForTimer = 1;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f88b 3000 	strb.w	r3, [fp]
			discharge1();
 8002f0a:	f7ff fe2b 	bl	8002b64 <discharge1>
			ChargeDischargeStatus = DISCHARGEs;
 8002f0e:	2202      	movs	r2, #2
 8002f10:	4b41      	ldr	r3, [pc, #260]	; (8003018 <MenuTraining_new+0x280>)
 8002f12:	701a      	strb	r2, [r3, #0]
		if (key == KEY_NEXT)
 8002f14:	9a00      	ldr	r2, [sp, #0]
 8002f16:	4c48      	ldr	r4, [pc, #288]	; (8003038 <MenuTraining_new+0x2a0>)
 8002f18:	2a02      	cmp	r2, #2
 8002f1a:	f994 3000 	ldrsb.w	r3, [r4]
 8002f1e:	d133      	bne.n	8002f88 <MenuTraining_new+0x1f0>
			CountShow++;
 8002f20:	3301      	adds	r3, #1
 8002f22:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_TRAINING) CountShow=0;
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d136      	bne.n	8002f96 <MenuTraining_new+0x1fe>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	7023      	strb	r3, [r4, #0]
			lcd_set_xy(0,0);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4608      	mov	r0, r1
 8002f30:	f7fe fd3c 	bl	80019ac <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002f34:	9b02      	ldr	r3, [sp, #8]
 8002f36:	2102      	movs	r1, #2
 8002f38:	8818      	ldrh	r0, [r3, #0]
 8002f3a:	b280      	uxth	r0, r0
 8002f3c:	f7fe fa0c 	bl	8001358 <itoa_koma>
 8002f40:	f7fe fdb4 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 8002f44:	483d      	ldr	r0, [pc, #244]	; (800303c <MenuTraining_new+0x2a4>)
 8002f46:	f7fe fdb1 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(Current));
 8002f4a:	9b03      	ldr	r3, [sp, #12]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	f7fe f98b 	bl	8001268 <itoa>
 8002f52:	f7fe fdab 	bl	8001aac <PrintToLCD>
			PrintToLCD("mA     ");
 8002f56:	483a      	ldr	r0, [pc, #232]	; (8003040 <MenuTraining_new+0x2a8>)
 8002f58:	f7fe fda8 	bl	8001aac <PrintToLCD>
			lcd_set_xy(6,1);
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2006      	movs	r0, #6
 8002f60:	f7fe fd24 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8002f64:	2101      	movs	r1, #1
 8002f66:	2004      	movs	r0, #4
 8002f68:	f7fe fd48 	bl	80019fc <LcdOutbyNumber>
			if (Status_Out ==1)
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <MenuTraining_new+0x2ac>)
 8002f6e:	7819      	ldrb	r1, [r3, #0]
 8002f70:	2901      	cmp	r1, #1
 8002f72:	f040 812d 	bne.w	80031d0 <MenuTraining_new+0x438>
				lcd_set_xy(7,1);
 8002f76:	2007      	movs	r0, #7
 8002f78:	9100      	str	r1, [sp, #0]
 8002f7a:	f7fe fd17 	bl	80019ac <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8002f7e:	2000      	movs	r0, #0
 8002f80:	9900      	ldr	r1, [sp, #0]
				LcdOutbyNumber(2,1);//discharge
 8002f82:	f7fe fd3b 	bl	80019fc <LcdOutbyNumber>
 8002f86:	e00b      	b.n	8002fa0 <MenuTraining_new+0x208>
		if (key == KEY_BACK)
 8002f88:	9a00      	ldr	r2, [sp, #0]
 8002f8a:	2a01      	cmp	r2, #1
 8002f8c:	d104      	bne.n	8002f98 <MenuTraining_new+0x200>
			CountShow--;
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db64      	blt.n	8003060 <MenuTraining_new+0x2c8>
			CountShow++;
 8002f96:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8002f98:	f994 3000 	ldrsb.w	r3, [r4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0c5      	beq.n	8002f2c <MenuTraining_new+0x194>
		if(CountShow == 1)
 8002fa0:	f994 3000 	ldrsb.w	r3, [r4]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d15d      	bne.n	8003064 <MenuTraining_new+0x2cc>
			lcd_set_xy(0,0);
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4608      	mov	r0, r1
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	f7fe fcfd 	bl	80019ac <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8002fb2:	6930      	ldr	r0, [r6, #16]
 8002fb4:	f7fe f958 	bl	8001268 <itoa>
 8002fb8:	f7fe fd78 	bl	8001aac <PrintToLCD>
			PrintToLCD("h ");
 8002fbc:	4822      	ldr	r0, [pc, #136]	; (8003048 <MenuTraining_new+0x2b0>)
 8002fbe:	f7fe fd75 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002fc2:	220a      	movs	r2, #10
 8002fc4:	9b00      	ldr	r3, [sp, #0]
 8002fc6:	69b0      	ldr	r0, [r6, #24]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fce:	f7fe f9c3 	bl	8001358 <itoa_koma>
 8002fd2:	f7fe fd6b 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 8002fd6:	4819      	ldr	r0, [pc, #100]	; (800303c <MenuTraining_new+0x2a4>)
 8002fd8:	f7fe fd68 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002fdc:	220a      	movs	r2, #10
 8002fde:	9b00      	ldr	r3, [sp, #0]
 8002fe0:	6a30      	ldr	r0, [r6, #32]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fe8:	f7fe f9b6 	bl	8001358 <itoa_koma>
 8002fec:	f7fe fd5e 	bl	8001aac <PrintToLCD>
			PrintToLCD("V     ");
 8002ff0:	4816      	ldr	r0, [pc, #88]	; (800304c <MenuTraining_new+0x2b4>)
 8002ff2:	f7fe fd5b 	bl	8001aac <PrintToLCD>
 8002ff6:	e035      	b.n	8003064 <MenuTraining_new+0x2cc>
 8002ff8:	200007b0 	.word	0x200007b0
 8002ffc:	200007a8 	.word	0x200007a8
 8003000:	2000078c 	.word	0x2000078c
 8003004:	20000884 	.word	0x20000884
 8003008:	20000154 	.word	0x20000154
 800300c:	080062e3 	.word	0x080062e3
 8003010:	080062f4 	.word	0x080062f4
 8003014:	200007ac 	.word	0x200007ac
 8003018:	20000270 	.word	0x20000270
 800301c:	08006305 	.word	0x08006305
 8003020:	200002b4 	.word	0x200002b4
 8003024:	2000087c 	.word	0x2000087c
 8003028:	200007dc 	.word	0x200007dc
 800302c:	00058c4f 	.word	0x00058c4f
 8003030:	20000a28 	.word	0x20000a28
 8003034:	200000f4 	.word	0x200000f4
 8003038:	2000079d 	.word	0x2000079d
 800303c:	080061c2 	.word	0x080061c2
 8003040:	08006316 	.word	0x08006316
 8003044:	200007b9 	.word	0x200007b9
 8003048:	08006297 	.word	0x08006297
 800304c:	080060a7 	.word	0x080060a7
 8003050:	20000797 	.word	0x20000797
 8003054:	200007a4 	.word	0x200007a4
 8003058:	20000798 	.word	0x20000798
 800305c:	20000788 	.word	0x20000788
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8003060:	2304      	movs	r3, #4
 8003062:	7023      	strb	r3, [r4, #0]
		if(CountShow == 2)
 8003064:	f994 6000 	ldrsb.w	r6, [r4]
 8003068:	2e02      	cmp	r6, #2
 800306a:	d121      	bne.n	80030b0 <MenuTraining_new+0x318>
			lcd_set_xy(0,0);
 800306c:	2100      	movs	r1, #0
 800306e:	4608      	mov	r0, r1
 8003070:	f7fe fc9c 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8003074:	2101      	movs	r1, #1
 8003076:	4630      	mov	r0, r6
 8003078:	f7fe fcc0 	bl	80019fc <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800307c:	2100      	movs	r1, #0
 800307e:	2001      	movs	r0, #1
 8003080:	f7fe fc94 	bl	80019ac <lcd_set_xy>
			PrintToLCD(" ");
 8003084:	485c      	ldr	r0, [pc, #368]	; (80031f8 <MenuTraining_new+0x460>)
 8003086:	f7fe fd11 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 800308a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800308e:	6828      	ldr	r0, [r5, #0]
 8003090:	fbb0 f0f3 	udiv	r0, r0, r3
 8003094:	f7fe f8e8 	bl	8001268 <itoa>
 8003098:	f7fe fd08 	bl	8001aac <PrintToLCD>
			PrintToLCD("mAH      ");
 800309c:	4857      	ldr	r0, [pc, #348]	; (80031fc <MenuTraining_new+0x464>)
 800309e:	f7fe fd05 	bl	8001aac <PrintToLCD>
			lcd_set_xy(3,1);
 80030a2:	2003      	movs	r0, #3
 80030a4:	2101      	movs	r1, #1
 80030a6:	f7fe fc81 	bl	80019ac <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	f7ff fa10 	bl	80024d0 <ClockOnLCD_noSec>
		if(CountShow == 3)
 80030b0:	f994 6000 	ldrsb.w	r6, [r4]
 80030b4:	2e03      	cmp	r6, #3
 80030b6:	d123      	bne.n	8003100 <MenuTraining_new+0x368>
			lcd_set_xy(0,0);
 80030b8:	2100      	movs	r1, #0
 80030ba:	4608      	mov	r0, r1
 80030bc:	f7fe fc76 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 80030c0:	2101      	movs	r1, #1
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7fe fc9a 	bl	80019fc <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80030c8:	2100      	movs	r1, #0
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7fe fc6e 	bl	80019ac <lcd_set_xy>
			PrintToLCD(" ");
 80030d0:	4849      	ldr	r0, [pc, #292]	; (80031f8 <MenuTraining_new+0x460>)
 80030d2:	f7fe fceb 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80030d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80030da:	f8d8 0000 	ldr.w	r0, [r8]
 80030de:	fbb0 f0f3 	udiv	r0, r0, r3
 80030e2:	f7fe f8c1 	bl	8001268 <itoa>
 80030e6:	f7fe fce1 	bl	8001aac <PrintToLCD>
			PrintToLCD("mAH      ");
 80030ea:	4844      	ldr	r0, [pc, #272]	; (80031fc <MenuTraining_new+0x464>)
 80030ec:	f7fe fcde 	bl	8001aac <PrintToLCD>
			lcd_set_xy(3,1);
 80030f0:	4630      	mov	r0, r6
 80030f2:	2101      	movs	r1, #1
 80030f4:	f7fe fc5a 	bl	80019ac <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 80030f8:	f8d9 0000 	ldr.w	r0, [r9]
 80030fc:	f7ff f9e8 	bl	80024d0 <ClockOnLCD_noSec>
		if(CountShow == 4)
 8003100:	f994 3000 	ldrsb.w	r3, [r4]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d123      	bne.n	8003150 <MenuTraining_new+0x3b8>
			lcd_set_xy(0,0);
 8003108:	2100      	movs	r1, #0
 800310a:	4608      	mov	r0, r1
 800310c:	f7fe fc4e 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8003110:	2101      	movs	r1, #1
 8003112:	2002      	movs	r0, #2
 8003114:	f7fe fc72 	bl	80019fc <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8003118:	2100      	movs	r1, #0
 800311a:	2001      	movs	r0, #1
 800311c:	f7fe fc46 	bl	80019ac <lcd_set_xy>
			PrintToLCD("P ");
 8003120:	4837      	ldr	r0, [pc, #220]	; (8003200 <MenuTraining_new+0x468>)
 8003122:	f7fe fcc3 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(SaveDataWhenPowerOff.CurrentConsumption5ms/3600));
 8003126:	4b37      	ldr	r3, [pc, #220]	; (8003204 <MenuTraining_new+0x46c>)
 8003128:	6898      	ldr	r0, [r3, #8]
 800312a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800312e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003132:	f7fe f899 	bl	8001268 <itoa>
 8003136:	f7fe fcb9 	bl	8001aac <PrintToLCD>
			PrintToLCD("mAH     ");
 800313a:	4833      	ldr	r0, [pc, #204]	; (8003208 <MenuTraining_new+0x470>)
 800313c:	f7fe fcb6 	bl	8001aac <PrintToLCD>
			lcd_set_xy(3,1);
 8003140:	2003      	movs	r0, #3
 8003142:	2101      	movs	r1, #1
 8003144:	f7fe fc32 	bl	80019ac <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8003148:	4b30      	ldr	r3, [pc, #192]	; (800320c <MenuTraining_new+0x474>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	f7ff f9c0 	bl	80024d0 <ClockOnLCD_noSec>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003150:	482f      	ldr	r0, [pc, #188]	; (8003210 <MenuTraining_new+0x478>)
 8003152:	f002 f945 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003156:	9b01      	ldr	r3, [sp, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	7819      	ldrb	r1, [r3, #0]
 800315c:	482d      	ldr	r0, [pc, #180]	; (8003214 <MenuTraining_new+0x47c>)
 800315e:	f002 f97d 	bl	800545c <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003162:	482b      	ldr	r0, [pc, #172]	; (8003210 <MenuTraining_new+0x478>)
 8003164:	f002 f93c 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003168:	f89a 1000 	ldrb.w	r1, [sl]
 800316c:	2200      	movs	r2, #0
 800316e:	482a      	ldr	r0, [pc, #168]	; (8003218 <MenuTraining_new+0x480>)
 8003170:	f002 f974 	bl	800545c <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003174:	4826      	ldr	r0, [pc, #152]	; (8003210 <MenuTraining_new+0x478>)
 8003176:	f002 f933 	bl	80053e0 <printToBufferWithoutEndUART1>
 800317a:	f8d9 1000 	ldr.w	r1, [r9]
 800317e:	2200      	movs	r2, #0
 8003180:	4826      	ldr	r0, [pc, #152]	; (800321c <MenuTraining_new+0x484>)
 8003182:	f002 f96b 	bl	800545c <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8003186:	4822      	ldr	r0, [pc, #136]	; (8003210 <MenuTraining_new+0x478>)
 8003188:	f002 f92a 	bl	80053e0 <printToBufferWithoutEndUART1>
 800318c:	f8d8 1000 	ldr.w	r1, [r8]
 8003190:	2200      	movs	r2, #0
 8003192:	4823      	ldr	r0, [pc, #140]	; (8003220 <MenuTraining_new+0x488>)
 8003194:	f002 f962 	bl	800545c <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003198:	481d      	ldr	r0, [pc, #116]	; (8003210 <MenuTraining_new+0x478>)
 800319a:	f002 f921 	bl	80053e0 <printToBufferWithoutEndUART1>
 800319e:	f89b 1000 	ldrb.w	r1, [fp]
 80031a2:	2200      	movs	r2, #0
 80031a4:	481f      	ldr	r0, [pc, #124]	; (8003224 <MenuTraining_new+0x48c>)
 80031a6:	f002 f959 	bl	800545c <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80031aa:	4819      	ldr	r0, [pc, #100]	; (8003210 <MenuTraining_new+0x478>)
 80031ac:	f002 f918 	bl	80053e0 <printToBufferWithoutEndUART1>
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	481c      	ldr	r0, [pc, #112]	; (8003228 <MenuTraining_new+0x490>)
 80031b6:	f002 f951 	bl	800545c <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80031ba:	4815      	ldr	r0, [pc, #84]	; (8003210 <MenuTraining_new+0x478>)
 80031bc:	f002 f910 	bl	80053e0 <printToBufferWithoutEndUART1>
 80031c0:	2200      	movs	r2, #0
 80031c2:	6829      	ldr	r1, [r5, #0]
 80031c4:	4819      	ldr	r0, [pc, #100]	; (800322c <MenuTraining_new+0x494>)
}
 80031c6:	b005      	add	sp, #20
 80031c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80031cc:	f002 b946 	b.w	800545c <printToBufferUART1D>
				lcd_set_xy(7,1);
 80031d0:	2101      	movs	r1, #1
 80031d2:	2007      	movs	r0, #7
 80031d4:	f7fe fbea 	bl	80019ac <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80031d8:	2101      	movs	r1, #1
 80031da:	2002      	movs	r0, #2
 80031dc:	e6d1      	b.n	8002f82 <MenuTraining_new+0x1ea>
		if (TimerForReadyMeasurement_ms>1000)
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <MenuTraining_new+0x498>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e6:	d9b3      	bls.n	8003150 <MenuTraining_new+0x3b8>
			lcd_set_xy(0,0);
 80031e8:	2100      	movs	r1, #0
 80031ea:	4608      	mov	r0, r1
 80031ec:	f7fe fbde 	bl	80019ac <lcd_set_xy>
			PrintToLCD("NO/BAD Battery  ");
 80031f0:	4810      	ldr	r0, [pc, #64]	; (8003234 <MenuTraining_new+0x49c>)
 80031f2:	f7fe fc5b 	bl	8001aac <PrintToLCD>
 80031f6:	e7ab      	b.n	8003150 <MenuTraining_new+0x3b8>
 80031f8:	0800625c 	.word	0x0800625c
 80031fc:	0800631e 	.word	0x0800631e
 8003200:	08006328 	.word	0x08006328
 8003204:	200000f4 	.word	0x200000f4
 8003208:	0800632b 	.word	0x0800632b
 800320c:	200007ac 	.word	0x200007ac
 8003210:	08005ac8 	.word	0x08005ac8
 8003214:	08006345 	.word	0x08006345
 8003218:	0800635a 	.word	0x0800635a
 800321c:	0800636f 	.word	0x0800636f
 8003220:	0800637f 	.word	0x0800637f
 8003224:	08006397 	.word	0x08006397
 8003228:	080063af 	.word	0x080063af
 800322c:	080063c2 	.word	0x080063c2
 8003230:	200007dc 	.word	0x200007dc
 8003234:	08006334 	.word	0x08006334

08003238 <MenuSwing>:
   	lcd_set_xy(0,0);
 8003238:	2100      	movs	r1, #0
{
 800323a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323c:	4606      	mov	r6, r0
   	lcd_set_xy(0,0);
 800323e:	4608      	mov	r0, r1
 8003240:	f7fe fbb4 	bl	80019ac <lcd_set_xy>
       	EnterInMenu_Status = 1;
 8003244:	2201      	movs	r2, #1
 8003246:	4b69      	ldr	r3, [pc, #420]	; (80033ec <MenuSwing+0x1b4>)
 8003248:	701a      	strb	r2, [r3, #0]
       	if (InitiStatus==0)
 800324a:	4b69      	ldr	r3, [pc, #420]	; (80033f0 <MenuSwing+0x1b8>)
 800324c:	7819      	ldrb	r1, [r3, #0]
 800324e:	b911      	cbnz	r1, 8003256 <MenuSwing+0x1e>
       		InitiStatus=1;
 8003250:	701a      	strb	r2, [r3, #0]
       		Start_Timer_sec();
 8003252:	f7ff f931 	bl	80024b8 <Start_Timer_sec>
       if (Timer_Sec<=SettingsData.Swing_Chrg_time)
 8003256:	4d67      	ldr	r5, [pc, #412]	; (80033f4 <MenuSwing+0x1bc>)
 8003258:	4c67      	ldr	r4, [pc, #412]	; (80033f8 <MenuSwing+0x1c0>)
 800325a:	682b      	ldr	r3, [r5, #0]
 800325c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800325e:	429a      	cmp	r2, r3
 8003260:	d312      	bcc.n	8003288 <MenuSwing+0x50>
    	   charge1();
 8003262:	f7ff fd7d 	bl	8002d60 <charge1>
           if (U_OUT>SettingsData.MaxVoltage && TimerForReadyMeasurement_ms>400)
 8003266:	4b65      	ldr	r3, [pc, #404]	; (80033fc <MenuSwing+0x1c4>)
 8003268:	6a22      	ldr	r2, [r4, #32]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	4293      	cmp	r3, r2
 8003270:	d90a      	bls.n	8003288 <MenuSwing+0x50>
 8003272:	4b63      	ldr	r3, [pc, #396]	; (8003400 <MenuSwing+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800327a:	d905      	bls.n	8003288 <MenuSwing+0x50>
        	   ReStart_Timer_sec();
 800327c:	f7ff f91c 	bl	80024b8 <Start_Timer_sec>
               Timer_Sec  = Timer_Sec+ SettingsData.Swing_Chrg_time;
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003284:	4413      	add	r3, r2
 8003286:	602b      	str	r3, [r5, #0]
       if (Timer_Sec > SettingsData.Swing_Chrg_time)
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800328c:	429a      	cmp	r2, r3
 800328e:	d20e      	bcs.n	80032ae <MenuSwing+0x76>
           discharge1();
 8003290:	f7ff fc68 	bl	8002b64 <discharge1>
           if (U_OUT<SettingsData.LowVoltage && TimerForReadyMeasurement_ms>400)
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <MenuSwing+0x1c4>)
 8003296:	69a2      	ldr	r2, [r4, #24]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	4293      	cmp	r3, r2
 800329e:	d206      	bcs.n	80032ae <MenuSwing+0x76>
 80032a0:	4b57      	ldr	r3, [pc, #348]	; (8003400 <MenuSwing+0x1c8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80032a8:	d901      	bls.n	80032ae <MenuSwing+0x76>
        	   ReStart_Timer_sec();
 80032aa:	f7ff f905 	bl	80024b8 <Start_Timer_sec>
       if (Timer_Sec > (SettingsData.Swing_Chrg_time+SettingsData.Swing_DChrg_time))
 80032ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80032b2:	682a      	ldr	r2, [r5, #0]
 80032b4:	440b      	add	r3, r1
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d201      	bcs.n	80032be <MenuSwing+0x86>
    	   ReStart_Timer_sec();
 80032ba:	f7ff f8fd 	bl	80024b8 <Start_Timer_sec>
		if (key == KEY_NEXT)
 80032be:	4d51      	ldr	r5, [pc, #324]	; (8003404 <MenuSwing+0x1cc>)
 80032c0:	2e02      	cmp	r6, #2
 80032c2:	f995 3000 	ldrsb.w	r3, [r5]
 80032c6:	d132      	bne.n	800332e <MenuSwing+0xf6>
			CountShow++;
 80032c8:	3301      	adds	r3, #1
 80032ca:	b25b      	sxtb	r3, r3
			if (CountShow==MAXITEM6) CountShow=0;
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d134      	bne.n	800333a <MenuSwing+0x102>
 80032d0:	2300      	movs	r3, #0
 80032d2:	702b      	strb	r3, [r5, #0]
			lcd_set_xy(0,0);
 80032d4:	2100      	movs	r1, #0
 80032d6:	4608      	mov	r0, r1
 80032d8:	f7fe fb68 	bl	80019ac <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 80032dc:	4b47      	ldr	r3, [pc, #284]	; (80033fc <MenuSwing+0x1c4>)
 80032de:	2102      	movs	r1, #2
 80032e0:	8818      	ldrh	r0, [r3, #0]
 80032e2:	b280      	uxth	r0, r0
 80032e4:	f7fe f838 	bl	8001358 <itoa_koma>
 80032e8:	f7fe fbe0 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 80032ec:	4846      	ldr	r0, [pc, #280]	; (8003408 <MenuSwing+0x1d0>)
 80032ee:	f7fe fbdd 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(Current));
 80032f2:	4b46      	ldr	r3, [pc, #280]	; (800340c <MenuSwing+0x1d4>)
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	f7fd ffb7 	bl	8001268 <itoa>
 80032fa:	f7fe fbd7 	bl	8001aac <PrintToLCD>
			PrintToLCD("mA     ");
 80032fe:	4844      	ldr	r0, [pc, #272]	; (8003410 <MenuSwing+0x1d8>)
 8003300:	f7fe fbd4 	bl	8001aac <PrintToLCD>
			lcd_set_xy(6,1);
 8003304:	2101      	movs	r1, #1
 8003306:	2006      	movs	r0, #6
 8003308:	f7fe fb50 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(5,1);
 800330c:	2101      	movs	r1, #1
 800330e:	2005      	movs	r0, #5
 8003310:	f7fe fb74 	bl	80019fc <LcdOutbyNumber>
			if (Status_Out ==1)
 8003314:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <MenuSwing+0x1dc>)
 8003316:	781e      	ldrb	r6, [r3, #0]
 8003318:	2e01      	cmp	r6, #1
 800331a:	d15f      	bne.n	80033dc <MenuSwing+0x1a4>
				lcd_set_xy(7,1);
 800331c:	4631      	mov	r1, r6
 800331e:	2007      	movs	r0, #7
 8003320:	f7fe fb44 	bl	80019ac <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003324:	4631      	mov	r1, r6
 8003326:	2000      	movs	r0, #0
				LcdOutbyNumber(2,1);//discharge
 8003328:	f7fe fb68 	bl	80019fc <LcdOutbyNumber>
 800332c:	e00a      	b.n	8003344 <MenuSwing+0x10c>
		if (key == KEY_BACK)
 800332e:	2e01      	cmp	r6, #1
 8003330:	d104      	bne.n	800333c <MenuSwing+0x104>
			CountShow--;
 8003332:	3b01      	subs	r3, #1
 8003334:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAXITEM6-1;
 8003336:	2b00      	cmp	r3, #0
 8003338:	db2c      	blt.n	8003394 <MenuSwing+0x15c>
			CountShow++;
 800333a:	702b      	strb	r3, [r5, #0]
		if(CountShow == 0)
 800333c:	f995 3000 	ldrsb.w	r3, [r5]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0c7      	beq.n	80032d4 <MenuSwing+0x9c>
		if(CountShow == 1)
 8003344:	f995 6000 	ldrsb.w	r6, [r5]
 8003348:	2e01      	cmp	r6, #1
 800334a:	d125      	bne.n	8003398 <MenuSwing+0x160>
			lcd_set_xy(0,0);
 800334c:	2100      	movs	r1, #0
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 800334e:	270a      	movs	r7, #10
			lcd_set_xy(0,0);
 8003350:	4608      	mov	r0, r1
 8003352:	f7fe fb2b 	bl	80019ac <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003356:	6920      	ldr	r0, [r4, #16]
 8003358:	f7fd ff86 	bl	8001268 <itoa>
 800335c:	f7fe fba6 	bl	8001aac <PrintToLCD>
			PrintToLCD("h ");
 8003360:	482d      	ldr	r0, [pc, #180]	; (8003418 <MenuSwing+0x1e0>)
 8003362:	f7fe fba3 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003366:	69a0      	ldr	r0, [r4, #24]
 8003368:	4631      	mov	r1, r6
 800336a:	fbb0 f0f7 	udiv	r0, r0, r7
 800336e:	f7fd fff3 	bl	8001358 <itoa_koma>
 8003372:	f7fe fb9b 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 8003376:	4824      	ldr	r0, [pc, #144]	; (8003408 <MenuSwing+0x1d0>)
 8003378:	f7fe fb98 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800337c:	6a20      	ldr	r0, [r4, #32]
 800337e:	4631      	mov	r1, r6
 8003380:	fbb0 f0f7 	udiv	r0, r0, r7
 8003384:	f7fd ffe8 	bl	8001358 <itoa_koma>
 8003388:	f7fe fb90 	bl	8001aac <PrintToLCD>
			PrintToLCD("V     ");
 800338c:	4823      	ldr	r0, [pc, #140]	; (800341c <MenuSwing+0x1e4>)
 800338e:	f7fe fb8d 	bl	8001aac <PrintToLCD>
 8003392:	e001      	b.n	8003398 <MenuSwing+0x160>
			if (CountShow<0) CountShow=MAXITEM6-1;
 8003394:	2302      	movs	r3, #2
 8003396:	702b      	strb	r3, [r5, #0]
		if(CountShow == 2)
 8003398:	f995 3000 	ldrsb.w	r3, [r5]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d124      	bne.n	80033ea <MenuSwing+0x1b2>
			lcd_set_xy(0,0);
 80033a0:	2100      	movs	r1, #0
 80033a2:	4608      	mov	r0, r1
 80033a4:	f7fe fb02 	bl	80019ac <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 80033a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80033aa:	f7fd ff5d 	bl	8001268 <itoa>
 80033ae:	f7fe fb7d 	bl	8001aac <PrintToLCD>
			PrintToLCD("s ");
 80033b2:	481b      	ldr	r0, [pc, #108]	; (8003420 <MenuSwing+0x1e8>)
 80033b4:	f7fe fb7a 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 80033b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80033ba:	f7fd ff55 	bl	8001268 <itoa>
 80033be:	f7fe fb75 	bl	8001aac <PrintToLCD>
			PrintToLCD("s      ");
 80033c2:	4818      	ldr	r0, [pc, #96]	; (8003424 <MenuSwing+0x1ec>)
 80033c4:	f7fe fb72 	bl	8001aac <PrintToLCD>
			lcd_set_xy(3,1);
 80033c8:	2003      	movs	r0, #3
 80033ca:	2101      	movs	r1, #1
 80033cc:	f7fe faee 	bl	80019ac <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80033d0:	4b15      	ldr	r3, [pc, #84]	; (8003428 <MenuSwing+0x1f0>)
 80033d2:	6818      	ldr	r0, [r3, #0]
}
 80033d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ClockOnLCD_noSec(DischargeTimeSec);
 80033d8:	f7ff b87a 	b.w	80024d0 <ClockOnLCD_noSec>
				lcd_set_xy(7,1);
 80033dc:	2101      	movs	r1, #1
 80033de:	2007      	movs	r0, #7
 80033e0:	f7fe fae4 	bl	80019ac <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80033e4:	2101      	movs	r1, #1
 80033e6:	2002      	movs	r0, #2
 80033e8:	e79e      	b.n	8003328 <MenuSwing+0xf0>
}
 80033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ec:	200007b0 	.word	0x200007b0
 80033f0:	200007b1 	.word	0x200007b1
 80033f4:	200007e0 	.word	0x200007e0
 80033f8:	20000154 	.word	0x20000154
 80033fc:	2000087c 	.word	0x2000087c
 8003400:	200007dc 	.word	0x200007dc
 8003404:	2000079d 	.word	0x2000079d
 8003408:	080061c2 	.word	0x080061c2
 800340c:	200002b4 	.word	0x200002b4
 8003410:	08006316 	.word	0x08006316
 8003414:	200007b9 	.word	0x200007b9
 8003418:	08006297 	.word	0x08006297
 800341c:	080060a7 	.word	0x080060a7
 8003420:	080062b7 	.word	0x080062b7
 8003424:	080063e4 	.word	0x080063e4
 8003428:	200007a8 	.word	0x200007a8

0800342c <OFF>:
{
 800342c:	b508      	push	{r3, lr}
	LOAD_OFF();
 800342e:	f7ff fbb5 	bl	8002b9c <LOAD_OFF>
}
 8003432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OUT_OFF();
 8003436:	f7ff b881 	b.w	800253c <OUT_OFF>
	...

0800343c <MenuChargeCC_CV>:
	EnterInMenu_Status = 1;
 800343c:	2201      	movs	r2, #1
{
 800343e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 8003442:	4e98      	ldr	r6, [pc, #608]	; (80036a4 <MenuChargeCC_CV+0x268>)
	EnterInMenu_Status = 1;
 8003444:	4b98      	ldr	r3, [pc, #608]	; (80036a8 <MenuChargeCC_CV+0x26c>)
	if (InitiStatus==0)
 8003446:	7834      	ldrb	r4, [r6, #0]
{
 8003448:	4682      	mov	sl, r0
 800344a:	4698      	mov	r8, r3
 800344c:	4d97      	ldr	r5, [pc, #604]	; (80036ac <MenuChargeCC_CV+0x270>)
 800344e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800371c <MenuChargeCC_CV+0x2e0>
 8003452:	4f97      	ldr	r7, [pc, #604]	; (80036b0 <MenuChargeCC_CV+0x274>)
	EnterInMenu_Status = 1;
 8003454:	701a      	strb	r2, [r3, #0]
	if (InitiStatus==0)
 8003456:	bb34      	cbnz	r4, 80034a6 <MenuChargeCC_CV+0x6a>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003458:	4b96      	ldr	r3, [pc, #600]	; (80036b4 <MenuChargeCC_CV+0x278>)
 800345a:	881a      	ldrh	r2, [r3, #0]
 800345c:	4b96      	ldr	r3, [pc, #600]	; (80036b8 <MenuChargeCC_CV+0x27c>)
 800345e:	b292      	uxth	r2, r2
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	3305      	adds	r3, #5
 8003464:	429a      	cmp	r2, r3
 8003466:	d215      	bcs.n	8003494 <MenuChargeCC_CV+0x58>
			lcd_set_xy(0,0);
 8003468:	4621      	mov	r1, r4
 800346a:	4620      	mov	r0, r4
 800346c:	f7fe fa9e 	bl	80019ac <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003470:	4892      	ldr	r0, [pc, #584]	; (80036bc <MenuChargeCC_CV+0x280>)
 8003472:	f7fe fb1b 	bl	8001aac <PrintToLCD>
			delay_ms(2000);
 8003476:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800347a:	f7fd fdd9 	bl	8001030 <delay_ms>
			lcd_set_xy(0,0);
 800347e:	4621      	mov	r1, r4
 8003480:	4620      	mov	r0, r4
 8003482:	f7fe fa93 	bl	80019ac <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003486:	488e      	ldr	r0, [pc, #568]	; (80036c0 <MenuChargeCC_CV+0x284>)
 8003488:	f7fe fb10 	bl	8001aac <PrintToLCD>
			delay_ms(3000);
 800348c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003490:	f7fd fdce 	bl	8001030 <delay_ms>
		ChargeStatusForTimer = 0;
 8003494:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 8003496:	4a8b      	ldr	r2, [pc, #556]	; (80036c4 <MenuChargeCC_CV+0x288>)
		ChargeStatusForTimer = 0;
 8003498:	702b      	strb	r3, [r5, #0]
		DisChargeStatusForTimer = 0;
 800349a:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 800349e:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 80034a0:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 80034a2:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 80034a4:	7032      	strb	r2, [r6, #0]
	if ((ChargeTimeSec > ChargeDurationSec)|| (U_OUT> SettingsData.MaxVoltage))
 80034a6:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <MenuChargeCC_CV+0x28c>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d806      	bhi.n	80034be <MenuChargeCC_CV+0x82>
 80034b0:	4b86      	ldr	r3, [pc, #536]	; (80036cc <MenuChargeCC_CV+0x290>)
 80034b2:	4a81      	ldr	r2, [pc, #516]	; (80036b8 <MenuChargeCC_CV+0x27c>)
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	6a12      	ldr	r2, [r2, #32]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d903      	bls.n	80034c6 <MenuChargeCC_CV+0x8a>
		OFF();
 80034be:	f7ff ffb5 	bl	800342c <OFF>
		ChargeStatusForTimer = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	702b      	strb	r3, [r5, #0]
    OUTStateAfterPowerUpFunction();
 80034c6:	f7ff f86d 	bl	80025a4 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 80034ca:	f1ba 0f02 	cmp.w	sl, #2
 80034ce:	4c80      	ldr	r4, [pc, #512]	; (80036d0 <MenuChargeCC_CV+0x294>)
 80034d0:	d16b      	bne.n	80035aa <MenuChargeCC_CV+0x16e>
		if (On_off == 0)
 80034d2:	4b80      	ldr	r3, [pc, #512]	; (80036d4 <MenuChargeCC_CV+0x298>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d163      	bne.n	80035a2 <MenuChargeCC_CV+0x166>
			charge();
 80034da:	f7ff fc39 	bl	8002d50 <charge>
			ChargeStatusForTimer = 1;
 80034de:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 80034e0:	702b      	strb	r3, [r5, #0]
	if(CountShow == 0)
 80034e2:	f994 1000 	ldrsb.w	r1, [r4]
 80034e6:	2900      	cmp	r1, #0
 80034e8:	d136      	bne.n	8003558 <MenuChargeCC_CV+0x11c>
		lcd_set_xy(0,0);
 80034ea:	4608      	mov	r0, r1
 80034ec:	f7fe fa5e 	bl	80019ac <lcd_set_xy>
		if (On_off ==0)
 80034f0:	4b78      	ldr	r3, [pc, #480]	; (80036d4 <MenuChargeCC_CV+0x298>)
 80034f2:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80036cc <MenuChargeCC_CV+0x290>
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	469b      	mov	fp, r3
 80034fa:	2a00      	cmp	r2, #0
 80034fc:	f040 80b5 	bne.w	800366a <MenuChargeCC_CV+0x22e>
			PrintToLCD(itoa_koma(U_PS,2));
 8003500:	4b6c      	ldr	r3, [pc, #432]	; (80036b4 <MenuChargeCC_CV+0x278>)
 8003502:	2102      	movs	r1, #2
 8003504:	8818      	ldrh	r0, [r3, #0]
 8003506:	b280      	uxth	r0, r0
 8003508:	f7fd ff26 	bl	8001358 <itoa_koma>
 800350c:	f7fe face 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 8003510:	4871      	ldr	r0, [pc, #452]	; (80036d8 <MenuChargeCC_CV+0x29c>)
 8003512:	f7fe facb 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003516:	f8ba 0000 	ldrh.w	r0, [sl]
 800351a:	2102      	movs	r1, #2
 800351c:	b280      	uxth	r0, r0
 800351e:	f7fd ff1b 	bl	8001358 <itoa_koma>
 8003522:	f7fe fac3 	bl	8001aac <PrintToLCD>
			PrintToLCD("V     ");
 8003526:	486d      	ldr	r0, [pc, #436]	; (80036dc <MenuChargeCC_CV+0x2a0>)
			PrintToLCD("mA     ");
 8003528:	f7fe fac0 	bl	8001aac <PrintToLCD>
		if (On_off ==0)
 800352c:	f89b 3000 	ldrb.w	r3, [fp]
			lcd_set_xy(7,1);
 8003530:	2101      	movs	r1, #1
 8003532:	2007      	movs	r0, #7
 8003534:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8003720 <MenuChargeCC_CV+0x2e4>
		if (On_off ==0)
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 80a9 	bne.w	8003690 <MenuChargeCC_CV+0x254>
			lcd_set_xy(7,1);
 800353e:	f7fe fa35 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(0,1);
 8003542:	2101      	movs	r1, #1
 8003544:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 8003546:	f7fe fa59 	bl	80019fc <LcdOutbyNumber>
		if (Blink_message_counter>10)
 800354a:	f89a 3000 	ldrb.w	r3, [sl]
 800354e:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8003550:	bf84      	itt	hi
 8003552:	2300      	movhi	r3, #0
 8003554:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8003558:	f994 a000 	ldrsb.w	sl, [r4]
 800355c:	f1ba 0f01 	cmp.w	sl, #1
 8003560:	d12f      	bne.n	80035c2 <MenuChargeCC_CV+0x186>
		lcd_set_xy(0,0);
 8003562:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003564:	f8df b150 	ldr.w	fp, [pc, #336]	; 80036b8 <MenuChargeCC_CV+0x27c>
		lcd_set_xy(0,0);
 8003568:	4608      	mov	r0, r1
 800356a:	f7fe fa1f 	bl	80019ac <lcd_set_xy>
		PrintToLCD("T:");
 800356e:	485c      	ldr	r0, [pc, #368]	; (80036e0 <MenuChargeCC_CV+0x2a4>)
 8003570:	f7fe fa9c 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003574:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003578:	f7fd fe76 	bl	8001268 <itoa>
 800357c:	f7fe fa96 	bl	8001aac <PrintToLCD>
		PrintToLCD("h MaxV:");
 8003580:	4858      	ldr	r0, [pc, #352]	; (80036e4 <MenuChargeCC_CV+0x2a8>)
 8003582:	f7fe fa93 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003586:	230a      	movs	r3, #10
 8003588:	f8db 0020 	ldr.w	r0, [fp, #32]
 800358c:	4651      	mov	r1, sl
 800358e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003592:	f7fd fee1 	bl	8001358 <itoa_koma>
 8003596:	f7fe fa89 	bl	8001aac <PrintToLCD>
		PrintToLCD("V   ");
 800359a:	4853      	ldr	r0, [pc, #332]	; (80036e8 <MenuChargeCC_CV+0x2ac>)
 800359c:	f7fe fa86 	bl	8001aac <PrintToLCD>
 80035a0:	e00f      	b.n	80035c2 <MenuChargeCC_CV+0x186>
			OFF();
 80035a2:	f7ff ff43 	bl	800342c <OFF>
			ChargeStatusForTimer = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e79a      	b.n	80034e0 <MenuChargeCC_CV+0xa4>
	if (key == KEY_BACK)
 80035aa:	f1ba 0f01 	cmp.w	sl, #1
 80035ae:	d198      	bne.n	80034e2 <MenuChargeCC_CV+0xa6>
		CountShow--;
 80035b0:	7823      	ldrb	r3, [r4, #0]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM0-1;
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	db01      	blt.n	80035be <MenuChargeCC_CV+0x182>
		CountShow--;
 80035ba:	7023      	strb	r3, [r4, #0]
 80035bc:	e791      	b.n	80034e2 <MenuChargeCC_CV+0xa6>
		if (CountShow<0) CountShow=MAXITEM0-1;
 80035be:	2302      	movs	r3, #2
 80035c0:	7023      	strb	r3, [r4, #0]
	if(CountShow == 2)
 80035c2:	f994 3000 	ldrsb.w	r3, [r4]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d11a      	bne.n	8003600 <MenuChargeCC_CV+0x1c4>
		lcd_set_xy(0,0);
 80035ca:	2100      	movs	r1, #0
 80035cc:	4608      	mov	r0, r1
 80035ce:	f7fe f9ed 	bl	80019ac <lcd_set_xy>
		PrintToLCD("C ");
 80035d2:	4846      	ldr	r0, [pc, #280]	; (80036ec <MenuChargeCC_CV+0x2b0>)
 80035d4:	f7fe fa6a 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80035d8:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <MenuChargeCC_CV+0x288>)
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80035e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80035e4:	f7fd fe40 	bl	8001268 <itoa>
 80035e8:	f7fe fa60 	bl	8001aac <PrintToLCD>
		PrintToLCD("mAh     ");
 80035ec:	4840      	ldr	r0, [pc, #256]	; (80036f0 <MenuChargeCC_CV+0x2b4>)
 80035ee:	f7fe fa5d 	bl	8001aac <PrintToLCD>
		lcd_set_xy(3,1);
 80035f2:	2003      	movs	r0, #3
 80035f4:	2101      	movs	r1, #1
 80035f6:	f7fe f9d9 	bl	80019ac <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	f7fe ff68 	bl	80024d0 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8003600:	483c      	ldr	r0, [pc, #240]	; (80036f4 <MenuChargeCC_CV+0x2b8>)
 8003602:	f001 feed 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003606:	7831      	ldrb	r1, [r6, #0]
 8003608:	2200      	movs	r2, #0
 800360a:	483b      	ldr	r0, [pc, #236]	; (80036f8 <MenuChargeCC_CV+0x2bc>)
 800360c:	f001 ff26 	bl	800545c <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003610:	4838      	ldr	r0, [pc, #224]	; (80036f4 <MenuChargeCC_CV+0x2b8>)
 8003612:	f001 fee5 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003616:	f898 1000 	ldrb.w	r1, [r8]
 800361a:	2200      	movs	r2, #0
 800361c:	4837      	ldr	r0, [pc, #220]	; (80036fc <MenuChargeCC_CV+0x2c0>)
 800361e:	f001 ff1d 	bl	800545c <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003622:	4834      	ldr	r0, [pc, #208]	; (80036f4 <MenuChargeCC_CV+0x2b8>)
 8003624:	f001 fedc 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003628:	7829      	ldrb	r1, [r5, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	4834      	ldr	r0, [pc, #208]	; (8003700 <MenuChargeCC_CV+0x2c4>)
 800362e:	f001 ff15 	bl	800545c <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003632:	4830      	ldr	r0, [pc, #192]	; (80036f4 <MenuChargeCC_CV+0x2b8>)
 8003634:	f001 fed4 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003638:	6839      	ldr	r1, [r7, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	4831      	ldr	r0, [pc, #196]	; (8003704 <MenuChargeCC_CV+0x2c8>)
 800363e:	f001 ff0d 	bl	800545c <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003642:	482c      	ldr	r0, [pc, #176]	; (80036f4 <MenuChargeCC_CV+0x2b8>)
 8003644:	f001 fecc 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003648:	f899 1000 	ldrb.w	r1, [r9]
 800364c:	2200      	movs	r2, #0
 800364e:	482e      	ldr	r0, [pc, #184]	; (8003708 <MenuChargeCC_CV+0x2cc>)
 8003650:	f001 ff04 	bl	800545c <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003654:	4827      	ldr	r0, [pc, #156]	; (80036f4 <MenuChargeCC_CV+0x2b8>)
 8003656:	f001 fec3 	bl	80053e0 <printToBufferWithoutEndUART1>
 800365a:	4b2c      	ldr	r3, [pc, #176]	; (800370c <MenuChargeCC_CV+0x2d0>)
 800365c:	2200      	movs	r2, #0
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	482b      	ldr	r0, [pc, #172]	; (8003710 <MenuChargeCC_CV+0x2d4>)
}
 8003662:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003666:	f001 bef9 	b.w	800545c <printToBufferUART1D>
			PrintToLCD(itoa_koma(U_OUT,2));
 800366a:	f8ba 0000 	ldrh.w	r0, [sl]
 800366e:	2102      	movs	r1, #2
 8003670:	b280      	uxth	r0, r0
 8003672:	f7fd fe71 	bl	8001358 <itoa_koma>
 8003676:	f7fe fa19 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 800367a:	4817      	ldr	r0, [pc, #92]	; (80036d8 <MenuChargeCC_CV+0x29c>)
 800367c:	f7fe fa16 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <MenuChargeCC_CV+0x2d8>)
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	f7fd fdf0 	bl	8001268 <itoa>
 8003688:	f7fe fa10 	bl	8001aac <PrintToLCD>
			PrintToLCD("mA     ");
 800368c:	4822      	ldr	r0, [pc, #136]	; (8003718 <MenuChargeCC_CV+0x2dc>)
 800368e:	e74b      	b.n	8003528 <MenuChargeCC_CV+0xec>
			if (Blink_message_counter<=5)
 8003690:	f89a 3000 	ldrb.w	r3, [sl]
 8003694:	2b05      	cmp	r3, #5
 8003696:	f67f af52 	bls.w	800353e <MenuChargeCC_CV+0x102>
					lcd_set_xy(7,1);
 800369a:	f7fe f987 	bl	80019ac <lcd_set_xy>
					LcdOutbyNumber(1,1);
 800369e:	2101      	movs	r1, #1
 80036a0:	4608      	mov	r0, r1
 80036a2:	e750      	b.n	8003546 <MenuChargeCC_CV+0x10a>
 80036a4:	200007b1 	.word	0x200007b1
 80036a8:	200007b0 	.word	0x200007b0
 80036ac:	20000797 	.word	0x20000797
 80036b0:	20000798 	.word	0x20000798
 80036b4:	20000884 	.word	0x20000884
 80036b8:	20000154 	.word	0x20000154
 80036bc:	080062e3 	.word	0x080062e3
 80036c0:	080062f4 	.word	0x080062f4
 80036c4:	20000788 	.word	0x20000788
 80036c8:	20000a28 	.word	0x20000a28
 80036cc:	2000087c 	.word	0x2000087c
 80036d0:	2000079d 	.word	0x2000079d
 80036d4:	200007b2 	.word	0x200007b2
 80036d8:	080061c2 	.word	0x080061c2
 80036dc:	080060a7 	.word	0x080060a7
 80036e0:	080063ec 	.word	0x080063ec
 80036e4:	080063ef 	.word	0x080063ef
 80036e8:	08006065 	.word	0x08006065
 80036ec:	080063f7 	.word	0x080063f7
 80036f0:	080063fa 	.word	0x080063fa
 80036f4:	08005ac8 	.word	0x08005ac8
 80036f8:	08006403 	.word	0x08006403
 80036fc:	08006345 	.word	0x08006345
 8003700:	0800635a 	.word	0x0800635a
 8003704:	0800636f 	.word	0x0800636f
 8003708:	08006397 	.word	0x08006397
 800370c:	200007a8 	.word	0x200007a8
 8003710:	080063af 	.word	0x080063af
 8003714:	200002b4 	.word	0x200002b4
 8003718:	08006316 	.word	0x08006316
 800371c:	200007a4 	.word	0x200007a4
 8003720:	20000795 	.word	0x20000795

08003724 <MenuChargeAdapt>:
	EnterInMenu_Status = 1;
 8003724:	2201      	movs	r2, #1
{
 8003726:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 800372a:	4ebc      	ldr	r6, [pc, #752]	; (8003a1c <MenuChargeAdapt+0x2f8>)
	EnterInMenu_Status = 1;
 800372c:	4bbc      	ldr	r3, [pc, #752]	; (8003a20 <MenuChargeAdapt+0x2fc>)
	if (InitiStatus==0)
 800372e:	7835      	ldrb	r5, [r6, #0]
{
 8003730:	4682      	mov	sl, r0
 8003732:	4698      	mov	r8, r3
 8003734:	4cbb      	ldr	r4, [pc, #748]	; (8003a24 <MenuChargeAdapt+0x300>)
 8003736:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8003a94 <MenuChargeAdapt+0x370>
 800373a:	4fbb      	ldr	r7, [pc, #748]	; (8003a28 <MenuChargeAdapt+0x304>)
	EnterInMenu_Status = 1;
 800373c:	701a      	strb	r2, [r3, #0]
	if (InitiStatus==0)
 800373e:	bb35      	cbnz	r5, 800378e <MenuChargeAdapt+0x6a>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003740:	4bba      	ldr	r3, [pc, #744]	; (8003a2c <MenuChargeAdapt+0x308>)
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	4bba      	ldr	r3, [pc, #744]	; (8003a30 <MenuChargeAdapt+0x30c>)
 8003746:	b292      	uxth	r2, r2
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	3305      	adds	r3, #5
 800374c:	429a      	cmp	r2, r3
 800374e:	d215      	bcs.n	800377c <MenuChargeAdapt+0x58>
			lcd_set_xy(0,0);
 8003750:	4629      	mov	r1, r5
 8003752:	4628      	mov	r0, r5
 8003754:	f7fe f92a 	bl	80019ac <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003758:	48b6      	ldr	r0, [pc, #728]	; (8003a34 <MenuChargeAdapt+0x310>)
 800375a:	f7fe f9a7 	bl	8001aac <PrintToLCD>
			delay_ms(2000);
 800375e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003762:	f7fd fc65 	bl	8001030 <delay_ms>
			lcd_set_xy(0,0);
 8003766:	4629      	mov	r1, r5
 8003768:	4628      	mov	r0, r5
 800376a:	f7fe f91f 	bl	80019ac <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 800376e:	48b2      	ldr	r0, [pc, #712]	; (8003a38 <MenuChargeAdapt+0x314>)
 8003770:	f7fe f99c 	bl	8001aac <PrintToLCD>
			delay_ms(3000);
 8003774:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003778:	f7fd fc5a 	bl	8001030 <delay_ms>
		ChargeStatusForTimer = 0;
 800377c:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 800377e:	4aaf      	ldr	r2, [pc, #700]	; (8003a3c <MenuChargeAdapt+0x318>)
		ChargeStatusForTimer = 0;
 8003780:	7023      	strb	r3, [r4, #0]
		DisChargeStatusForTimer = 0;
 8003782:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 8003786:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 8003788:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 800378a:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 800378c:	7032      	strb	r2, [r6, #0]
	if (ChargeTimeSec > ChargeDurationSec)
 800378e:	4bac      	ldr	r3, [pc, #688]	; (8003a40 <MenuChargeAdapt+0x31c>)
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d972      	bls.n	800387e <MenuChargeAdapt+0x15a>
			OFF();
 8003798:	f7ff fe48 	bl	800342c <OFF>
			ChargeStatusForTimer = 0;
 800379c:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 800379e:	7023      	strb	r3, [r4, #0]
    OUTStateAfterPowerUpFunction();
 80037a0:	f7fe ff00 	bl	80025a4 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 80037a4:	f1ba 0f02 	cmp.w	sl, #2
 80037a8:	4da6      	ldr	r5, [pc, #664]	; (8003a44 <MenuChargeAdapt+0x320>)
 80037aa:	f040 8082 	bne.w	80038b2 <MenuChargeAdapt+0x18e>
		if (On_off == 0)
 80037ae:	4ba6      	ldr	r3, [pc, #664]	; (8003a48 <MenuChargeAdapt+0x324>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d179      	bne.n	80038aa <MenuChargeAdapt+0x186>
			charge();
 80037b6:	f7ff facb 	bl	8002d50 <charge>
			ChargeStatusForTimer = 1;
 80037ba:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 80037bc:	7023      	strb	r3, [r4, #0]
	if(CountShow == 0)
 80037be:	f995 1000 	ldrsb.w	r1, [r5]
 80037c2:	2900      	cmp	r1, #0
 80037c4:	d136      	bne.n	8003834 <MenuChargeAdapt+0x110>
		lcd_set_xy(0,0);
 80037c6:	4608      	mov	r0, r1
 80037c8:	f7fe f8f0 	bl	80019ac <lcd_set_xy>
		if (On_off ==0)
 80037cc:	4b9e      	ldr	r3, [pc, #632]	; (8003a48 <MenuChargeAdapt+0x324>)
 80037ce:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8003a5c <MenuChargeAdapt+0x338>
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	469b      	mov	fp, r3
 80037d6:	2a00      	cmp	r2, #0
 80037d8:	f040 8102 	bne.w	80039e0 <MenuChargeAdapt+0x2bc>
			PrintToLCD(itoa_koma(U_PS,2));
 80037dc:	4b93      	ldr	r3, [pc, #588]	; (8003a2c <MenuChargeAdapt+0x308>)
 80037de:	2102      	movs	r1, #2
 80037e0:	8818      	ldrh	r0, [r3, #0]
 80037e2:	b280      	uxth	r0, r0
 80037e4:	f7fd fdb8 	bl	8001358 <itoa_koma>
 80037e8:	f7fe f960 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 80037ec:	4897      	ldr	r0, [pc, #604]	; (8003a4c <MenuChargeAdapt+0x328>)
 80037ee:	f7fe f95d 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 80037f2:	f8ba 0000 	ldrh.w	r0, [sl]
 80037f6:	2102      	movs	r1, #2
 80037f8:	b280      	uxth	r0, r0
 80037fa:	f7fd fdad 	bl	8001358 <itoa_koma>
 80037fe:	f7fe f955 	bl	8001aac <PrintToLCD>
			PrintToLCD("V   ");
 8003802:	4893      	ldr	r0, [pc, #588]	; (8003a50 <MenuChargeAdapt+0x32c>)
			PrintToLCD("mA      ");
 8003804:	f7fe f952 	bl	8001aac <PrintToLCD>
		if (On_off ==0)
 8003808:	f89b 3000 	ldrb.w	r3, [fp]
			lcd_set_xy(7,1);
 800380c:	2101      	movs	r1, #1
 800380e:	2007      	movs	r0, #7
 8003810:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003a98 <MenuChargeAdapt+0x374>
		if (On_off ==0)
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 80f6 	bne.w	8003a06 <MenuChargeAdapt+0x2e2>
			lcd_set_xy(7,1);
 800381a:	f7fe f8c7 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(0,1);
 800381e:	2101      	movs	r1, #1
 8003820:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 8003822:	f7fe f8eb 	bl	80019fc <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8003826:	f89a 3000 	ldrb.w	r3, [sl]
 800382a:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 800382c:	bf84      	itt	hi
 800382e:	2300      	movhi	r3, #0
 8003830:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8003834:	f995 a000 	ldrsb.w	sl, [r5]
 8003838:	f1ba 0f01 	cmp.w	sl, #1
 800383c:	d145      	bne.n	80038ca <MenuChargeAdapt+0x1a6>
		lcd_set_xy(0,0);
 800383e:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003840:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8003a30 <MenuChargeAdapt+0x30c>
		lcd_set_xy(0,0);
 8003844:	4608      	mov	r0, r1
 8003846:	f7fe f8b1 	bl	80019ac <lcd_set_xy>
		PrintToLCD("T:");
 800384a:	4882      	ldr	r0, [pc, #520]	; (8003a54 <MenuChargeAdapt+0x330>)
 800384c:	f7fe f92e 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003850:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003854:	f7fd fd08 	bl	8001268 <itoa>
 8003858:	f7fe f928 	bl	8001aac <PrintToLCD>
		PrintToLCD("h MaxV:");
 800385c:	487e      	ldr	r0, [pc, #504]	; (8003a58 <MenuChargeAdapt+0x334>)
 800385e:	f7fe f925 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003862:	230a      	movs	r3, #10
 8003864:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003868:	4651      	mov	r1, sl
 800386a:	fbb0 f0f3 	udiv	r0, r0, r3
 800386e:	f7fd fd73 	bl	8001358 <itoa_koma>
 8003872:	f7fe f91b 	bl	8001aac <PrintToLCD>
		PrintToLCD("V   ");
 8003876:	4876      	ldr	r0, [pc, #472]	; (8003a50 <MenuChargeAdapt+0x32c>)
 8003878:	f7fe f918 	bl	8001aac <PrintToLCD>
 800387c:	e025      	b.n	80038ca <MenuChargeAdapt+0x1a6>
		if (U_OUT> SettingsData.MaxVoltage)
 800387e:	4977      	ldr	r1, [pc, #476]	; (8003a5c <MenuChargeAdapt+0x338>)
 8003880:	486b      	ldr	r0, [pc, #428]	; (8003a30 <MenuChargeAdapt+0x30c>)
 8003882:	880a      	ldrh	r2, [r1, #0]
 8003884:	6a03      	ldr	r3, [r0, #32]
 8003886:	b292      	uxth	r2, r2
 8003888:	429a      	cmp	r2, r3
 800388a:	d885      	bhi.n	8003798 <MenuChargeAdapt+0x74>
			if (U_OUT< (SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))   )
 800388c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800388e:	2064      	movs	r0, #100	; 0x64
 8003890:	435a      	muls	r2, r3
 8003892:	fbb2 f2f0 	udiv	r2, r2, r0
 8003896:	8809      	ldrh	r1, [r1, #0]
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	b289      	uxth	r1, r1
 800389c:	4299      	cmp	r1, r3
 800389e:	f4bf af7f 	bcs.w	80037a0 <MenuChargeAdapt+0x7c>
				charge();
 80038a2:	f7ff fa55 	bl	8002d50 <charge>
				ChargeStatusForTimer = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e779      	b.n	800379e <MenuChargeAdapt+0x7a>
			OFF();
 80038aa:	f7ff fdbf 	bl	800342c <OFF>
			ChargeStatusForTimer = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e784      	b.n	80037bc <MenuChargeAdapt+0x98>
	if (key == KEY_BACK)
 80038b2:	f1ba 0f01 	cmp.w	sl, #1
 80038b6:	d182      	bne.n	80037be <MenuChargeAdapt+0x9a>
		CountShow--;
 80038b8:	782b      	ldrb	r3, [r5, #0]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM1-1;
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db01      	blt.n	80038c6 <MenuChargeAdapt+0x1a2>
		CountShow--;
 80038c2:	702b      	strb	r3, [r5, #0]
 80038c4:	e77b      	b.n	80037be <MenuChargeAdapt+0x9a>
		if (CountShow<0) CountShow=MAXITEM1-1;
 80038c6:	2303      	movs	r3, #3
 80038c8:	702b      	strb	r3, [r5, #0]
	if(CountShow == 2)
 80038ca:	f995 3000 	ldrsb.w	r3, [r5]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d12f      	bne.n	8003932 <MenuChargeAdapt+0x20e>
		lcd_set_xy(0,0);
 80038d2:	2100      	movs	r1, #0
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80038d4:	f04f 0a0a 	mov.w	sl, #10
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 80038d8:	f8df b154 	ldr.w	fp, [pc, #340]	; 8003a30 <MenuChargeAdapt+0x30c>
		lcd_set_xy(0,0);
 80038dc:	4608      	mov	r0, r1
 80038de:	f7fe f865 	bl	80019ac <lcd_set_xy>
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 80038e2:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 80038e6:	f7fd fcbf 	bl	8001268 <itoa>
 80038ea:	f7fe f8df 	bl	8001aac <PrintToLCD>
		PrintToLCD("% ");
 80038ee:	485c      	ldr	r0, [pc, #368]	; (8003a60 <MenuChargeAdapt+0x33c>)
 80038f0:	f7fe f8dc 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80038f4:	f8db 0020 	ldr.w	r0, [fp, #32]
 80038f8:	2101      	movs	r1, #1
 80038fa:	fbb0 f0fa 	udiv	r0, r0, sl
 80038fe:	f7fd fd2b 	bl	8001358 <itoa_koma>
 8003902:	f7fe f8d3 	bl	8001aac <PrintToLCD>
		PrintToLCD("V ");
 8003906:	4851      	ldr	r0, [pc, #324]	; (8003a4c <MenuChargeAdapt+0x328>)
 8003908:	f7fe f8d0 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))/10,1));
 800390c:	2264      	movs	r2, #100	; 0x64
 800390e:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003912:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 8003916:	2101      	movs	r1, #1
 8003918:	4358      	muls	r0, r3
 800391a:	fbb0 f0f2 	udiv	r0, r0, r2
 800391e:	1a18      	subs	r0, r3, r0
 8003920:	fbb0 f0fa 	udiv	r0, r0, sl
 8003924:	f7fd fd18 	bl	8001358 <itoa_koma>
 8003928:	f7fe f8c0 	bl	8001aac <PrintToLCD>
		PrintToLCD("V   ");
 800392c:	4848      	ldr	r0, [pc, #288]	; (8003a50 <MenuChargeAdapt+0x32c>)
 800392e:	f7fe f8bd 	bl	8001aac <PrintToLCD>
	if(CountShow == 3)
 8003932:	f995 5000 	ldrsb.w	r5, [r5]
 8003936:	2d03      	cmp	r5, #3
 8003938:	d11a      	bne.n	8003970 <MenuChargeAdapt+0x24c>
		lcd_set_xy(0,0);
 800393a:	2100      	movs	r1, #0
 800393c:	4608      	mov	r0, r1
 800393e:	f7fe f835 	bl	80019ac <lcd_set_xy>
		PrintToLCD("C ");
 8003942:	4848      	ldr	r0, [pc, #288]	; (8003a64 <MenuChargeAdapt+0x340>)
 8003944:	f7fe f8b2 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003948:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <MenuChargeAdapt+0x318>)
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003950:	fbb0 f0f3 	udiv	r0, r0, r3
 8003954:	f7fd fc88 	bl	8001268 <itoa>
 8003958:	f7fe f8a8 	bl	8001aac <PrintToLCD>
		PrintToLCD("mAH     ");
 800395c:	4842      	ldr	r0, [pc, #264]	; (8003a68 <MenuChargeAdapt+0x344>)
 800395e:	f7fe f8a5 	bl	8001aac <PrintToLCD>
		lcd_set_xy(3,1);
 8003962:	4628      	mov	r0, r5
 8003964:	2101      	movs	r1, #1
 8003966:	f7fe f821 	bl	80019ac <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 800396a:	6838      	ldr	r0, [r7, #0]
 800396c:	f7fe fdb0 	bl	80024d0 <ClockOnLCD_noSec>
	delay_ms(MENUDELAY);
 8003970:	2064      	movs	r0, #100	; 0x64
 8003972:	f7fd fb5d 	bl	8001030 <delay_ms>
	logDebugD("Init status: ",InitiStatus,0);
 8003976:	483d      	ldr	r0, [pc, #244]	; (8003a6c <MenuChargeAdapt+0x348>)
 8003978:	f001 fd32 	bl	80053e0 <printToBufferWithoutEndUART1>
 800397c:	7831      	ldrb	r1, [r6, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	483b      	ldr	r0, [pc, #236]	; (8003a70 <MenuChargeAdapt+0x34c>)
 8003982:	f001 fd6b 	bl	800545c <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003986:	4839      	ldr	r0, [pc, #228]	; (8003a6c <MenuChargeAdapt+0x348>)
 8003988:	f001 fd2a 	bl	80053e0 <printToBufferWithoutEndUART1>
 800398c:	f898 1000 	ldrb.w	r1, [r8]
 8003990:	2200      	movs	r2, #0
 8003992:	4838      	ldr	r0, [pc, #224]	; (8003a74 <MenuChargeAdapt+0x350>)
 8003994:	f001 fd62 	bl	800545c <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003998:	4834      	ldr	r0, [pc, #208]	; (8003a6c <MenuChargeAdapt+0x348>)
 800399a:	f001 fd21 	bl	80053e0 <printToBufferWithoutEndUART1>
 800399e:	7821      	ldrb	r1, [r4, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	4835      	ldr	r0, [pc, #212]	; (8003a78 <MenuChargeAdapt+0x354>)
 80039a4:	f001 fd5a 	bl	800545c <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80039a8:	4830      	ldr	r0, [pc, #192]	; (8003a6c <MenuChargeAdapt+0x348>)
 80039aa:	f001 fd19 	bl	80053e0 <printToBufferWithoutEndUART1>
 80039ae:	6839      	ldr	r1, [r7, #0]
 80039b0:	2200      	movs	r2, #0
 80039b2:	4832      	ldr	r0, [pc, #200]	; (8003a7c <MenuChargeAdapt+0x358>)
 80039b4:	f001 fd52 	bl	800545c <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80039b8:	482c      	ldr	r0, [pc, #176]	; (8003a6c <MenuChargeAdapt+0x348>)
 80039ba:	f001 fd11 	bl	80053e0 <printToBufferWithoutEndUART1>
 80039be:	f899 1000 	ldrb.w	r1, [r9]
 80039c2:	2200      	movs	r2, #0
 80039c4:	482e      	ldr	r0, [pc, #184]	; (8003a80 <MenuChargeAdapt+0x35c>)
 80039c6:	f001 fd49 	bl	800545c <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80039ca:	4828      	ldr	r0, [pc, #160]	; (8003a6c <MenuChargeAdapt+0x348>)
 80039cc:	f001 fd08 	bl	80053e0 <printToBufferWithoutEndUART1>
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <MenuChargeAdapt+0x360>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	482c      	ldr	r0, [pc, #176]	; (8003a88 <MenuChargeAdapt+0x364>)
}
 80039d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80039dc:	f001 bd3e 	b.w	800545c <printToBufferUART1D>
			PrintToLCD(itoa_koma(U_OUT,2));
 80039e0:	f8ba 0000 	ldrh.w	r0, [sl]
 80039e4:	2102      	movs	r1, #2
 80039e6:	b280      	uxth	r0, r0
 80039e8:	f7fd fcb6 	bl	8001358 <itoa_koma>
 80039ec:	f7fe f85e 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 80039f0:	4816      	ldr	r0, [pc, #88]	; (8003a4c <MenuChargeAdapt+0x328>)
 80039f2:	f7fe f85b 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(Current));
 80039f6:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <MenuChargeAdapt+0x368>)
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	f7fd fc35 	bl	8001268 <itoa>
 80039fe:	f7fe f855 	bl	8001aac <PrintToLCD>
			PrintToLCD("mA      ");
 8003a02:	4823      	ldr	r0, [pc, #140]	; (8003a90 <MenuChargeAdapt+0x36c>)
 8003a04:	e6fe      	b.n	8003804 <MenuChargeAdapt+0xe0>
			if (Blink_message_counter<=5)
 8003a06:	f89a 3000 	ldrb.w	r3, [sl]
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	f67f af05 	bls.w	800381a <MenuChargeAdapt+0xf6>
					lcd_set_xy(7,1);
 8003a10:	f7fd ffcc 	bl	80019ac <lcd_set_xy>
					LcdOutbyNumber(1,1);
 8003a14:	2101      	movs	r1, #1
 8003a16:	4608      	mov	r0, r1
 8003a18:	e703      	b.n	8003822 <MenuChargeAdapt+0xfe>
 8003a1a:	bf00      	nop
 8003a1c:	200007b1 	.word	0x200007b1
 8003a20:	200007b0 	.word	0x200007b0
 8003a24:	20000797 	.word	0x20000797
 8003a28:	20000798 	.word	0x20000798
 8003a2c:	20000884 	.word	0x20000884
 8003a30:	20000154 	.word	0x20000154
 8003a34:	080062e3 	.word	0x080062e3
 8003a38:	080062f4 	.word	0x080062f4
 8003a3c:	20000788 	.word	0x20000788
 8003a40:	20000a28 	.word	0x20000a28
 8003a44:	2000079d 	.word	0x2000079d
 8003a48:	200007b2 	.word	0x200007b2
 8003a4c:	080061c2 	.word	0x080061c2
 8003a50:	08006065 	.word	0x08006065
 8003a54:	080063ec 	.word	0x080063ec
 8003a58:	080063ef 	.word	0x080063ef
 8003a5c:	2000087c 	.word	0x2000087c
 8003a60:	080061bf 	.word	0x080061bf
 8003a64:	080063f7 	.word	0x080063f7
 8003a68:	0800632b 	.word	0x0800632b
 8003a6c:	08005ac8 	.word	0x08005ac8
 8003a70:	08006403 	.word	0x08006403
 8003a74:	08006345 	.word	0x08006345
 8003a78:	0800635a 	.word	0x0800635a
 8003a7c:	0800636f 	.word	0x0800636f
 8003a80:	08006397 	.word	0x08006397
 8003a84:	200007a8 	.word	0x200007a8
 8003a88:	080063af 	.word	0x080063af
 8003a8c:	200002b4 	.word	0x200002b4
 8003a90:	08006411 	.word	0x08006411
 8003a94:	200007a4 	.word	0x200007a4
 8003a98:	20000795 	.word	0x20000795

08003a9c <MenuDisCharge>:
	EnterInMenu_Status = 1;
 8003a9c:	2101      	movs	r1, #1
{
 8003a9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (InitiStatus==0)
 8003aa2:	4d89      	ldr	r5, [pc, #548]	; (8003cc8 <MenuDisCharge+0x22c>)
	EnterInMenu_Status = 1;
 8003aa4:	4e89      	ldr	r6, [pc, #548]	; (8003ccc <MenuDisCharge+0x230>)
	if (InitiStatus==0)
 8003aa6:	782b      	ldrb	r3, [r5, #0]
 8003aa8:	4a89      	ldr	r2, [pc, #548]	; (8003cd0 <MenuDisCharge+0x234>)
	EnterInMenu_Status = 1;
 8003aaa:	7031      	strb	r1, [r6, #0]
	if (InitiStatus==0)
 8003aac:	b94b      	cbnz	r3, 8003ac2 <MenuDisCharge+0x26>
		InitiStatus = 1;
 8003aae:	7029      	strb	r1, [r5, #0]
		ChargeStatusForTimer = 0;
 8003ab0:	4988      	ldr	r1, [pc, #544]	; (8003cd4 <MenuDisCharge+0x238>)
		BatteryLow=0;
 8003ab2:	7013      	strb	r3, [r2, #0]
		ChargeStatusForTimer = 0;
 8003ab4:	700b      	strb	r3, [r1, #0]
		DisChargeStatusForTimer = 0;
 8003ab6:	4988      	ldr	r1, [pc, #544]	; (8003cd8 <MenuDisCharge+0x23c>)
 8003ab8:	700b      	strb	r3, [r1, #0]
		BatteryCapacityDischargeCurrent = 0;
 8003aba:	4988      	ldr	r1, [pc, #544]	; (8003cdc <MenuDisCharge+0x240>)
 8003abc:	600b      	str	r3, [r1, #0]
		DischargeTimeSec = 0;
 8003abe:	4988      	ldr	r1, [pc, #544]	; (8003ce0 <MenuDisCharge+0x244>)
 8003ac0:	600b      	str	r3, [r1, #0]
	U_BatteryTmp = U_OUT;
 8003ac2:	4f88      	ldr	r7, [pc, #544]	; (8003ce4 <MenuDisCharge+0x248>)
 8003ac4:	4988      	ldr	r1, [pc, #544]	; (8003ce8 <MenuDisCharge+0x24c>)
 8003ac6:	883b      	ldrh	r3, [r7, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	800b      	strh	r3, [r1, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 8003acc:	4987      	ldr	r1, [pc, #540]	; (8003cec <MenuDisCharge+0x250>)
 8003ace:	698c      	ldr	r4, [r1, #24]
 8003ad0:	4688      	mov	r8, r1
 8003ad2:	42a3      	cmp	r3, r4
 8003ad4:	f0c0 80f0 	bcc.w	8003cb8 <MenuDisCharge+0x21c>
 8003ad8:	2300      	movs	r3, #0
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8003ada:	4985      	ldr	r1, [pc, #532]	; (8003cf0 <MenuDisCharge+0x254>)
		BatteryLow = 1;
 8003adc:	7013      	strb	r3, [r2, #0]
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8003ade:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <MenuDisCharge+0x258>)
 8003ae0:	6809      	ldr	r1, [r1, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8003cd8 <MenuDisCharge+0x23c>
 8003ae8:	1a5b      	subs	r3, r3, r1
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d906      	bls.n	8003afc <MenuDisCharge+0x60>
 8003aee:	7813      	ldrb	r3, [r2, #0]
 8003af0:	b123      	cbz	r3, 8003afc <MenuDisCharge+0x60>
		OFF();
 8003af2:	f7ff fc9b 	bl	800342c <OFF>
		DisChargeStatusForTimer = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f889 3000 	strb.w	r3, [r9]
	if (key == KEY_NEXT)
 8003afc:	2802      	cmp	r0, #2
 8003afe:	4c7e      	ldr	r4, [pc, #504]	; (8003cf8 <MenuDisCharge+0x25c>)
 8003b00:	d151      	bne.n	8003ba6 <MenuDisCharge+0x10a>
    	if (On_off == 0)
 8003b02:	4b7e      	ldr	r3, [pc, #504]	; (8003cfc <MenuDisCharge+0x260>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d149      	bne.n	8003b9e <MenuDisCharge+0x102>
    		discharge();
 8003b0a:	f7fe ffed 	bl	8002ae8 <discharge>
    		DisChargeStatusForTimer = 1;
 8003b0e:	2301      	movs	r3, #1
    		DisChargeStatusForTimer = 0;
 8003b10:	f889 3000 	strb.w	r3, [r9]
	if(CountShow == 0)
 8003b14:	f994 1000 	ldrsb.w	r1, [r4]
 8003b18:	bb41      	cbnz	r1, 8003b6c <MenuDisCharge+0xd0>
		lcd_set_xy(0,0);
 8003b1a:	4608      	mov	r0, r1
 8003b1c:	f7fd ff46 	bl	80019ac <lcd_set_xy>
		PrintToLCD(itoa_koma(U_OUT ,2));
 8003b20:	8838      	ldrh	r0, [r7, #0]
 8003b22:	2102      	movs	r1, #2
 8003b24:	b280      	uxth	r0, r0
 8003b26:	f7fd fc17 	bl	8001358 <itoa_koma>
 8003b2a:	f7fd ffbf 	bl	8001aac <PrintToLCD>
		PrintToLCD("V ");
 8003b2e:	4874      	ldr	r0, [pc, #464]	; (8003d00 <MenuDisCharge+0x264>)
 8003b30:	f7fd ffbc 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(Current ));
 8003b34:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <MenuDisCharge+0x268>)
 8003b36:	4f74      	ldr	r7, [pc, #464]	; (8003d08 <MenuDisCharge+0x26c>)
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	f7fd fb95 	bl	8001268 <itoa>
 8003b3e:	f7fd ffb5 	bl	8001aac <PrintToLCD>
		PrintToLCD("mA      ");
 8003b42:	4872      	ldr	r0, [pc, #456]	; (8003d0c <MenuDisCharge+0x270>)
 8003b44:	f7fd ffb2 	bl	8001aac <PrintToLCD>
		if (On_off ==0)
 8003b48:	4b6c      	ldr	r3, [pc, #432]	; (8003cfc <MenuDisCharge+0x260>)
				lcd_set_xy(7,1);
 8003b4a:	2101      	movs	r1, #1
		if (On_off ==0)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
				lcd_set_xy(7,1);
 8003b4e:	2007      	movs	r0, #7
		if (On_off ==0)
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f040 80a8 	bne.w	8003ca6 <MenuDisCharge+0x20a>
				lcd_set_xy(7,1);
 8003b56:	f7fd ff29 	bl	80019ac <lcd_set_xy>
				LcdOutbyNumber(2,1);
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	2002      	movs	r0, #2
						LcdOutbyNumber(3,1);
 8003b5e:	f7fd ff4d 	bl	80019fc <LcdOutbyNumber>
			if (Blink_message_counter>10)
 8003b62:	783b      	ldrb	r3, [r7, #0]
 8003b64:	2b0a      	cmp	r3, #10
				Blink_message_counter = 0;
 8003b66:	bf84      	itt	hi
 8003b68:	2300      	movhi	r3, #0
 8003b6a:	703b      	strbhi	r3, [r7, #0]
	if(CountShow == 1)
 8003b6c:	f994 7000 	ldrsb.w	r7, [r4]
 8003b70:	2f01      	cmp	r7, #1
 8003b72:	d123      	bne.n	8003bbc <MenuDisCharge+0x120>
		lcd_set_xy(0,0);
 8003b74:	2100      	movs	r1, #0
 8003b76:	4608      	mov	r0, r1
 8003b78:	f7fd ff18 	bl	80019ac <lcd_set_xy>
		PrintToLCD("OffWhen Vb<");
 8003b7c:	4864      	ldr	r0, [pc, #400]	; (8003d10 <MenuDisCharge+0x274>)
 8003b7e:	f7fd ff95 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.LowVoltage/10 ,1));
 8003b82:	230a      	movs	r3, #10
 8003b84:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003b88:	4639      	mov	r1, r7
 8003b8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b8e:	f7fd fbe3 	bl	8001358 <itoa_koma>
 8003b92:	f7fd ff8b 	bl	8001aac <PrintToLCD>
		PrintToLCD("V   ");
 8003b96:	485f      	ldr	r0, [pc, #380]	; (8003d14 <MenuDisCharge+0x278>)
 8003b98:	f7fd ff88 	bl	8001aac <PrintToLCD>
 8003b9c:	e00e      	b.n	8003bbc <MenuDisCharge+0x120>
    		OFF();
 8003b9e:	f7ff fc45 	bl	800342c <OFF>
    		DisChargeStatusForTimer = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e7b4      	b.n	8003b10 <MenuDisCharge+0x74>
	if (key == KEY_BACK)
 8003ba6:	2801      	cmp	r0, #1
 8003ba8:	d1b4      	bne.n	8003b14 <MenuDisCharge+0x78>
		CountShow--;
 8003baa:	7823      	ldrb	r3, [r4, #0]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM2-1;
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db01      	blt.n	8003bb8 <MenuDisCharge+0x11c>
		CountShow--;
 8003bb4:	7023      	strb	r3, [r4, #0]
 8003bb6:	e7ad      	b.n	8003b14 <MenuDisCharge+0x78>
		if (CountShow<0) CountShow=MAXITEM2-1;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	7023      	strb	r3, [r4, #0]
	if(CountShow == 2)
 8003bbc:	f994 3000 	ldrsb.w	r3, [r4]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d11b      	bne.n	8003bfc <MenuDisCharge+0x160>
		lcd_set_xy(0,0);
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	f7fd fef0 	bl	80019ac <lcd_set_xy>
		PrintToLCD("P ");
 8003bcc:	4852      	ldr	r0, [pc, #328]	; (8003d18 <MenuDisCharge+0x27c>)
 8003bce:	f7fd ff6d 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(SaveDataWhenPowerOff.CurrentConsumption5ms/3600 ));
 8003bd2:	4b52      	ldr	r3, [pc, #328]	; (8003d1c <MenuDisCharge+0x280>)
 8003bd4:	6898      	ldr	r0, [r3, #8]
 8003bd6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003bda:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bde:	f7fd fb43 	bl	8001268 <itoa>
 8003be2:	f7fd ff63 	bl	8001aac <PrintToLCD>
		PrintToLCD("mAh     ");
 8003be6:	484e      	ldr	r0, [pc, #312]	; (8003d20 <MenuDisCharge+0x284>)
 8003be8:	f7fd ff60 	bl	8001aac <PrintToLCD>
		lcd_set_xy(3,1);
 8003bec:	2003      	movs	r0, #3
 8003bee:	2101      	movs	r1, #1
 8003bf0:	f7fd fedc 	bl	80019ac <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8003bf4:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <MenuDisCharge+0x288>)
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	f7fe fc6a 	bl	80024d0 <ClockOnLCD_noSec>
	if(CountShow == 3)
 8003bfc:	f994 7000 	ldrsb.w	r7, [r4]
 8003c00:	4c37      	ldr	r4, [pc, #220]	; (8003ce0 <MenuDisCharge+0x244>)
 8003c02:	2f03      	cmp	r7, #3
 8003c04:	d11a      	bne.n	8003c3c <MenuDisCharge+0x1a0>
		lcd_set_xy(0,0);
 8003c06:	2100      	movs	r1, #0
 8003c08:	4608      	mov	r0, r1
 8003c0a:	f7fd fecf 	bl	80019ac <lcd_set_xy>
		PrintToLCD("N ");
 8003c0e:	4846      	ldr	r0, [pc, #280]	; (8003d28 <MenuDisCharge+0x28c>)
 8003c10:	f7fd ff4c 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600 ));
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <MenuDisCharge+0x240>)
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003c1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c20:	f7fd fb22 	bl	8001268 <itoa>
 8003c24:	f7fd ff42 	bl	8001aac <PrintToLCD>
		PrintToLCD("mAH     ");
 8003c28:	4840      	ldr	r0, [pc, #256]	; (8003d2c <MenuDisCharge+0x290>)
 8003c2a:	f7fd ff3f 	bl	8001aac <PrintToLCD>
		lcd_set_xy(3,1);
 8003c2e:	4638      	mov	r0, r7
 8003c30:	2101      	movs	r1, #1
 8003c32:	f7fd febb 	bl	80019ac <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec);
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	f7fe fc4a 	bl	80024d0 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8003c3c:	483c      	ldr	r0, [pc, #240]	; (8003d30 <MenuDisCharge+0x294>)
 8003c3e:	f001 fbcf 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003c42:	7829      	ldrb	r1, [r5, #0]
 8003c44:	2200      	movs	r2, #0
 8003c46:	483b      	ldr	r0, [pc, #236]	; (8003d34 <MenuDisCharge+0x298>)
 8003c48:	f001 fc08 	bl	800545c <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003c4c:	4838      	ldr	r0, [pc, #224]	; (8003d30 <MenuDisCharge+0x294>)
 8003c4e:	f001 fbc7 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003c52:	7831      	ldrb	r1, [r6, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	4838      	ldr	r0, [pc, #224]	; (8003d38 <MenuDisCharge+0x29c>)
 8003c58:	f001 fc00 	bl	800545c <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003c5c:	4834      	ldr	r0, [pc, #208]	; (8003d30 <MenuDisCharge+0x294>)
 8003c5e:	f001 fbbf 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <MenuDisCharge+0x238>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	7819      	ldrb	r1, [r3, #0]
 8003c68:	4834      	ldr	r0, [pc, #208]	; (8003d3c <MenuDisCharge+0x2a0>)
 8003c6a:	f001 fbf7 	bl	800545c <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003c6e:	4830      	ldr	r0, [pc, #192]	; (8003d30 <MenuDisCharge+0x294>)
 8003c70:	f001 fbb6 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003c74:	4b32      	ldr	r3, [pc, #200]	; (8003d40 <MenuDisCharge+0x2a4>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	4832      	ldr	r0, [pc, #200]	; (8003d44 <MenuDisCharge+0x2a8>)
 8003c7c:	f001 fbee 	bl	800545c <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003c80:	482b      	ldr	r0, [pc, #172]	; (8003d30 <MenuDisCharge+0x294>)
 8003c82:	f001 fbad 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003c86:	f899 1000 	ldrb.w	r1, [r9]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	482e      	ldr	r0, [pc, #184]	; (8003d48 <MenuDisCharge+0x2ac>)
 8003c8e:	f001 fbe5 	bl	800545c <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003c92:	4827      	ldr	r0, [pc, #156]	; (8003d30 <MenuDisCharge+0x294>)
 8003c94:	f001 fba4 	bl	80053e0 <printToBufferWithoutEndUART1>
 8003c98:	6821      	ldr	r1, [r4, #0]
 8003c9a:	2200      	movs	r2, #0
}
 8003c9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003ca0:	482a      	ldr	r0, [pc, #168]	; (8003d4c <MenuDisCharge+0x2b0>)
 8003ca2:	f001 bbdb 	b.w	800545c <printToBufferUART1D>
				if (Blink_message_counter<=5)
 8003ca6:	783b      	ldrb	r3, [r7, #0]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	f67f af54 	bls.w	8003b56 <MenuDisCharge+0xba>
						lcd_set_xy(7,1);
 8003cae:	f7fd fe7d 	bl	80019ac <lcd_set_xy>
						LcdOutbyNumber(3,1);
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	e752      	b.n	8003b5e <MenuDisCharge+0xc2>
		if (BatteryLow == 0) U_Battery_Timer = time_sec;
 8003cb8:	7813      	ldrb	r3, [r2, #0]
 8003cba:	b91b      	cbnz	r3, 8003cc4 <MenuDisCharge+0x228>
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <MenuDisCharge+0x258>)
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <MenuDisCharge+0x254>)
 8003cc2:	6019      	str	r1, [r3, #0]
		BatteryLow = 1;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e708      	b.n	8003ada <MenuDisCharge+0x3e>
 8003cc8:	200007b1 	.word	0x200007b1
 8003ccc:	200007b0 	.word	0x200007b0
 8003cd0:	20000794 	.word	0x20000794
 8003cd4:	20000797 	.word	0x20000797
 8003cd8:	200007a4 	.word	0x200007a4
 8003cdc:	2000078c 	.word	0x2000078c
 8003ce0:	200007a8 	.word	0x200007a8
 8003ce4:	2000087c 	.word	0x2000087c
 8003ce8:	200007e4 	.word	0x200007e4
 8003cec:	20000154 	.word	0x20000154
 8003cf0:	200007e8 	.word	0x200007e8
 8003cf4:	200007f8 	.word	0x200007f8
 8003cf8:	2000079d 	.word	0x2000079d
 8003cfc:	200007b2 	.word	0x200007b2
 8003d00:	080061c2 	.word	0x080061c2
 8003d04:	200002b4 	.word	0x200002b4
 8003d08:	20000795 	.word	0x20000795
 8003d0c:	08006411 	.word	0x08006411
 8003d10:	0800641a 	.word	0x0800641a
 8003d14:	08006065 	.word	0x08006065
 8003d18:	08006328 	.word	0x08006328
 8003d1c:	200000f4 	.word	0x200000f4
 8003d20:	080063fa 	.word	0x080063fa
 8003d24:	200007ac 	.word	0x200007ac
 8003d28:	080062e0 	.word	0x080062e0
 8003d2c:	0800632b 	.word	0x0800632b
 8003d30:	08005ac8 	.word	0x08005ac8
 8003d34:	08006403 	.word	0x08006403
 8003d38:	08006345 	.word	0x08006345
 8003d3c:	0800635a 	.word	0x0800635a
 8003d40:	20000798 	.word	0x20000798
 8003d44:	0800636f 	.word	0x0800636f
 8003d48:	08006397 	.word	0x08006397
 8003d4c:	080063af 	.word	0x080063af

08003d50 <MenuCheckingCapacity>:
{
 8003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8003d54:	4aa0      	ldr	r2, [pc, #640]	; (8003fd8 <MenuCheckingCapacity+0x288>)
{
 8003d56:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8003d58:	7813      	ldrb	r3, [r2, #0]
{
 8003d5a:	4683      	mov	fp, r0
 8003d5c:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 8004034 <MenuCheckingCapacity+0x2e4>
 8003d60:	4e9e      	ldr	r6, [pc, #632]	; (8003fdc <MenuCheckingCapacity+0x28c>)
 8003d62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004038 <MenuCheckingCapacity+0x2e8>
 8003d66:	4d9e      	ldr	r5, [pc, #632]	; (8003fe0 <MenuCheckingCapacity+0x290>)
 8003d68:	4f9e      	ldr	r7, [pc, #632]	; (8003fe4 <MenuCheckingCapacity+0x294>)
 8003d6a:	4c9f      	ldr	r4, [pc, #636]	; (8003fe8 <MenuCheckingCapacity+0x298>)
	if (EnterInMenu_Status == 0)
 8003d6c:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003d70:	9201      	str	r2, [sp, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 8162 	bne.w	800403c <MenuCheckingCapacity+0x2ec>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003d78:	4b9c      	ldr	r3, [pc, #624]	; (8003fec <MenuCheckingCapacity+0x29c>)
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	4b9c      	ldr	r3, [pc, #624]	; (8003ff0 <MenuCheckingCapacity+0x2a0>)
 8003d7e:	b292      	uxth	r2, r2
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	3305      	adds	r3, #5
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d215      	bcs.n	8003db4 <MenuCheckingCapacity+0x64>
			lcd_set_xy(0,0);
 8003d88:	4641      	mov	r1, r8
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f7fd fe0e 	bl	80019ac <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003d90:	4898      	ldr	r0, [pc, #608]	; (8003ff4 <MenuCheckingCapacity+0x2a4>)
 8003d92:	f7fd fe8b 	bl	8001aac <PrintToLCD>
			delay_ms(2000);
 8003d96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d9a:	f7fd f949 	bl	8001030 <delay_ms>
			lcd_set_xy(0,0);
 8003d9e:	4641      	mov	r1, r8
 8003da0:	4640      	mov	r0, r8
 8003da2:	f7fd fe03 	bl	80019ac <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003da6:	4894      	ldr	r0, [pc, #592]	; (8003ff8 <MenuCheckingCapacity+0x2a8>)
 8003da8:	f7fd fe80 	bl	8001aac <PrintToLCD>
			delay_ms(3000);
 8003dac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003db0:	f7fd f93e 	bl	8001030 <delay_ms>
		EnterInMenu_Status = 1;
 8003db4:	2301      	movs	r3, #1
		ChargeStatusForTimer = 0;
 8003db6:	f04f 0800 	mov.w	r8, #0
		EnterInMenu_Status = 1;
 8003dba:	9a01      	ldr	r2, [sp, #4]
 8003dbc:	7013      	strb	r3, [r2, #0]
		DisChargeStatusForTimer = 0;
 8003dbe:	4a8f      	ldr	r2, [pc, #572]	; (8003ffc <MenuCheckingCapacity+0x2ac>)
		ChargeStatusForTimer = 0;
 8003dc0:	f88a 8000 	strb.w	r8, [sl]
		DisChargeStatusForTimer = 0;
 8003dc4:	f882 8000 	strb.w	r8, [r2]
		DischargeTimeSec_Previous = 0;
 8003dc8:	4a8d      	ldr	r2, [pc, #564]	; (8004000 <MenuCheckingCapacity+0x2b0>)
		ChargeTimeSec = 0;
 8003dca:	f8c6 8000 	str.w	r8, [r6]
		DischargeTimeSec = 0;
 8003dce:	f8c9 8000 	str.w	r8, [r9]
		DischargeTimeSec_Previous = 0;
 8003dd2:	f8c2 8000 	str.w	r8, [r2]
		BatteryCapacityCharge = 0;
 8003dd6:	f8c5 8000 	str.w	r8, [r5]
		BatteryCapacityDischargeCurrent = 0;
 8003dda:	f8c7 8000 	str.w	r8, [r7]
		ChargeStatusForTimer = 1;
 8003dde:	f88a 3000 	strb.w	r3, [sl]
		charge1();
 8003de2:	f7fe ffbd 	bl	8002d60 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8003de6:	2301      	movs	r3, #1
 8003de8:	4a86      	ldr	r2, [pc, #536]	; (8004004 <MenuCheckingCapacity+0x2b4>)
		lcd_set_xy(0,0);
 8003dea:	4641      	mov	r1, r8
 8003dec:	4640      	mov	r0, r8
		ChargeDischargeStatus = CHARGEs;
 8003dee:	7013      	strb	r3, [r2, #0]
		lcd_set_xy(0,0);
 8003df0:	f7fd fddc 	bl	80019ac <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8003df4:	4884      	ldr	r0, [pc, #528]	; (8004008 <MenuCheckingCapacity+0x2b8>)
 8003df6:	f7fd fe59 	bl	8001aac <PrintToLCD>
		delay_ms(1000);
 8003dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dfe:	f7fd f917 	bl	8001030 <delay_ms>
		CheckingCapacityCounter = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	7023      	strb	r3, [r4, #0]
		if (Module16(Current)>5)
 8003e06:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8004030 <MenuCheckingCapacity+0x2e0>
 8003e0a:	f8d8 0000 	ldr.w	r0, [r8]
 8003e0e:	b200      	sxth	r0, r0
 8003e10:	f7fd fb0a 	bl	8001428 <Module16>
 8003e14:	2805      	cmp	r0, #5
 8003e16:	f8cd 8008 	str.w	r8, [sp, #8]
 8003e1a:	f340 8194 	ble.w	8004146 <MenuCheckingCapacity+0x3f6>
			if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003e1e:	4b7b      	ldr	r3, [pc, #492]	; (800400c <MenuCheckingCapacity+0x2bc>)
 8003e20:	4a73      	ldr	r2, [pc, #460]	; (8003ff0 <MenuCheckingCapacity+0x2a0>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	6991      	ldr	r1, [r2, #24]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	4690      	mov	r8, r2
 8003e2c:	d229      	bcs.n	8003e82 <MenuCheckingCapacity+0x132>
 8003e2e:	4b75      	ldr	r3, [pc, #468]	; (8004004 <MenuCheckingCapacity+0x2b4>)
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	2a02      	cmp	r2, #2
 8003e34:	d125      	bne.n	8003e82 <MenuCheckingCapacity+0x132>
 8003e36:	4b76      	ldr	r3, [pc, #472]	; (8004010 <MenuCheckingCapacity+0x2c0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e3e:	d920      	bls.n	8003e82 <MenuCheckingCapacity+0x132>
				DisChargeStatusForTimer = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	496e      	ldr	r1, [pc, #440]	; (8003ffc <MenuCheckingCapacity+0x2ac>)
 8003e44:	700b      	strb	r3, [r1, #0]
				if (BatteryCapacityDischargeCurrent/3600 > 100)
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	4b72      	ldr	r3, [pc, #456]	; (8004014 <MenuCheckingCapacity+0x2c4>)
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	d904      	bls.n	8003e58 <MenuCheckingCapacity+0x108>
					MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f8d9 1000 	ldr.w	r1, [r9]
 8003e54:	f7fd ffd4 	bl	8001e00 <MenuTraining_WriteInLOG>
				DischargeTimeSec_Previous = DischargeTimeSec;
 8003e58:	f8d9 2000 	ldr.w	r2, [r9]
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <MenuCheckingCapacity+0x2b0>)
 8003e5e:	601a      	str	r2, [r3, #0]
				SaveDataWhenPowerOff.CurrentConsumption5ms = BatteryCapacityDischargeCurrent;
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	4b6d      	ldr	r3, [pc, #436]	; (8004018 <MenuCheckingCapacity+0x2c8>)
 8003e64:	609a      	str	r2, [r3, #8]
				BatteryCapacityCharge = 0;
 8003e66:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f88a 2000 	strb.w	r2, [sl]
				BatteryCapacityCharge = 0;
 8003e6e:	602b      	str	r3, [r5, #0]
				ChargeTimeSec = 0;
 8003e70:	6033      	str	r3, [r6, #0]
				charge1();
 8003e72:	f7fe ff75 	bl	8002d60 <charge1>
				ChargeDischargeStatus = CHARGEs;
 8003e76:	2201      	movs	r2, #1
				CheckingCapacityCounter ++;
 8003e78:	7823      	ldrb	r3, [r4, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003e7e:	4b61      	ldr	r3, [pc, #388]	; (8004004 <MenuCheckingCapacity+0x2b4>)
 8003e80:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter<3)
 8003e82:	4a62      	ldr	r2, [pc, #392]	; (800400c <MenuCheckingCapacity+0x2bc>)
 8003e84:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8003e88:	8813      	ldrh	r3, [r2, #0]
 8003e8a:	9203      	str	r2, [sp, #12]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	428b      	cmp	r3, r1
 8003e90:	d908      	bls.n	8003ea4 <MenuCheckingCapacity+0x154>
 8003e92:	4b5c      	ldr	r3, [pc, #368]	; (8004004 <MenuCheckingCapacity+0x2b4>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d104      	bne.n	8003ea4 <MenuCheckingCapacity+0x154>
 8003e9a:	4b5d      	ldr	r3, [pc, #372]	; (8004010 <MenuCheckingCapacity+0x2c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ea2:	d808      	bhi.n	8003eb6 <MenuCheckingCapacity+0x166>
 8003ea4:	4b5d      	ldr	r3, [pc, #372]	; (800401c <MenuCheckingCapacity+0x2cc>)
 8003ea6:	6832      	ldr	r2, [r6, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d922      	bls.n	8003ef4 <MenuCheckingCapacity+0x1a4>
 8003eae:	4b55      	ldr	r3, [pc, #340]	; (8004004 <MenuCheckingCapacity+0x2b4>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d11e      	bne.n	8003ef4 <MenuCheckingCapacity+0x1a4>
 8003eb6:	f994 3000 	ldrsb.w	r3, [r4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	dc1a      	bgt.n	8003ef4 <MenuCheckingCapacity+0x1a4>
				ChargeStatusForTimer = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f88a 3000 	strb.w	r3, [sl]
				if (BatteryCapacityCharge/3600 > 100)
 8003ec4:	682a      	ldr	r2, [r5, #0]
 8003ec6:	4b53      	ldr	r3, [pc, #332]	; (8004014 <MenuCheckingCapacity+0x2c4>)
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d904      	bls.n	8003ed6 <MenuCheckingCapacity+0x186>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003ecc:	6828      	ldr	r0, [r5, #0]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	6831      	ldr	r1, [r6, #0]
 8003ed2:	f7fd ff95 	bl	8001e00 <MenuTraining_WriteInLOG>
				DisChargeStatusForTimer = 1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	4a48      	ldr	r2, [pc, #288]	; (8003ffc <MenuCheckingCapacity+0x2ac>)
 8003eda:	7013      	strb	r3, [r2, #0]
				BatteryCapacityDischargeCurrent = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	603b      	str	r3, [r7, #0]
				DischargeTimeSec = 0;
 8003ee0:	f8c9 3000 	str.w	r3, [r9]
				discharge1();
 8003ee4:	f7fe fe3e 	bl	8002b64 <discharge1>
				ChargeDischargeStatus = DISCHARGEs;
 8003ee8:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003eea:	7823      	ldrb	r3, [r4, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = DISCHARGEs;
 8003ef0:	4b44      	ldr	r3, [pc, #272]	; (8004004 <MenuCheckingCapacity+0x2b4>)
 8003ef2:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter>=3)
 8003ef4:	4b45      	ldr	r3, [pc, #276]	; (800400c <MenuCheckingCapacity+0x2bc>)
 8003ef6:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d908      	bls.n	8003f14 <MenuCheckingCapacity+0x1c4>
 8003f02:	4b40      	ldr	r3, [pc, #256]	; (8004004 <MenuCheckingCapacity+0x2b4>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d104      	bne.n	8003f14 <MenuCheckingCapacity+0x1c4>
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <MenuCheckingCapacity+0x2c0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f12:	d808      	bhi.n	8003f26 <MenuCheckingCapacity+0x1d6>
 8003f14:	4b41      	ldr	r3, [pc, #260]	; (800401c <MenuCheckingCapacity+0x2cc>)
 8003f16:	6832      	ldr	r2, [r6, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d91d      	bls.n	8003f5a <MenuCheckingCapacity+0x20a>
 8003f1e:	4b39      	ldr	r3, [pc, #228]	; (8004004 <MenuCheckingCapacity+0x2b4>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d119      	bne.n	8003f5a <MenuCheckingCapacity+0x20a>
 8003f26:	f994 3000 	ldrsb.w	r3, [r4]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	dd15      	ble.n	8003f5a <MenuCheckingCapacity+0x20a>
				OFF();
 8003f2e:	f7ff fa7d 	bl	800342c <OFF>
				ChargeStatusForTimer = 0;
 8003f32:	2300      	movs	r3, #0
				DisChargeStatusForTimer = 0;
 8003f34:	4a31      	ldr	r2, [pc, #196]	; (8003ffc <MenuCheckingCapacity+0x2ac>)
				ChargeStatusForTimer = 0;
 8003f36:	f88a 3000 	strb.w	r3, [sl]
				DisChargeStatusForTimer = 0;
 8003f3a:	7013      	strb	r3, [r2, #0]
				if (BatteryCapacityCharge/3600 > 100)
 8003f3c:	682a      	ldr	r2, [r5, #0]
 8003f3e:	4b35      	ldr	r3, [pc, #212]	; (8004014 <MenuCheckingCapacity+0x2c4>)
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d904      	bls.n	8003f4e <MenuCheckingCapacity+0x1fe>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003f44:	6828      	ldr	r0, [r5, #0]
 8003f46:	2201      	movs	r2, #1
 8003f48:	6831      	ldr	r1, [r6, #0]
 8003f4a:	f7fd ff59 	bl	8001e00 <MenuTraining_WriteInLOG>
				CountShow = 2;
 8003f4e:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003f50:	7823      	ldrb	r3, [r4, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	7023      	strb	r3, [r4, #0]
				CountShow = 2;
 8003f56:	4b32      	ldr	r3, [pc, #200]	; (8004020 <MenuCheckingCapacity+0x2d0>)
 8003f58:	701a      	strb	r2, [r3, #0]
			if (key == KEY_NEXT)
 8003f5a:	4c31      	ldr	r4, [pc, #196]	; (8004020 <MenuCheckingCapacity+0x2d0>)
 8003f5c:	f1bb 0f02 	cmp.w	fp, #2
 8003f60:	f994 3000 	ldrsb.w	r3, [r4]
 8003f64:	f040 80ac 	bne.w	80040c0 <MenuCheckingCapacity+0x370>
				CountShow++;
 8003f68:	3301      	adds	r3, #1
 8003f6a:	b25b      	sxtb	r3, r3
				if (CountShow==MAX_SCREENS__MENU_CAPACITY) CountShow=0;
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	f040 80af 	bne.w	80040d0 <MenuCheckingCapacity+0x380>
 8003f72:	2300      	movs	r3, #0
 8003f74:	7023      	strb	r3, [r4, #0]
				lcd_set_xy(0,0);
 8003f76:	2100      	movs	r1, #0
 8003f78:	4608      	mov	r0, r1
 8003f7a:	f7fd fd17 	bl	80019ac <lcd_set_xy>
				PrintToLCD(itoa_koma(U_OUT,2));
 8003f7e:	9b03      	ldr	r3, [sp, #12]
 8003f80:	2102      	movs	r1, #2
 8003f82:	8818      	ldrh	r0, [r3, #0]
 8003f84:	b280      	uxth	r0, r0
 8003f86:	f7fd f9e7 	bl	8001358 <itoa_koma>
 8003f8a:	f7fd fd8f 	bl	8001aac <PrintToLCD>
				PrintToLCD("V ");
 8003f8e:	4825      	ldr	r0, [pc, #148]	; (8004024 <MenuCheckingCapacity+0x2d4>)
 8003f90:	f7fd fd8c 	bl	8001aac <PrintToLCD>
				PrintToLCD(itoa(Current));
 8003f94:	9b02      	ldr	r3, [sp, #8]
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	f7fd f966 	bl	8001268 <itoa>
 8003f9c:	f7fd fd86 	bl	8001aac <PrintToLCD>
				PrintToLCD("mA     ");
 8003fa0:	4821      	ldr	r0, [pc, #132]	; (8004028 <MenuCheckingCapacity+0x2d8>)
 8003fa2:	f7fd fd83 	bl	8001aac <PrintToLCD>
				lcd_set_xy(6,1);
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	2006      	movs	r0, #6
 8003faa:	f7fd fcff 	bl	80019ac <lcd_set_xy>
				LcdOutbyNumber(4,1);
 8003fae:	2101      	movs	r1, #1
 8003fb0:	2004      	movs	r0, #4
 8003fb2:	f7fd fd23 	bl	80019fc <LcdOutbyNumber>
				if (Status_Out ==1)
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <MenuCheckingCapacity+0x2dc>)
 8003fb8:	f893 b000 	ldrb.w	fp, [r3]
 8003fbc:	f1bb 0f01 	cmp.w	fp, #1
 8003fc0:	f040 80ba 	bne.w	8004138 <MenuCheckingCapacity+0x3e8>
					lcd_set_xy(7,1);
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	2007      	movs	r0, #7
 8003fc8:	f7fd fcf0 	bl	80019ac <lcd_set_xy>
					LcdOutbyNumber(0,1);//charge
 8003fcc:	4659      	mov	r1, fp
 8003fce:	2000      	movs	r0, #0
					LcdOutbyNumber(2,1);//discharge
 8003fd0:	f7fd fd14 	bl	80019fc <LcdOutbyNumber>
 8003fd4:	e082      	b.n	80040dc <MenuCheckingCapacity+0x38c>
 8003fd6:	bf00      	nop
 8003fd8:	200007b0 	.word	0x200007b0
 8003fdc:	20000798 	.word	0x20000798
 8003fe0:	20000788 	.word	0x20000788
 8003fe4:	2000078c 	.word	0x2000078c
 8003fe8:	2000079c 	.word	0x2000079c
 8003fec:	20000884 	.word	0x20000884
 8003ff0:	20000154 	.word	0x20000154
 8003ff4:	080062e3 	.word	0x080062e3
 8003ff8:	080062f4 	.word	0x080062f4
 8003ffc:	200007a4 	.word	0x200007a4
 8004000:	200007ac 	.word	0x200007ac
 8004004:	20000270 	.word	0x20000270
 8004008:	08006305 	.word	0x08006305
 800400c:	2000087c 	.word	0x2000087c
 8004010:	200007dc 	.word	0x200007dc
 8004014:	00058c4f 	.word	0x00058c4f
 8004018:	200000f4 	.word	0x200000f4
 800401c:	20000a28 	.word	0x20000a28
 8004020:	2000079d 	.word	0x2000079d
 8004024:	080061c2 	.word	0x080061c2
 8004028:	08006316 	.word	0x08006316
 800402c:	200007b9 	.word	0x200007b9
 8004030:	200002b4 	.word	0x200002b4
 8004034:	20000797 	.word	0x20000797
 8004038:	200007a8 	.word	0x200007a8
	if (CheckingCapacityCounter<=3)
 800403c:	f994 3000 	ldrsb.w	r3, [r4]
 8004040:	2b03      	cmp	r3, #3
 8004042:	f77f aee0 	ble.w	8003e06 <MenuCheckingCapacity+0xb6>
		if (key == KEY_NEXT)
 8004046:	4caa      	ldr	r4, [pc, #680]	; (80042f0 <MenuCheckingCapacity+0x5a0>)
 8004048:	2802      	cmp	r0, #2
 800404a:	f994 3000 	ldrsb.w	r3, [r4]
 800404e:	f040 80c5 	bne.w	80041dc <MenuCheckingCapacity+0x48c>
			CountShow++;
 8004052:	3301      	adds	r3, #1
 8004054:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_CAPACITY1) CountShow=0;
 8004056:	2b04      	cmp	r3, #4
 8004058:	f040 80c6 	bne.w	80041e8 <MenuCheckingCapacity+0x498>
 800405c:	2300      	movs	r3, #0
 800405e:	7023      	strb	r3, [r4, #0]
			lcd_set_xy(0,0);
 8004060:	2100      	movs	r1, #0
 8004062:	4608      	mov	r0, r1
 8004064:	f7fd fca2 	bl	80019ac <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8004068:	4ba2      	ldr	r3, [pc, #648]	; (80042f4 <MenuCheckingCapacity+0x5a4>)
 800406a:	2102      	movs	r1, #2
 800406c:	8818      	ldrh	r0, [r3, #0]
 800406e:	b280      	uxth	r0, r0
 8004070:	f7fd f972 	bl	8001358 <itoa_koma>
 8004074:	f7fd fd1a 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 8004078:	489f      	ldr	r0, [pc, #636]	; (80042f8 <MenuCheckingCapacity+0x5a8>)
 800407a:	f7fd fd17 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(Current));
 800407e:	4b9f      	ldr	r3, [pc, #636]	; (80042fc <MenuCheckingCapacity+0x5ac>)
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	f7fd f8f1 	bl	8001268 <itoa>
 8004086:	f7fd fd11 	bl	8001aac <PrintToLCD>
			PrintToLCD("mA     ");
 800408a:	489d      	ldr	r0, [pc, #628]	; (8004300 <MenuCheckingCapacity+0x5b0>)
 800408c:	f7fd fd0e 	bl	8001aac <PrintToLCD>
			lcd_set_xy(6,1);
 8004090:	2101      	movs	r1, #1
 8004092:	2006      	movs	r0, #6
 8004094:	f7fd fc8a 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8004098:	2101      	movs	r1, #1
 800409a:	2004      	movs	r0, #4
 800409c:	f7fd fcae 	bl	80019fc <LcdOutbyNumber>
			if (Status_Out ==1)
 80040a0:	4b98      	ldr	r3, [pc, #608]	; (8004304 <MenuCheckingCapacity+0x5b4>)
 80040a2:	f893 8000 	ldrb.w	r8, [r3]
 80040a6:	f1b8 0f01 	cmp.w	r8, #1
 80040aa:	f040 811a 	bne.w	80042e2 <MenuCheckingCapacity+0x592>
				lcd_set_xy(7,1);
 80040ae:	4641      	mov	r1, r8
 80040b0:	2007      	movs	r0, #7
 80040b2:	f7fd fc7b 	bl	80019ac <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 80040b6:	4641      	mov	r1, r8
 80040b8:	2000      	movs	r0, #0
				LcdOutbyNumber(2,1);//discharge
 80040ba:	f7fd fc9f 	bl	80019fc <LcdOutbyNumber>
 80040be:	e099      	b.n	80041f4 <MenuCheckingCapacity+0x4a4>
			if (key == KEY_BACK)
 80040c0:	f1bb 0f01 	cmp.w	fp, #1
 80040c4:	d105      	bne.n	80040d2 <MenuCheckingCapacity+0x382>
				CountShow--;
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b25b      	sxtb	r3, r3
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f2c0 80b7 	blt.w	800423e <MenuCheckingCapacity+0x4ee>
				CountShow++;
 80040d0:	7023      	strb	r3, [r4, #0]
			if(CountShow == 0)
 80040d2:	f994 3000 	ldrsb.w	r3, [r4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f43f af4d 	beq.w	8003f76 <MenuCheckingCapacity+0x226>
			if(CountShow == 1)
 80040dc:	f994 b000 	ldrsb.w	fp, [r4]
 80040e0:	f1bb 0f01 	cmp.w	fp, #1
 80040e4:	f040 80ad 	bne.w	8004242 <MenuCheckingCapacity+0x4f2>
				lcd_set_xy(0,0);
 80040e8:	2100      	movs	r1, #0
 80040ea:	4608      	mov	r0, r1
 80040ec:	f7fd fc5e 	bl	80019ac <lcd_set_xy>
				PrintToLCD(itoa(SettingsData.ChargeTime));
 80040f0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80040f4:	f7fd f8b8 	bl	8001268 <itoa>
 80040f8:	f7fd fcd8 	bl	8001aac <PrintToLCD>
				PrintToLCD("h ");
 80040fc:	4882      	ldr	r0, [pc, #520]	; (8004308 <MenuCheckingCapacity+0x5b8>)
 80040fe:	f7fd fcd5 	bl	8001aac <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8004102:	230a      	movs	r3, #10
 8004104:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8004108:	4659      	mov	r1, fp
 800410a:	fbb0 f0f3 	udiv	r0, r0, r3
 800410e:	f7fd f923 	bl	8001358 <itoa_koma>
 8004112:	f7fd fccb 	bl	8001aac <PrintToLCD>
				PrintToLCD("V ");
 8004116:	4878      	ldr	r0, [pc, #480]	; (80042f8 <MenuCheckingCapacity+0x5a8>)
 8004118:	f7fd fcc8 	bl	8001aac <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800411c:	4659      	mov	r1, fp
 800411e:	f8d8 0020 	ldr.w	r0, [r8, #32]
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8004122:	230a      	movs	r3, #10
 8004124:	fbb0 f0f3 	udiv	r0, r0, r3
 8004128:	f7fd f916 	bl	8001358 <itoa_koma>
 800412c:	f7fd fcbe 	bl	8001aac <PrintToLCD>
			PrintToLCD("V     ");
 8004130:	4876      	ldr	r0, [pc, #472]	; (800430c <MenuCheckingCapacity+0x5bc>)
 8004132:	f7fd fcbb 	bl	8001aac <PrintToLCD>
 8004136:	e084      	b.n	8004242 <MenuCheckingCapacity+0x4f2>
					lcd_set_xy(7,1);
 8004138:	2101      	movs	r1, #1
 800413a:	2007      	movs	r0, #7
 800413c:	f7fd fc36 	bl	80019ac <lcd_set_xy>
					LcdOutbyNumber(2,1);//discharge
 8004140:	2101      	movs	r1, #1
 8004142:	2002      	movs	r0, #2
 8004144:	e744      	b.n	8003fd0 <MenuCheckingCapacity+0x280>
			if (TimerForReadyMeasurement_ms>1000)
 8004146:	4b72      	ldr	r3, [pc, #456]	; (8004310 <MenuCheckingCapacity+0x5c0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800414e:	d906      	bls.n	800415e <MenuCheckingCapacity+0x40e>
				lcd_set_xy(0,0);
 8004150:	2100      	movs	r1, #0
 8004152:	4608      	mov	r0, r1
 8004154:	f7fd fc2a 	bl	80019ac <lcd_set_xy>
				PrintToLCD("NO/BAD Battery  ");
 8004158:	486e      	ldr	r0, [pc, #440]	; (8004314 <MenuCheckingCapacity+0x5c4>)
 800415a:	f7fd fca7 	bl	8001aac <PrintToLCD>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 800415e:	486e      	ldr	r0, [pc, #440]	; (8004318 <MenuCheckingCapacity+0x5c8>)
 8004160:	f001 f93e 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	7819      	ldrb	r1, [r3, #0]
 800416a:	486c      	ldr	r0, [pc, #432]	; (800431c <MenuCheckingCapacity+0x5cc>)
 800416c:	f001 f976 	bl	800545c <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8004170:	4869      	ldr	r0, [pc, #420]	; (8004318 <MenuCheckingCapacity+0x5c8>)
 8004172:	f001 f935 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004176:	f89a 1000 	ldrb.w	r1, [sl]
 800417a:	2200      	movs	r2, #0
 800417c:	4868      	ldr	r0, [pc, #416]	; (8004320 <MenuCheckingCapacity+0x5d0>)
 800417e:	f001 f96d 	bl	800545c <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8004182:	4865      	ldr	r0, [pc, #404]	; (8004318 <MenuCheckingCapacity+0x5c8>)
 8004184:	f001 f92c 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004188:	6831      	ldr	r1, [r6, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	4865      	ldr	r0, [pc, #404]	; (8004324 <MenuCheckingCapacity+0x5d4>)
 800418e:	f001 f965 	bl	800545c <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8004192:	4861      	ldr	r0, [pc, #388]	; (8004318 <MenuCheckingCapacity+0x5c8>)
 8004194:	f001 f924 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004198:	6829      	ldr	r1, [r5, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	4862      	ldr	r0, [pc, #392]	; (8004328 <MenuCheckingCapacity+0x5d8>)
 800419e:	f001 f95d 	bl	800545c <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80041a2:	485d      	ldr	r0, [pc, #372]	; (8004318 <MenuCheckingCapacity+0x5c8>)
 80041a4:	f001 f91c 	bl	80053e0 <printToBufferWithoutEndUART1>
 80041a8:	4b60      	ldr	r3, [pc, #384]	; (800432c <MenuCheckingCapacity+0x5dc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	7819      	ldrb	r1, [r3, #0]
 80041ae:	4860      	ldr	r0, [pc, #384]	; (8004330 <MenuCheckingCapacity+0x5e0>)
 80041b0:	f001 f954 	bl	800545c <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80041b4:	4858      	ldr	r0, [pc, #352]	; (8004318 <MenuCheckingCapacity+0x5c8>)
 80041b6:	f001 f913 	bl	80053e0 <printToBufferWithoutEndUART1>
 80041ba:	f8d9 1000 	ldr.w	r1, [r9]
 80041be:	2200      	movs	r2, #0
 80041c0:	485c      	ldr	r0, [pc, #368]	; (8004334 <MenuCheckingCapacity+0x5e4>)
 80041c2:	f001 f94b 	bl	800545c <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80041c6:	4854      	ldr	r0, [pc, #336]	; (8004318 <MenuCheckingCapacity+0x5c8>)
 80041c8:	f001 f90a 	bl	80053e0 <printToBufferWithoutEndUART1>
 80041cc:	2200      	movs	r2, #0
 80041ce:	6839      	ldr	r1, [r7, #0]
 80041d0:	4859      	ldr	r0, [pc, #356]	; (8004338 <MenuCheckingCapacity+0x5e8>)
}
 80041d2:	b005      	add	sp, #20
 80041d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80041d8:	f001 b940 	b.w	800545c <printToBufferUART1D>
		if (key == KEY_BACK)
 80041dc:	2801      	cmp	r0, #1
 80041de:	d104      	bne.n	80041ea <MenuCheckingCapacity+0x49a>
			CountShow--;
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	db2a      	blt.n	800423e <MenuCheckingCapacity+0x4ee>
			CountShow++;
 80041e8:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 80041ea:	f994 3000 	ldrsb.w	r3, [r4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f43f af36 	beq.w	8004060 <MenuCheckingCapacity+0x310>
		if(CountShow == 1)
 80041f4:	f994 8000 	ldrsb.w	r8, [r4]
 80041f8:	f1b8 0f01 	cmp.w	r8, #1
 80041fc:	d121      	bne.n	8004242 <MenuCheckingCapacity+0x4f2>
			lcd_set_xy(0,0);
 80041fe:	2100      	movs	r1, #0
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8004200:	f8df b140 	ldr.w	fp, [pc, #320]	; 8004344 <MenuCheckingCapacity+0x5f4>
			lcd_set_xy(0,0);
 8004204:	4608      	mov	r0, r1
 8004206:	f7fd fbd1 	bl	80019ac <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 800420a:	f8db 0010 	ldr.w	r0, [fp, #16]
 800420e:	f7fd f82b 	bl	8001268 <itoa>
 8004212:	f7fd fc4b 	bl	8001aac <PrintToLCD>
			PrintToLCD("h ");
 8004216:	483c      	ldr	r0, [pc, #240]	; (8004308 <MenuCheckingCapacity+0x5b8>)
 8004218:	f7fd fc48 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 800421c:	230a      	movs	r3, #10
 800421e:	f8db 0018 	ldr.w	r0, [fp, #24]
 8004222:	4641      	mov	r1, r8
 8004224:	fbb0 f0f3 	udiv	r0, r0, r3
 8004228:	f7fd f896 	bl	8001358 <itoa_koma>
 800422c:	f7fd fc3e 	bl	8001aac <PrintToLCD>
			PrintToLCD("V ");
 8004230:	4831      	ldr	r0, [pc, #196]	; (80042f8 <MenuCheckingCapacity+0x5a8>)
 8004232:	f7fd fc3b 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8004236:	4641      	mov	r1, r8
 8004238:	f8db 0020 	ldr.w	r0, [fp, #32]
 800423c:	e771      	b.n	8004122 <MenuCheckingCapacity+0x3d2>
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 800423e:	2303      	movs	r3, #3
 8004240:	7023      	strb	r3, [r4, #0]
		if(CountShow == 2)
 8004242:	f994 8000 	ldrsb.w	r8, [r4]
 8004246:	f1b8 0f02 	cmp.w	r8, #2
 800424a:	d122      	bne.n	8004292 <MenuCheckingCapacity+0x542>
			lcd_set_xy(0,0);
 800424c:	2100      	movs	r1, #0
 800424e:	4608      	mov	r0, r1
 8004250:	f7fd fbac 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8004254:	2101      	movs	r1, #1
 8004256:	4640      	mov	r0, r8
 8004258:	f7fd fbd0 	bl	80019fc <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800425c:	2100      	movs	r1, #0
 800425e:	2001      	movs	r0, #1
 8004260:	f7fd fba4 	bl	80019ac <lcd_set_xy>
			PrintToLCD(" ");
 8004264:	4835      	ldr	r0, [pc, #212]	; (800433c <MenuCheckingCapacity+0x5ec>)
 8004266:	f7fd fc21 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 800426a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800426e:	6838      	ldr	r0, [r7, #0]
 8004270:	fbb0 f0f3 	udiv	r0, r0, r3
 8004274:	f7fc fff8 	bl	8001268 <itoa>
 8004278:	f7fd fc18 	bl	8001aac <PrintToLCD>
			PrintToLCD("mAH      ");
 800427c:	4830      	ldr	r0, [pc, #192]	; (8004340 <MenuCheckingCapacity+0x5f0>)
 800427e:	f7fd fc15 	bl	8001aac <PrintToLCD>
			lcd_set_xy(3,1);
 8004282:	2003      	movs	r0, #3
 8004284:	2101      	movs	r1, #1
 8004286:	f7fd fb91 	bl	80019ac <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 800428a:	f8d9 0000 	ldr.w	r0, [r9]
 800428e:	f7fe f91f 	bl	80024d0 <ClockOnLCD_noSec>
		if(CountShow == 3)
 8004292:	f994 4000 	ldrsb.w	r4, [r4]
 8004296:	2c03      	cmp	r4, #3
 8004298:	f47f af61 	bne.w	800415e <MenuCheckingCapacity+0x40e>
			lcd_set_xy(0,0);
 800429c:	2100      	movs	r1, #0
 800429e:	4608      	mov	r0, r1
 80042a0:	f7fd fb84 	bl	80019ac <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 80042a4:	2101      	movs	r1, #1
 80042a6:	2000      	movs	r0, #0
 80042a8:	f7fd fba8 	bl	80019fc <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80042ac:	2100      	movs	r1, #0
 80042ae:	2001      	movs	r0, #1
 80042b0:	f7fd fb7c 	bl	80019ac <lcd_set_xy>
			PrintToLCD(" ");
 80042b4:	4821      	ldr	r0, [pc, #132]	; (800433c <MenuCheckingCapacity+0x5ec>)
 80042b6:	f7fd fbf9 	bl	8001aac <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80042ba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80042be:	6828      	ldr	r0, [r5, #0]
 80042c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80042c4:	f7fc ffd0 	bl	8001268 <itoa>
 80042c8:	f7fd fbf0 	bl	8001aac <PrintToLCD>
			PrintToLCD("mAH      ");
 80042cc:	481c      	ldr	r0, [pc, #112]	; (8004340 <MenuCheckingCapacity+0x5f0>)
 80042ce:	f7fd fbed 	bl	8001aac <PrintToLCD>
			lcd_set_xy(3,1);
 80042d2:	4620      	mov	r0, r4
 80042d4:	2101      	movs	r1, #1
 80042d6:	f7fd fb69 	bl	80019ac <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 80042da:	6830      	ldr	r0, [r6, #0]
 80042dc:	f7fe f8f8 	bl	80024d0 <ClockOnLCD_noSec>
 80042e0:	e73d      	b.n	800415e <MenuCheckingCapacity+0x40e>
				lcd_set_xy(7,1);
 80042e2:	2101      	movs	r1, #1
 80042e4:	2007      	movs	r0, #7
 80042e6:	f7fd fb61 	bl	80019ac <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80042ea:	2101      	movs	r1, #1
 80042ec:	2002      	movs	r0, #2
 80042ee:	e6e4      	b.n	80040ba <MenuCheckingCapacity+0x36a>
 80042f0:	2000079d 	.word	0x2000079d
 80042f4:	2000087c 	.word	0x2000087c
 80042f8:	080061c2 	.word	0x080061c2
 80042fc:	200002b4 	.word	0x200002b4
 8004300:	08006316 	.word	0x08006316
 8004304:	200007b9 	.word	0x200007b9
 8004308:	08006297 	.word	0x08006297
 800430c:	080060a7 	.word	0x080060a7
 8004310:	200007dc 	.word	0x200007dc
 8004314:	08006334 	.word	0x08006334
 8004318:	08005ac8 	.word	0x08005ac8
 800431c:	08006345 	.word	0x08006345
 8004320:	0800635a 	.word	0x0800635a
 8004324:	0800636f 	.word	0x0800636f
 8004328:	0800637f 	.word	0x0800637f
 800432c:	200007a4 	.word	0x200007a4
 8004330:	08006397 	.word	0x08006397
 8004334:	080063af 	.word	0x080063af
 8004338:	080063c2 	.word	0x080063c2
 800433c:	0800625c 	.word	0x0800625c
 8004340:	0800631e 	.word	0x0800631e
 8004344:	20000154 	.word	0x20000154

08004348 <MenuDIAGNOSTIC>:
	EnterInMenu_Status=1;
 8004348:	2201      	movs	r2, #1
{
 800434a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status=1;
 800434e:	4ba7      	ldr	r3, [pc, #668]	; (80045ec <MenuDIAGNOSTIC+0x2a4>)
 8004350:	4ca7      	ldr	r4, [pc, #668]	; (80045f0 <MenuDIAGNOSTIC+0x2a8>)
	if (key == KEY_NEXT)
 8004352:	2802      	cmp	r0, #2
	EnterInMenu_Status=1;
 8004354:	701a      	strb	r2, [r3, #0]
{
 8004356:	b086      	sub	sp, #24
 8004358:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 800435c:	d128      	bne.n	80043b0 <MenuDIAGNOSTIC+0x68>
		CountShow1++;
 800435e:	4413      	add	r3, r2
 8004360:	b25b      	sxtb	r3, r3
		if (CountShow1==MAXITEM) CountShow1=0;
 8004362:	2b08      	cmp	r3, #8
 8004364:	d12a      	bne.n	80043bc <MenuDIAGNOSTIC+0x74>
 8004366:	2300      	movs	r3, #0
 8004368:	7023      	strb	r3, [r4, #0]
		OFF();
 800436a:	f7ff f85f 	bl	800342c <OFF>
		lcd_set_xy(0,0);
 800436e:	2100      	movs	r1, #0
 8004370:	4608      	mov	r0, r1
 8004372:	f7fd fb1b 	bl	80019ac <lcd_set_xy>
		PrintToLCD("Uin=");
 8004376:	489f      	ldr	r0, [pc, #636]	; (80045f4 <MenuDIAGNOSTIC+0x2ac>)
 8004378:	f7fd fb98 	bl	8001aac <PrintToLCD>
		PrintToLCD(		itoa_koma(U_IN/10,1));
 800437c:	200a      	movs	r0, #10
 800437e:	4b9e      	ldr	r3, [pc, #632]	; (80045f8 <MenuDIAGNOSTIC+0x2b0>)
 8004380:	2101      	movs	r1, #1
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	fbb3 f0f0 	udiv	r0, r3, r0
 800438a:	f7fc ffe5 	bl	8001358 <itoa_koma>
 800438e:	f7fd fb8d 	bl	8001aac <PrintToLCD>
		PrintToLCD(" Uc=");
 8004392:	489a      	ldr	r0, [pc, #616]	; (80045fc <MenuDIAGNOSTIC+0x2b4>)
 8004394:	f7fd fb8a 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa_koma(U_Controller,2));
 8004398:	4b99      	ldr	r3, [pc, #612]	; (8004600 <MenuDIAGNOSTIC+0x2b8>)
 800439a:	2102      	movs	r1, #2
 800439c:	8818      	ldrh	r0, [r3, #0]
 800439e:	b280      	uxth	r0, r0
 80043a0:	f7fc ffda 	bl	8001358 <itoa_koma>
 80043a4:	f7fd fb82 	bl	8001aac <PrintToLCD>
		PrintToLCD("    ");
 80043a8:	4896      	ldr	r0, [pc, #600]	; (8004604 <MenuDIAGNOSTIC+0x2bc>)
 80043aa:	f7fd fb7f 	bl	8001aac <PrintToLCD>
 80043ae:	e00a      	b.n	80043c6 <MenuDIAGNOSTIC+0x7e>
	if (key == KEY_BACK)
 80043b0:	2801      	cmp	r0, #1
 80043b2:	d104      	bne.n	80043be <MenuDIAGNOSTIC+0x76>
		CountShow1--;
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b25b      	sxtb	r3, r3
		if (CountShow1<0) CountShow1=MAXITEM-1;
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	db27      	blt.n	800440c <MenuDIAGNOSTIC+0xc4>
		CountShow1++;
 80043bc:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 0)
 80043be:	f994 3000 	ldrsb.w	r3, [r4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0d1      	beq.n	800436a <MenuDIAGNOSTIC+0x22>
	if(CountShow1 == 1)
 80043c6:	f994 3000 	ldrsb.w	r3, [r4]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d120      	bne.n	8004410 <MenuDIAGNOSTIC+0xc8>
		OFF();
 80043ce:	f7ff f82d 	bl	800342c <OFF>
		lcd_set_xy(0,0);
 80043d2:	2100      	movs	r1, #0
 80043d4:	4608      	mov	r0, r1
 80043d6:	f7fd fae9 	bl	80019ac <lcd_set_xy>
		PrintToLCD("Ups ");
 80043da:	488b      	ldr	r0, [pc, #556]	; (8004608 <MenuDIAGNOSTIC+0x2c0>)
 80043dc:	f7fd fb66 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa_koma(U_PS,2));
 80043e0:	4b8a      	ldr	r3, [pc, #552]	; (800460c <MenuDIAGNOSTIC+0x2c4>)
 80043e2:	2102      	movs	r1, #2
 80043e4:	8818      	ldrh	r0, [r3, #0]
 80043e6:	b280      	uxth	r0, r0
 80043e8:	f7fc ffb6 	bl	8001358 <itoa_koma>
 80043ec:	f7fd fb5e 	bl	8001aac <PrintToLCD>
		PrintToLCD("V ");
 80043f0:	4887      	ldr	r0, [pc, #540]	; (8004610 <MenuDIAGNOSTIC+0x2c8>)
 80043f2:	f7fd fb5b 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[3])));
 80043f6:	4b87      	ldr	r3, [pc, #540]	; (8004614 <MenuDIAGNOSTIC+0x2cc>)
 80043f8:	88d8      	ldrh	r0, [r3, #6]
 80043fa:	b280      	uxth	r0, r0
 80043fc:	f7fc ff34 	bl	8001268 <itoa>
 8004400:	f7fd fb54 	bl	8001aac <PrintToLCD>
		PrintToLCD("      ");
 8004404:	4884      	ldr	r0, [pc, #528]	; (8004618 <MenuDIAGNOSTIC+0x2d0>)
 8004406:	f7fd fb51 	bl	8001aac <PrintToLCD>
 800440a:	e001      	b.n	8004410 <MenuDIAGNOSTIC+0xc8>
		if (CountShow1<0) CountShow1=MAXITEM-1;
 800440c:	2307      	movs	r3, #7
 800440e:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 2)
 8004410:	f994 5000 	ldrsb.w	r5, [r4]
 8004414:	2d02      	cmp	r5, #2
 8004416:	d11d      	bne.n	8004454 <MenuDIAGNOSTIC+0x10c>
		OUT_ON();
 8004418:	f7fe f8aa 	bl	8002570 <OUT_ON>
		lcd_set_xy(0,0);
 800441c:	2100      	movs	r1, #0
 800441e:	4608      	mov	r0, r1
 8004420:	f7fd fac4 	bl	80019ac <lcd_set_xy>
		PrintToLCD("Uout ");
 8004424:	487d      	ldr	r0, [pc, #500]	; (800461c <MenuDIAGNOSTIC+0x2d4>)
 8004426:	f7fd fb41 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 800442a:	4b7d      	ldr	r3, [pc, #500]	; (8004620 <MenuDIAGNOSTIC+0x2d8>)
 800442c:	4629      	mov	r1, r5
 800442e:	8818      	ldrh	r0, [r3, #0]
 8004430:	b280      	uxth	r0, r0
 8004432:	f7fc ff91 	bl	8001358 <itoa_koma>
 8004436:	f7fd fb39 	bl	8001aac <PrintToLCD>
		PrintToLCD("V ");
 800443a:	4875      	ldr	r0, [pc, #468]	; (8004610 <MenuDIAGNOSTIC+0x2c8>)
 800443c:	f7fd fb36 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 8004440:	4b74      	ldr	r3, [pc, #464]	; (8004614 <MenuDIAGNOSTIC+0x2cc>)
 8004442:	8898      	ldrh	r0, [r3, #4]
 8004444:	b280      	uxth	r0, r0
 8004446:	f7fc ff0f 	bl	8001268 <itoa>
 800444a:	f7fd fb2f 	bl	8001aac <PrintToLCD>
		PrintToLCD("      ");
 800444e:	4872      	ldr	r0, [pc, #456]	; (8004618 <MenuDIAGNOSTIC+0x2d0>)
 8004450:	f7fd fb2c 	bl	8001aac <PrintToLCD>
	if(CountShow1 == 3)
 8004454:	f994 3000 	ldrsb.w	r3, [r4]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d11d      	bne.n	8004498 <MenuDIAGNOSTIC+0x150>
		LOAD_OFF();
 800445c:	f7fe fb9e 	bl	8002b9c <LOAD_OFF>
		OUT_ON();
 8004460:	f7fe f886 	bl	8002570 <OUT_ON>
		lcd_set_xy(0,0);
 8004464:	2100      	movs	r1, #0
 8004466:	4608      	mov	r0, r1
 8004468:	f7fd faa0 	bl	80019ac <lcd_set_xy>
		PrintToLCD("Iout ");
 800446c:	486d      	ldr	r0, [pc, #436]	; (8004624 <MenuDIAGNOSTIC+0x2dc>)
 800446e:	f7fd fb1d 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(Current));
 8004472:	4b6d      	ldr	r3, [pc, #436]	; (8004628 <MenuDIAGNOSTIC+0x2e0>)
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f7fc fef7 	bl	8001268 <itoa>
 800447a:	f7fd fb17 	bl	8001aac <PrintToLCD>
		PrintToLCD("mA ");
 800447e:	486b      	ldr	r0, [pc, #428]	; (800462c <MenuDIAGNOSTIC+0x2e4>)
 8004480:	f7fd fb14 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[1])));
 8004484:	4b63      	ldr	r3, [pc, #396]	; (8004614 <MenuDIAGNOSTIC+0x2cc>)
 8004486:	8858      	ldrh	r0, [r3, #2]
 8004488:	b280      	uxth	r0, r0
 800448a:	f7fc feed 	bl	8001268 <itoa>
 800448e:	f7fd fb0d 	bl	8001aac <PrintToLCD>
		PrintToLCD("      ");
 8004492:	4861      	ldr	r0, [pc, #388]	; (8004618 <MenuDIAGNOSTIC+0x2d0>)
 8004494:	f7fd fb0a 	bl	8001aac <PrintToLCD>
	if(CountShow1 == 4)
 8004498:	f994 3000 	ldrsb.w	r3, [r4]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d11e      	bne.n	80044de <MenuDIAGNOSTIC+0x196>
		OUT_OFF();
 80044a0:	f7fe f84c 	bl	800253c <OUT_OFF>
		LOAD_ON();
 80044a4:	f7fe fb10 	bl	8002ac8 <LOAD_ON>
		lcd_set_xy(0,0);
 80044a8:	2100      	movs	r1, #0
 80044aa:	4608      	mov	r0, r1
 80044ac:	f7fd fa7e 	bl	80019ac <lcd_set_xy>
		PrintToLCD("I(l) ");
 80044b0:	485f      	ldr	r0, [pc, #380]	; (8004630 <MenuDIAGNOSTIC+0x2e8>)
 80044b2:	f7fd fafb 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(Current_load));
 80044b6:	4b5f      	ldr	r3, [pc, #380]	; (8004634 <MenuDIAGNOSTIC+0x2ec>)
 80044b8:	8818      	ldrh	r0, [r3, #0]
 80044ba:	b200      	sxth	r0, r0
 80044bc:	f7fc fed4 	bl	8001268 <itoa>
 80044c0:	f7fd faf4 	bl	8001aac <PrintToLCD>
		PrintToLCD("mA ");
 80044c4:	4859      	ldr	r0, [pc, #356]	; (800462c <MenuDIAGNOSTIC+0x2e4>)
 80044c6:	f7fd faf1 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[0]));
 80044ca:	4b52      	ldr	r3, [pc, #328]	; (8004614 <MenuDIAGNOSTIC+0x2cc>)
 80044cc:	8818      	ldrh	r0, [r3, #0]
 80044ce:	b280      	uxth	r0, r0
 80044d0:	f7fc feca 	bl	8001268 <itoa>
 80044d4:	f7fd faea 	bl	8001aac <PrintToLCD>
		PrintToLCD("       ");
 80044d8:	4857      	ldr	r0, [pc, #348]	; (8004638 <MenuDIAGNOSTIC+0x2f0>)
 80044da:	f7fd fae7 	bl	8001aac <PrintToLCD>
	if(CountShow1 == 5)
 80044de:	f994 3000 	ldrsb.w	r3, [r4]
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d147      	bne.n	8004576 <MenuDIAGNOSTIC+0x22e>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80044e6:	4e49      	ldr	r6, [pc, #292]	; (800460c <MenuDIAGNOSTIC+0x2c4>)
 80044e8:	4f54      	ldr	r7, [pc, #336]	; (800463c <MenuDIAGNOSTIC+0x2f4>)
		LOAD_OFF();
 80044ea:	f7fe fb57 	bl	8002b9c <LOAD_OFF>
		OUT_ON();
 80044ee:	f7fe f83f 	bl	8002570 <OUT_ON>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80044f2:	8833      	ldrh	r3, [r6, #0]
 80044f4:	883a      	ldrh	r2, [r7, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	b292      	uxth	r2, r2
 80044fa:	1a9a      	subs	r2, r3, r2
 80044fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8004500:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8004628 <MenuDIAGNOSTIC+0x2e0>
 8004504:	4353      	muls	r3, r2
 8004506:	f8d8 1000 	ldr.w	r1, [r8]
 800450a:	4d4d      	ldr	r5, [pc, #308]	; (8004640 <MenuDIAGNOSTIC+0x2f8>)
 800450c:	fb93 f3f1 	sdiv	r3, r3, r1
		lcd_set_xy(0,0);
 8004510:	2100      	movs	r1, #0
 8004512:	4608      	mov	r0, r1
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004514:	64ab      	str	r3, [r5, #72]	; 0x48
		lcd_set_xy(0,0);
 8004516:	f7fd fa49 	bl	80019ac <lcd_set_xy>
		PrintToLCD("R=");
 800451a:	484a      	ldr	r0, [pc, #296]	; (8004644 <MenuDIAGNOSTIC+0x2fc>)
 800451c:	f7fd fac6 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8004520:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004522:	f7fc fea1 	bl	8001268 <itoa>
 8004526:	f7fd fac1 	bl	8001aac <PrintToLCD>
		PrintToLCD("mOm ");
 800452a:	4847      	ldr	r0, [pc, #284]	; (8004648 <MenuDIAGNOSTIC+0x300>)
 800452c:	f7fd fabe 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_MOSFET));
 8004530:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004532:	f7fc fe99 	bl	8001268 <itoa>
 8004536:	f7fd fab9 	bl	8001aac <PrintToLCD>
		PrintToLCD("mOm    ");
 800453a:	4844      	ldr	r0, [pc, #272]	; (800464c <MenuDIAGNOSTIC+0x304>)
 800453c:	f7fd fab6 	bl	8001aac <PrintToLCD>
		logDebugD("I: ",Current,0);
 8004540:	4843      	ldr	r0, [pc, #268]	; (8004650 <MenuDIAGNOSTIC+0x308>)
 8004542:	f000 ff4d 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004546:	2200      	movs	r2, #0
 8004548:	f8d8 1000 	ldr.w	r1, [r8]
 800454c:	4841      	ldr	r0, [pc, #260]	; (8004654 <MenuDIAGNOSTIC+0x30c>)
 800454e:	f000 ff85 	bl	800545c <printToBufferUART1D>
		logDebugD("U_PS: ",U_PS,2);
 8004552:	483f      	ldr	r0, [pc, #252]	; (8004650 <MenuDIAGNOSTIC+0x308>)
 8004554:	f000 ff44 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004558:	8831      	ldrh	r1, [r6, #0]
 800455a:	2202      	movs	r2, #2
 800455c:	b289      	uxth	r1, r1
 800455e:	483e      	ldr	r0, [pc, #248]	; (8004658 <MenuDIAGNOSTIC+0x310>)
 8004560:	f000 ff7c 	bl	800545c <printToBufferUART1D>
		logDebugD("U out: ",U_OUT_ForSetResistance,2);
 8004564:	483a      	ldr	r0, [pc, #232]	; (8004650 <MenuDIAGNOSTIC+0x308>)
 8004566:	f000 ff3b 	bl	80053e0 <printToBufferWithoutEndUART1>
 800456a:	8839      	ldrh	r1, [r7, #0]
 800456c:	2202      	movs	r2, #2
 800456e:	483b      	ldr	r0, [pc, #236]	; (800465c <MenuDIAGNOSTIC+0x314>)
 8004570:	b289      	uxth	r1, r1
 8004572:	f000 ff73 	bl	800545c <printToBufferUART1D>
	if(CountShow1 == 6)
 8004576:	f994 3000 	ldrsb.w	r3, [r4]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d10f      	bne.n	800459e <MenuDIAGNOSTIC+0x256>
		OFF();
 800457e:	f7fe ff55 	bl	800342c <OFF>
		lcd_set_xy(0,0);
 8004582:	2100      	movs	r1, #0
 8004584:	4608      	mov	r0, r1
 8004586:	f7fd fa11 	bl	80019ac <lcd_set_xy>
		PrintToLCD(ClockStringWithSec(time_sec,s));
 800458a:	4b35      	ldr	r3, [pc, #212]	; (8004660 <MenuDIAGNOSTIC+0x318>)
 800458c:	a901      	add	r1, sp, #4
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	f7fc ff91 	bl	80014b6 <ClockStringWithSec>
 8004594:	f7fd fa8a 	bl	8001aac <PrintToLCD>
		PrintToLCD("        ");
 8004598:	4832      	ldr	r0, [pc, #200]	; (8004664 <MenuDIAGNOSTIC+0x31c>)
 800459a:	f7fd fa87 	bl	8001aac <PrintToLCD>
	if(CountShow1 == 7)
 800459e:	f994 3000 	ldrsb.w	r3, [r4]
 80045a2:	2b07      	cmp	r3, #7
 80045a4:	d11f      	bne.n	80045e6 <MenuDIAGNOSTIC+0x29e>
		LOAD_OFF();
 80045a6:	f7fe faf9 	bl	8002b9c <LOAD_OFF>
		OUT_ON();
 80045aa:	f7fd ffe1 	bl	8002570 <OUT_ON>
		lcd_set_xy(0,0);
 80045ae:	2100      	movs	r1, #0
 80045b0:	4608      	mov	r0, r1
 80045b2:	f7fd f9fb 	bl	80019ac <lcd_set_xy>
		PrintToLCD("T=");
 80045b6:	482c      	ldr	r0, [pc, #176]	; (8004668 <MenuDIAGNOSTIC+0x320>)
 80045b8:	f7fd fa78 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(GetTemperature(Rt)));
 80045bc:	4b2b      	ldr	r3, [pc, #172]	; (800466c <MenuDIAGNOSTIC+0x324>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	f7fc fb4a 	bl	8000c58 <GetTemperature>
 80045c4:	f7fc fe50 	bl	8001268 <itoa>
 80045c8:	f7fd fa70 	bl	8001aac <PrintToLCD>
		PrintToLCD("C   ");
 80045cc:	4828      	ldr	r0, [pc, #160]	; (8004670 <MenuDIAGNOSTIC+0x328>)
 80045ce:	f7fd fa6d 	bl	8001aac <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[5]));
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <MenuDIAGNOSTIC+0x2cc>)
 80045d4:	8958      	ldrh	r0, [r3, #10]
 80045d6:	b280      	uxth	r0, r0
 80045d8:	f7fc fe46 	bl	8001268 <itoa>
 80045dc:	f7fd fa66 	bl	8001aac <PrintToLCD>
		PrintToLCD("    ");
 80045e0:	4808      	ldr	r0, [pc, #32]	; (8004604 <MenuDIAGNOSTIC+0x2bc>)
 80045e2:	f7fd fa63 	bl	8001aac <PrintToLCD>
}
 80045e6:	b006      	add	sp, #24
 80045e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ec:	200007b0 	.word	0x200007b0
 80045f0:	2000079e 	.word	0x2000079e
 80045f4:	08006426 	.word	0x08006426
 80045f8:	20000868 	.word	0x20000868
 80045fc:	0800642b 	.word	0x0800642b
 8004600:	2000087a 	.word	0x2000087a
 8004604:	08006259 	.word	0x08006259
 8004608:	08006430 	.word	0x08006430
 800460c:	20000884 	.word	0x20000884
 8004610:	080061c2 	.word	0x080061c2
 8004614:	2000086a 	.word	0x2000086a
 8004618:	08006257 	.word	0x08006257
 800461c:	08006435 	.word	0x08006435
 8004620:	2000087c 	.word	0x2000087c
 8004624:	0800643b 	.word	0x0800643b
 8004628:	200002b4 	.word	0x200002b4
 800462c:	08006441 	.word	0x08006441
 8004630:	08006445 	.word	0x08006445
 8004634:	200002be 	.word	0x200002be
 8004638:	08006256 	.word	0x08006256
 800463c:	200002c0 	.word	0x200002c0
 8004640:	20000004 	.word	0x20000004
 8004644:	0800644b 	.word	0x0800644b
 8004648:	0800644e 	.word	0x0800644e
 800464c:	08006453 	.word	0x08006453
 8004650:	08005ac8 	.word	0x08005ac8
 8004654:	0800645b 	.word	0x0800645b
 8004658:	0800645f 	.word	0x0800645f
 800465c:	08006466 	.word	0x08006466
 8004660:	200007f8 	.word	0x200007f8
 8004664:	08006255 	.word	0x08006255
 8004668:	0800646e 	.word	0x0800646e
 800466c:	20000880 	.word	0x20000880
 8004670:	08006471 	.word	0x08006471

08004674 <adc_func>:
	//3 U PS
	//4 U In
	//5 T
	//6 temp
	//7 vref
	volatile int32_t Ut = 0;
 8004674:	2300      	movs	r3, #0
{
 8004676:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile int32_t It_m = 0;
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004678:	4c7a      	ldr	r4, [pc, #488]	; (8004864 <adc_func+0x1f0>)
{
 800467a:	b085      	sub	sp, #20
	volatile int32_t Ut = 0;
 800467c:	9300      	str	r3, [sp, #0]
	volatile int32_t It = 0;
 800467e:	9301      	str	r3, [sp, #4]
	volatile int32_t Ut_m = 0;
 8004680:	9302      	str	r3, [sp, #8]
	volatile int32_t It_m = 0;
 8004682:	9303      	str	r3, [sp, #12]
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004684:	89e3      	ldrh	r3, [r4, #14]
	Ut= (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 8004686:	4d78      	ldr	r5, [pc, #480]	; (8004868 <adc_func+0x1f4>)
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004688:	b29a      	uxth	r2, r3
 800468a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 800468e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004692:	4a76      	ldr	r2, [pc, #472]	; (800486c <adc_func+0x1f8>)
 8004694:	b29b      	uxth	r3, r3
 8004696:	8013      	strh	r3, [r2, #0]
	Ut= (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 8004698:	88e3      	ldrh	r3, [r4, #6]
 800469a:	89e2      	ldrh	r2, [r4, #14]
 800469c:	b299      	uxth	r1, r3
 800469e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80046a0:	b292      	uxth	r2, r2
 80046a2:	434b      	muls	r3, r1
 80046a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046a8:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax1(Ut);
 80046aa:	9800      	ldr	r0, [sp, #0]
 80046ac:	f7fc fffa 	bl	80016a4 <middle_of_3Umax1>
 80046b0:	9002      	str	r0, [sp, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 80046b2:	9802      	ldr	r0, [sp, #8]
 80046b4:	f7fd f84c 	bl	8001750 <RunningAverageU1>
 80046b8:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <adc_func+0x1fc>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4410      	add	r0, r2
	SumU1Counter ++;
 80046be:	4a6d      	ldr	r2, [pc, #436]	; (8004874 <adc_func+0x200>)
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 80046c0:	6018      	str	r0, [r3, #0]
	SumU1Counter ++;
 80046c2:	8811      	ldrh	r1, [r2, #0]
 80046c4:	3101      	adds	r1, #1
 80046c6:	b209      	sxth	r1, r1
 80046c8:	8011      	strh	r1, [r2, #0]
	if (SumU1Counter >= NUM_READ)
 80046ca:	8811      	ldrh	r1, [r2, #0]
 80046cc:	b209      	sxth	r1, r1
 80046ce:	291f      	cmp	r1, #31
 80046d0:	dd0f      	ble.n	80046f2 <adc_func+0x7e>
	{
		U_PS = SumU1/NUM_READ;
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	4868      	ldr	r0, [pc, #416]	; (8004878 <adc_func+0x204>)
 80046d6:	2900      	cmp	r1, #0
 80046d8:	bfb8      	it	lt
 80046da:	311f      	addlt	r1, #31
 80046dc:	f3c1 114f 	ubfx	r1, r1, #5, #16
 80046e0:	8001      	strh	r1, [r0, #0]
		SumU1Counter = 0;
 80046e2:	2100      	movs	r1, #0
 80046e4:	8011      	strh	r1, [r2, #0]
		SumU1 = 0;
 80046e6:	6019      	str	r1, [r3, #0]
		if (U_PS < 3) U_PS = 0;
 80046e8:	8803      	ldrh	r3, [r0, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	bf98      	it	ls
 80046f0:	8001      	strhls	r1, [r0, #0]
	}

	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForVoltage1) / RegularConvData[7];
 80046f2:	88a3      	ldrh	r3, [r4, #4]
 80046f4:	89e2      	ldrh	r2, [r4, #14]
 80046f6:	b299      	uxth	r1, r3
 80046f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80046fa:	b292      	uxth	r2, r2
 80046fc:	434b      	muls	r3, r1
 80046fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004702:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax2(Ut);
 8004704:	9800      	ldr	r0, [sp, #0]
 8004706:	f7fc ffe9 	bl	80016dc <middle_of_3Umax2>
 800470a:	9002      	str	r0, [sp, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 800470c:	9802      	ldr	r0, [sp, #8]
 800470e:	f7fd f820 	bl	8001752 <RunningAverageU2>
 8004712:	4f5a      	ldr	r7, [pc, #360]	; (800487c <adc_func+0x208>)
	SumU2Counter ++;
 8004714:	4e5a      	ldr	r6, [pc, #360]	; (8004880 <adc_func+0x20c>)
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	4418      	add	r0, r3
 800471a:	6038      	str	r0, [r7, #0]
	SumU2Counter ++;
 800471c:	8833      	ldrh	r3, [r6, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	b21b      	sxth	r3, r3
 8004722:	8033      	strh	r3, [r6, #0]


	Ut = (RegularConvData[4] * CalibrationData.CalibrationValueForVoltage2) / RegularConvData[7];
 8004724:	8923      	ldrh	r3, [r4, #8]
 8004726:	89e2      	ldrh	r2, [r4, #14]
 8004728:	b299      	uxth	r1, r3
 800472a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800472c:	b292      	uxth	r2, r2
 800472e:	434b      	muls	r3, r1
 8004730:	fbb3 f3f2 	udiv	r3, r3, r2
 8004734:	9300      	str	r3, [sp, #0]
	U_IN = middle_of_3Umax3(Ut);
 8004736:	9800      	ldr	r0, [sp, #0]
 8004738:	f7fc ffec 	bl	8001714 <middle_of_3Umax3>
 800473c:	4b51      	ldr	r3, [pc, #324]	; (8004884 <adc_func+0x210>)
 800473e:	b280      	uxth	r0, r0
 8004740:	8018      	strh	r0, [r3, #0]


	It = (RegularConvData[1] * CalibrationData.CalibrationForCurrent_mA1*10) / RegularConvData[7] ;//  Current A/10
 8004742:	8861      	ldrh	r1, [r4, #2]
 8004744:	89e3      	ldrh	r3, [r4, #14]
 8004746:	b289      	uxth	r1, r1
 8004748:	b29a      	uxth	r2, r3
 800474a:	69ab      	ldr	r3, [r5, #24]
 800474c:	4359      	muls	r1, r3
 800474e:	230a      	movs	r3, #10
 8004750:	434b      	muls	r3, r1
 8004752:	fbb3 f3f2 	udiv	r3, r3, r2
 8004756:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax1(It);
 8004758:	9801      	ldr	r0, [sp, #4]
 800475a:	f7fc ff6b 	bl	8001634 <middle_of_3Imax1>
 800475e:	9003      	str	r0, [sp, #12]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8004760:	9803      	ldr	r0, [sp, #12]
 8004762:	f7fc fff3 	bl	800174c <RunningAverageI1>
 8004766:	4b48      	ldr	r3, [pc, #288]	; (8004888 <adc_func+0x214>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4410      	add	r0, r2
	SumI1Counter ++;
 800476c:	4a47      	ldr	r2, [pc, #284]	; (800488c <adc_func+0x218>)
	SumI1 =SumI1 + RunningAverageI1(It_m);
 800476e:	6018      	str	r0, [r3, #0]
	SumI1Counter ++;
 8004770:	8811      	ldrh	r1, [r2, #0]
 8004772:	3101      	adds	r1, #1
 8004774:	b209      	sxth	r1, r1
 8004776:	8011      	strh	r1, [r2, #0]
	if (SumI1Counter >= NUM_READ)
 8004778:	8811      	ldrh	r1, [r2, #0]
 800477a:	b209      	sxth	r1, r1
 800477c:	291f      	cmp	r1, #31
 800477e:	dd0a      	ble.n	8004796 <adc_func+0x122>
	{
		Current_Out = SumI1/NUM_READ;
 8004780:	6819      	ldr	r1, [r3, #0]
 8004782:	4843      	ldr	r0, [pc, #268]	; (8004890 <adc_func+0x21c>)
 8004784:	2900      	cmp	r1, #0
 8004786:	bfb8      	it	lt
 8004788:	311f      	addlt	r1, #31
 800478a:	f341 114f 	sbfx	r1, r1, #5, #16
 800478e:	8001      	strh	r1, [r0, #0]
		SumI1Counter = 0;
 8004790:	2100      	movs	r1, #0
 8004792:	8011      	strh	r1, [r2, #0]
		SumI1 = 0;
 8004794:	6019      	str	r1, [r3, #0]
	}

	It= (RegularConvData[0] * CalibrationData.CalibrationForCurrent_mkA1*10) / RegularConvData[7] ;//  Current A/10
 8004796:	8821      	ldrh	r1, [r4, #0]
 8004798:	89e3      	ldrh	r3, [r4, #14]
 800479a:	b289      	uxth	r1, r1
 800479c:	b29a      	uxth	r2, r3
 800479e:	6a2b      	ldr	r3, [r5, #32]
 80047a0:	4359      	muls	r1, r3
 80047a2:	230a      	movs	r3, #10
 80047a4:	434b      	muls	r3, r1
 80047a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047aa:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax2(It);
 80047ac:	9801      	ldr	r0, [sp, #4]
 80047ae:	f7fc ff5d 	bl	800166c <middle_of_3Imax2>
 80047b2:	9003      	str	r0, [sp, #12]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 80047b4:	9803      	ldr	r0, [sp, #12]
 80047b6:	f7fc ffca 	bl	800174e <RunningAverageI2>
 80047ba:	4b36      	ldr	r3, [pc, #216]	; (8004894 <adc_func+0x220>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4410      	add	r0, r2
	SumI2Counter ++;
 80047c0:	4a35      	ldr	r2, [pc, #212]	; (8004898 <adc_func+0x224>)
	SumI2 =SumI2 + RunningAverageI2(It_m);
 80047c2:	6018      	str	r0, [r3, #0]
	SumI2Counter ++;
 80047c4:	8811      	ldrh	r1, [r2, #0]
 80047c6:	3101      	adds	r1, #1
 80047c8:	b209      	sxth	r1, r1
 80047ca:	8011      	strh	r1, [r2, #0]
	if (SumI2Counter >= NUM_READ)
 80047cc:	8811      	ldrh	r1, [r2, #0]
 80047ce:	b209      	sxth	r1, r1
 80047d0:	291f      	cmp	r1, #31
 80047d2:	dd0a      	ble.n	80047ea <adc_func+0x176>
	{
		Current_load = SumI2/NUM_READ;
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	4831      	ldr	r0, [pc, #196]	; (800489c <adc_func+0x228>)
 80047d8:	2900      	cmp	r1, #0
 80047da:	bfb8      	it	lt
 80047dc:	311f      	addlt	r1, #31
 80047de:	f341 114f 	sbfx	r1, r1, #5, #16
 80047e2:	8001      	strh	r1, [r0, #0]
		SumI2Counter = 0;
 80047e4:	2100      	movs	r1, #0
 80047e6:	8011      	strh	r1, [r2, #0]
		SumI2 = 0;
 80047e8:	6019      	str	r1, [r3, #0]
	}
	if ((GPIOB->IDR & 0x02)==0x02)//if load on
 80047ea:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <adc_func+0x22c>)
 80047ec:	492d      	ldr	r1, [pc, #180]	; (80048a4 <adc_func+0x230>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f013 0f02 	tst.w	r3, #2
	{
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 80047f4:	bf15      	itete	ne
 80047f6:	4b29      	ldrne	r3, [pc, #164]	; (800489c <adc_func+0x228>)
	}else
	{
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 80047f8:	4b25      	ldreq	r3, [pc, #148]	; (8004890 <adc_func+0x21c>)
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 80047fa:	881b      	ldrhne	r3, [r3, #0]
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 80047fc:	881b      	ldrheq	r3, [r3, #0]
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 80047fe:	bf15      	itete	ne
 8004800:	b21a      	sxthne	r2, r3
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 8004802:	68aa      	ldreq	r2, [r5, #8]
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 8004804:	692b      	ldrne	r3, [r5, #16]
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 8004806:	b21b      	sxtheq	r3, r3
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	600b      	str	r3, [r1, #0]
	}
	if (SumU2Counter >= NUM_READ)
 800480c:	8833      	ldrh	r3, [r6, #0]
 800480e:	b21b      	sxth	r3, r3
 8004810:	2b1f      	cmp	r3, #31
 8004812:	dd24      	ble.n	800485e <adc_func+0x1ea>
	{

		U_OUTtmp = SumU2/NUM_READ;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4a24      	ldr	r2, [pc, #144]	; (80048a8 <adc_func+0x234>)
 8004818:	2b00      	cmp	r3, #0
 800481a:	bfb8      	it	lt
 800481c:	331f      	addlt	r3, #31
 800481e:	115b      	asrs	r3, r3, #5
 8004820:	6013      	str	r3, [r2, #0]
		SumU2 = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
		SumU2Counter = 0;
 8004826:	8033      	strh	r3, [r6, #0]

		U_OUT_ForSetResistance = U_OUTtmp;
 8004828:	6810      	ldr	r0, [r2, #0]
 800482a:	4c20      	ldr	r4, [pc, #128]	; (80048ac <adc_func+0x238>)
 800482c:	b280      	uxth	r0, r0
 800482e:	8020      	strh	r0, [r4, #0]
		if (U_OUTtmp<3) U_OUTtmp = 0;
 8004830:	6810      	ldr	r0, [r2, #0]
 8004832:	2802      	cmp	r0, #2
 8004834:	bfd8      	it	le
 8004836:	6013      	strle	r3, [r2, #0]

		if (Current>=0)
 8004838:	6808      	ldr	r0, [r1, #0]
 800483a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
		{
			U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
 800483c:	680c      	ldr	r4, [r1, #0]
 800483e:	481c      	ldr	r0, [pc, #112]	; (80048b0 <adc_func+0x23c>)
 8004840:	4363      	muls	r3, r4
 8004842:	fb93 f3f0 	sdiv	r3, r3, r0
 8004846:	6811      	ldr	r1, [r2, #0]
 8004848:	440b      	add	r3, r1
 800484a:	6013      	str	r3, [r2, #0]
		}
		else
		{
			U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
		}
		if (U_OUTtmp<3)
 800484c:	6813      	ldr	r3, [r2, #0]
 800484e:	2b02      	cmp	r3, #2
			U_OUTtmp=0;
 8004850:	bfdc      	itt	le
 8004852:	2300      	movle	r3, #0
 8004854:	6013      	strle	r3, [r2, #0]
		U_OUT = U_OUTtmp;
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <adc_func+0x240>)
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]
	}
	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 800485e:	b005      	add	sp, #20
 8004860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004862:	bf00      	nop
 8004864:	2000086a 	.word	0x2000086a
 8004868:	20000004 	.word	0x20000004
 800486c:	2000087a 	.word	0x2000087a
 8004870:	200007cc 	.word	0x200007cc
 8004874:	200007d0 	.word	0x200007d0
 8004878:	20000884 	.word	0x20000884
 800487c:	200007d4 	.word	0x200007d4
 8004880:	200007d8 	.word	0x200007d8
 8004884:	20000868 	.word	0x20000868
 8004888:	200007bc 	.word	0x200007bc
 800488c:	200007c0 	.word	0x200007c0
 8004890:	200002bc 	.word	0x200002bc
 8004894:	200007c4 	.word	0x200007c4
 8004898:	200007c8 	.word	0x200007c8
 800489c:	200002be 	.word	0x200002be
 80048a0:	40010c00 	.word	0x40010c00
 80048a4:	200002b4 	.word	0x200002b4
 80048a8:	200007ec 	.word	0x200007ec
 80048ac:	200002c0 	.word	0x200002c0
 80048b0:	ffffd8f0 	.word	0xffffd8f0
 80048b4:	2000087c 	.word	0x2000087c

080048b8 <SysTick_Callback>:
{
 80048b8:	b538      	push	{r3, r4, r5, lr}
	BUT_Debrief();
 80048ba:	f7fd fdbd 	bl	8002438 <BUT_Debrief>
	TimerForReadyMeasurement_ms++;
 80048be:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <SysTick_Callback+0xb0>)
	if (Count10mSecond >= 5)
 80048c0:	4c2a      	ldr	r4, [pc, #168]	; (800496c <SysTick_Callback+0xb4>)
	TimerForReadyMeasurement_ms++;
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	6013      	str	r3, [r2, #0]
	if (Count10mSecond >= 5)
 80048c8:	8823      	ldrh	r3, [r4, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d903      	bls.n	80048d8 <SysTick_Callback+0x20>
		Count10mSecond = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	8023      	strh	r3, [r4, #0]
		adc_func();
 80048d4:	f7ff fece 	bl	8004674 <adc_func>
	if (Count100mSecond >= 100)
 80048d8:	4a25      	ldr	r2, [pc, #148]	; (8004970 <SysTick_Callback+0xb8>)
 80048da:	8813      	ldrh	r3, [r2, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b63      	cmp	r3, #99	; 0x63
		Count100mSecond = 0;
 80048e0:	bf84      	itt	hi
 80048e2:	2300      	movhi	r3, #0
 80048e4:	8013      	strhhi	r3, [r2, #0]
	if (Count1000mSecond >= 1000)
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <SysTick_Callback+0xbc>)
 80048e8:	8819      	ldrh	r1, [r3, #0]
 80048ea:	b289      	uxth	r1, r1
 80048ec:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80048f0:	d32d      	bcc.n	800494e <SysTick_Callback+0x96>
		Count1000mSecond = 0;
 80048f2:	2100      	movs	r1, #0
		CurrentConsumption1s = CurrentConsumption1s  + Current;
 80048f4:	4820      	ldr	r0, [pc, #128]	; (8004978 <SysTick_Callback+0xc0>)
		Count1000mSecond = 0;
 80048f6:	8019      	strh	r1, [r3, #0]
		CurrentConsumption1s = CurrentConsumption1s  + Current;
 80048f8:	4920      	ldr	r1, [pc, #128]	; (800497c <SysTick_Callback+0xc4>)
 80048fa:	6805      	ldr	r5, [r0, #0]
 80048fc:	6809      	ldr	r1, [r1, #0]
 80048fe:	4429      	add	r1, r5
 8004900:	6001      	str	r1, [r0, #0]
		if (ChargeStatusForTimer == 1)
 8004902:	491f      	ldr	r1, [pc, #124]	; (8004980 <SysTick_Callback+0xc8>)
 8004904:	7809      	ldrb	r1, [r1, #0]
 8004906:	2901      	cmp	r1, #1
			ChargeTimeSec++;
 8004908:	bf01      	itttt	eq
 800490a:	481e      	ldreq	r0, [pc, #120]	; (8004984 <SysTick_Callback+0xcc>)
 800490c:	6801      	ldreq	r1, [r0, #0]
 800490e:	3101      	addeq	r1, #1
 8004910:	6001      	streq	r1, [r0, #0]
		if (DisChargeStatusForTimer == 1)
 8004912:	491d      	ldr	r1, [pc, #116]	; (8004988 <SysTick_Callback+0xd0>)
 8004914:	7809      	ldrb	r1, [r1, #0]
 8004916:	2901      	cmp	r1, #1
			DischargeTimeSec++;
 8004918:	bf01      	itttt	eq
 800491a:	481c      	ldreq	r0, [pc, #112]	; (800498c <SysTick_Callback+0xd4>)
 800491c:	6801      	ldreq	r1, [r0, #0]
 800491e:	3101      	addeq	r1, #1
 8004920:	6001      	streq	r1, [r0, #0]
		if (Status_Timer_Sec == 1)
 8004922:	491b      	ldr	r1, [pc, #108]	; (8004990 <SysTick_Callback+0xd8>)
 8004924:	7809      	ldrb	r1, [r1, #0]
 8004926:	2901      	cmp	r1, #1
			Timer_Sec++;
 8004928:	bf01      	itttt	eq
 800492a:	481a      	ldreq	r0, [pc, #104]	; (8004994 <SysTick_Callback+0xdc>)
 800492c:	6801      	ldreq	r1, [r0, #0]
 800492e:	3101      	addeq	r1, #1
 8004930:	6001      	streq	r1, [r0, #0]
		time_sec++;
 8004932:	4919      	ldr	r1, [pc, #100]	; (8004998 <SysTick_Callback+0xe0>)
 8004934:	6808      	ldr	r0, [r1, #0]
 8004936:	3001      	adds	r0, #1
 8004938:	6008      	str	r0, [r1, #0]
		if (time_sec%2==0) GPIOA->BSRR =  GPIO_BSRR_BS15;
 800493a:	6809      	ldr	r1, [r1, #0]
 800493c:	f011 0f01 	tst.w	r1, #1
 8004940:	bf0c      	ite	eq
 8004942:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
		else GPIOA->BSRR =  GPIO_BSRR_BR15;
 8004946:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800494a:	4914      	ldr	r1, [pc, #80]	; (800499c <SysTick_Callback+0xe4>)
 800494c:	6108      	str	r0, [r1, #16]
	Count10mSecond++;
 800494e:	8821      	ldrh	r1, [r4, #0]
 8004950:	3101      	adds	r1, #1
 8004952:	b289      	uxth	r1, r1
 8004954:	8021      	strh	r1, [r4, #0]
	Count100mSecond++;
 8004956:	8811      	ldrh	r1, [r2, #0]
 8004958:	3101      	adds	r1, #1
 800495a:	b289      	uxth	r1, r1
 800495c:	8011      	strh	r1, [r2, #0]
	Count1000mSecond++;
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	3201      	adds	r2, #1
 8004962:	b292      	uxth	r2, r2
 8004964:	801a      	strh	r2, [r3, #0]
}
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	200007dc 	.word	0x200007dc
 800496c:	200002b0 	.word	0x200002b0
 8004970:	200002ae 	.word	0x200002ae
 8004974:	200002ac 	.word	0x200002ac
 8004978:	200007a0 	.word	0x200007a0
 800497c:	200002b4 	.word	0x200002b4
 8004980:	20000797 	.word	0x20000797
 8004984:	20000798 	.word	0x20000798
 8004988:	200007a4 	.word	0x200007a4
 800498c:	200007a8 	.word	0x200007a8
 8004990:	200007ba 	.word	0x200007ba
 8004994:	200007e0 	.word	0x200007e0
 8004998:	200007f8 	.word	0x200007f8
 800499c:	40010800 	.word	0x40010800

080049a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049a0:	b510      	push	{r4, lr}
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80049a2:	4c1d      	ldr	r4, [pc, #116]	; (8004a18 <SystemClock_Config+0x78>)
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049aa:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80049ac:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80049ae:	039a      	lsls	r2, r3, #14
 80049b0:	d5fc      	bpl.n	80049ac <SystemClock_Config+0xc>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80049b8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80049bc:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 80049be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049c0:	f023 030f 	bic.w	r3, r3, #15
 80049c4:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049cc:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80049ce:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	d5fc      	bpl.n	80049ce <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049dc:	6863      	ldr	r3, [r4, #4]
 80049de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80049e2:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80049e4:	6863      	ldr	r3, [r4, #4]
 80049e6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80049ea:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80049ec:	6863      	ldr	r3, [r4, #4]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	f043 0302 	orr.w	r3, r3, #2
 80049f6:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d1fa      	bne.n	80049f8 <SystemClock_Config+0x58>
  {

  }
  LL_Init1msTick(24000000);
 8004a02:	4806      	ldr	r0, [pc, #24]	; (8004a1c <SystemClock_Config+0x7c>)
 8004a04:	f000 ff86 	bl	8005914 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8004a08:	4804      	ldr	r0, [pc, #16]	; (8004a1c <SystemClock_Config+0x7c>)
 8004a0a:	f000 ff91 	bl	8005930 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8004a0e:	6863      	ldr	r3, [r4, #4]
 8004a10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004a14:	6063      	str	r3, [r4, #4]
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
}
 8004a16:	bd10      	pop	{r4, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	016e3600 	.word	0x016e3600

08004a20 <main>:
{
 8004a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(RCC->APB1ENR, Periphs);
 8004a24:	4dc5      	ldr	r5, [pc, #788]	; (8004d3c <main+0x31c>)
 8004a26:	b091      	sub	sp, #68	; 0x44
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8004a28:	2001      	movs	r0, #1
 8004a2a:	f7fd f859 	bl	8001ae0 <LL_APB2_GRP1_EnableClock>
 8004a2e:	69eb      	ldr	r3, [r5, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a30:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8004d90 <main+0x370>
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004a3a:	69eb      	ldr	r3, [r5, #28]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004a3c:	f8df a354 	ldr.w	sl, [pc, #852]	; 8004d94 <main+0x374>
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	f8d9 200c 	ldr.w	r2, [r9, #12]
  reg_value  =  (reg_value                                   |
 8004a4c:	4bbc      	ldr	r3, [pc, #752]	; (8004d40 <main+0x320>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a52:	0412      	lsls	r2, r2, #16
 8004a54:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 8004a56:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8004a58:	f8c9 300c 	str.w	r3, [r9, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8004a5c:	4bb9      	ldr	r3, [pc, #740]	; (8004d44 <main+0x324>)
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004a5e:	4eba      	ldr	r6, [pc, #744]	; (8004d48 <main+0x328>)
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8004a60:	685a      	ldr	r2, [r3, #4]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a62:	2400      	movs	r4, #0
 8004a64:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8004a68:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8004a6a:	685a      	ldr	r2, [r3, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004a6c:	f04f 0b01 	mov.w	fp, #1
 8004a70:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004a74:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 8004a76:	f7ff ff93 	bl	80049a0 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a7a:	2214      	movs	r2, #20
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	a809      	add	r0, sp, #36	; 0x24
 8004a80:	f000 ff8e 	bl	80059a0 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8004a84:	2020      	movs	r0, #32
 8004a86:	f7fd f82b 	bl	8001ae0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004a8a:	2004      	movs	r0, #4
 8004a8c:	f7fd f828 	bl	8001ae0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004a90:	2008      	movs	r0, #8
 8004a92:	f7fd f825 	bl	8001ae0 <LL_APB2_GRP1_EnableClock>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004a96:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8004a9a:	f8ca 3014 	str.w	r3, [sl, #20]
 8004a9e:	f44f 4309 	mov.w	r3, #35072	; 0x8900
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004aa2:	2702      	movs	r7, #2
 8004aa4:	6173      	str	r3, [r6, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004aa6:	f240 3303 	movw	r3, #771	; 0x303
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004aaa:	f04f 0804 	mov.w	r8, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aae:	a909      	add	r1, sp, #36	; 0x24
 8004ab0:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004ab2:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ab6:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aba:	f000 fde5 	bl	8005688 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
 8004abe:	4ba3      	ldr	r3, [pc, #652]	; (8004d4c <main+0x32c>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac0:	a909      	add	r1, sp, #36	; 0x24
 8004ac2:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004ac4:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004ac8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004acc:	970b      	str	r7, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ace:	f000 fddb 	bl	8005688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_15;
 8004ad2:	4b9f      	ldr	r3, [pc, #636]	; (8004d50 <main+0x330>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad4:	a909      	add	r1, sp, #36	; 0x24
 8004ad6:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004ad8:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004adc:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae0:	f000 fdd2 	bl	8005688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004ae4:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8004ae8:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aea:	a909      	add	r1, sp, #36	; 0x24
 8004aec:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004aee:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004af2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af6:	f000 fdc7 	bl	8005688 <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8004afa:	696b      	ldr	r3, [r5, #20]
 8004afc:	ea43 030b 	orr.w	r3, r3, fp
 8004b00:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004b02:	696b      	ldr	r3, [r5, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b04:	4d93      	ldr	r5, [pc, #588]	; (8004d54 <main+0x334>)
 8004b06:	ea03 030b 	and.w	r3, r3, fp
 8004b0a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004b0c:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b0e:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004b12:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004b16:	f7fd f971 	bl	8001dfc <NVIC_EncodePriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1e:	fa00 f008 	lsl.w	r0, r0, r8
 8004b22:	b2c0      	uxtb	r0, r0
 8004b24:	f885 030b 	strb.w	r0, [r5, #779]	; 0x30b
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004b28:	221c      	movs	r2, #28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2a:	602b      	str	r3, [r5, #0]
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	a809      	add	r0, sp, #36	; 0x24
 8004b30:	f000 ff36 	bl	80059a0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	2214      	movs	r2, #20
 8004b36:	4621      	mov	r1, r4
 8004b38:	a804      	add	r0, sp, #16
 8004b3a:	f000 ff31 	bl	80059a0 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004b3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004b42:	f7fc ffcd 	bl	8001ae0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004b46:	4640      	mov	r0, r8
 8004b48:	f7fc ffca 	bl	8001ae0 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004b4c:	2309      	movs	r3, #9
 8004b4e:	4982      	ldr	r1, [pc, #520]	; (8004d58 <main+0x338>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b50:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004b52:	e9cd 1304 	strd	r1, r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004b56:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b58:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b5a:	e9cd 3406 	strd	r3, r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b5e:	f000 fd93 	bl	8005688 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8004b62:	4b7e      	ldr	r3, [pc, #504]	; (8004d5c <main+0x33c>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b64:	a904      	add	r1, sp, #16
 8004b66:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8004b68:	e9cd 3804 	strd	r3, r8, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b6c:	f000 fd8c 	bl	8005688 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b70:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004b74:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004b78:	f7fd f940 	bl	8001dfc <NVIC_EncodePriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b7c:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7e:	fa00 f008 	lsl.w	r0, r0, r8
 8004b82:	b2c0      	uxtb	r0, r0
 8004b84:	f885 0325 	strb.w	r0, [r5, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b88:	606b      	str	r3, [r5, #4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004b8a:	4d75      	ldr	r5, [pc, #468]	; (8004d60 <main+0x340>)
  LL_USART_Init(USART1, &USART_InitStruct);
 8004b8c:	a909      	add	r1, sp, #36	; 0x24
 8004b8e:	68eb      	ldr	r3, [r5, #12]
 8004b90:	4628      	mov	r0, r5
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = 38400;
 8004b98:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004b9c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004ba0:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004ba2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004ba6:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004baa:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8004bac:	f000 fe46 	bl	800583c <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb0:	692b      	ldr	r3, [r5, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004bb2:	2214      	movs	r2, #20
 8004bb4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004bb8:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004bba:	696b      	ldr	r3, [r5, #20]
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004bc2:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004bc4:	68eb      	ldr	r3, [r5, #12]
 8004bc6:	a804      	add	r0, sp, #16
 8004bc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bcc:	60eb      	str	r3, [r5, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004bce:	e9cd 4402 	strd	r4, r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004bd2:	f000 fee5 	bl	80059a0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd6:	2214      	movs	r2, #20
 8004bd8:	4621      	mov	r1, r4
 8004bda:	a809      	add	r0, sp, #36	; 0x24
 8004bdc:	f000 fee0 	bl	80059a0 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004be0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004be4:	f7fc ff7c 	bl	8001ae0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004be8:	4640      	mov	r0, r8
 8004bea:	f7fc ff79 	bl	8001ae0 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8004bee:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf2:	a909      	add	r1, sp, #36	; 0x24
 8004bf4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004bf6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfa:	f000 fd45 	bl	8005688 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004bfe:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <main+0x344>)
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004c00:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004c04:	681a      	ldr	r2, [r3, #0]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004c06:	f5a5 55a0 	sub.w	r5, r5, #5120	; 0x1400
 8004c0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c0e:	f022 0210 	bic.w	r2, r2, #16
 8004c12:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	a902      	add	r1, sp, #8
 8004c18:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c20:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4628      	mov	r0, r5
 8004c26:	f042 0220 	orr.w	r2, r2, #32
 8004c2a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c3a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c46:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c52:	601a      	str	r2, [r3, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8004c54:	4a44      	ldr	r2, [pc, #272]	; (8004d68 <main+0x348>)
 8004c56:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8004c58:	4a44      	ldr	r2, [pc, #272]	; (8004d6c <main+0x34c>)
 8004c5a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	0c12      	lsrs	r2, r2, #16
 8004c60:	0412      	lsls	r2, r2, #16
 8004c62:	f042 0208 	orr.w	r2, r2, #8
 8004c66:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	ea42 020b 	orr.w	r2, r2, fp
 8004c6e:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004c70:	9402      	str	r4, [sp, #8]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004c72:	f8cd 800c 	str.w	r8, [sp, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004c76:	f000 fcd0 	bl	800561a <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004c7a:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8004c7e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004c82:	a904      	add	r1, sp, #16
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004c84:	e9cd 0304 	strd	r0, r3, [sp, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004c88:	4628      	mov	r0, r5
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8004c8a:	e9cd 4706 	strd	r4, r7, [sp, #24]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004c8e:	f8cd 8020 	str.w	r8, [sp, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004c92:	f000 fcd7 	bl	8005644 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004c96:	4936      	ldr	r1, [pc, #216]	; (8004d70 <main+0x350>)
 8004c98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c9c:	f7fd f892 	bl	8001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004ca0:	4833      	ldr	r0, [pc, #204]	; (8004d70 <main+0x350>)
 8004ca2:	f7fd f865 	bl	8001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8004ca6:	4933      	ldr	r1, [pc, #204]	; (8004d74 <main+0x354>)
 8004ca8:	f240 2005 	movw	r0, #517	; 0x205
 8004cac:	f7fd f88a 	bl	8001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004cb0:	4830      	ldr	r0, [pc, #192]	; (8004d74 <main+0x354>)
 8004cb2:	f7fd f85d 	bl	8001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8004cb6:	4930      	ldr	r1, [pc, #192]	; (8004d78 <main+0x358>)
 8004cb8:	f240 200a 	movw	r0, #522	; 0x20a
 8004cbc:	f7fd f882 	bl	8001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004cc0:	482d      	ldr	r0, [pc, #180]	; (8004d78 <main+0x358>)
 8004cc2:	f7fd f855 	bl	8001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_4);
 8004cc6:	492d      	ldr	r1, [pc, #180]	; (8004d7c <main+0x35c>)
 8004cc8:	f240 200f 	movw	r0, #527	; 0x20f
 8004ccc:	f7fd f87a 	bl	8001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004cd0:	482a      	ldr	r0, [pc, #168]	; (8004d7c <main+0x35c>)
 8004cd2:	f7fd f84d 	bl	8001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_5);
 8004cd6:	492a      	ldr	r1, [pc, #168]	; (8004d80 <main+0x360>)
 8004cd8:	f44f 7005 	mov.w	r0, #532	; 0x214
 8004cdc:	f7fd f872 	bl	8001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004ce0:	4827      	ldr	r0, [pc, #156]	; (8004d80 <main+0x360>)
 8004ce2:	f7fd f845 	bl	8001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 8004ce6:	4927      	ldr	r1, [pc, #156]	; (8004d84 <main+0x364>)
 8004ce8:	f240 2019 	movw	r0, #537	; 0x219
 8004cec:	f7fd f86a 	bl	8001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004cf0:	4824      	ldr	r0, [pc, #144]	; (8004d84 <main+0x364>)
 8004cf2:	f7fd f83d 	bl	8001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_TEMPSENSOR);
 8004cf6:	4924      	ldr	r1, [pc, #144]	; (8004d88 <main+0x368>)
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	f7fd f863 	bl	8001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004cfe:	4822      	ldr	r0, [pc, #136]	; (8004d88 <main+0x368>)
 8004d00:	f7fd f836 	bl	8001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8004d04:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_VREFINT);
 8004d06:	4921      	ldr	r1, [pc, #132]	; (8004d8c <main+0x36c>)
 8004d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d0c:	60ab      	str	r3, [r5, #8]
 8004d0e:	f240 1005 	movw	r0, #261	; 0x105
 8004d12:	f7fd f857 	bl	8001dc4 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004d16:	481d      	ldr	r0, [pc, #116]	; (8004d8c <main+0x36c>)
 8004d18:	f7fd f82a 	bl	8001d70 <LL_ADC_SetChannelSamplingTime.constprop.0>
 8004d1c:	68ab      	ldr	r3, [r5, #8]
	  delay_ms(100);
 8004d1e:	2064      	movs	r0, #100	; 0x64
 8004d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d24:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004d26:	68ab      	ldr	r3, [r5, #8]
 8004d28:	ea43 030b 	orr.w	r3, r3, fp
 8004d2c:	60ab      	str	r3, [r5, #8]
 8004d2e:	f7fc f97f 	bl	8001030 <delay_ms>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8004d32:	68ab      	ldr	r3, [r5, #8]
 8004d34:	f043 0304 	orr.w	r3, r3, #4
 8004d38:	60ab      	str	r3, [r5, #8]
 8004d3a:	e02d      	b.n	8004d98 <main+0x378>
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	05fa0300 	.word	0x05fa0300
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40010800 	.word	0x40010800
 8004d4c:	04fc00fc 	.word	0x04fc00fc
 8004d50:	04890089 	.word	0x04890089
 8004d54:	e000e100 	.word	0xe000e100
 8004d58:	04020002 	.word	0x04020002
 8004d5c:	04040004 	.word	0x04040004
 8004d60:	40013800 	.word	0x40013800
 8004d64:	40020008 	.word	0x40020008
 8004d68:	4001244c 	.word	0x4001244c
 8004d6c:	2000086a 	.word	0x2000086a
 8004d70:	02300001 	.word	0x02300001
 8004d74:	02600002 	.word	0x02600002
 8004d78:	02900003 	.word	0x02900003
 8004d7c:	02c00004 	.word	0x02c00004
 8004d80:	02f00005 	.word	0x02f00005
 8004d84:	03200006 	.word	0x03200006
 8004d88:	81200010 	.word	0x81200010
 8004d8c:	81500011 	.word	0x81500011
 8004d90:	e000ed00 	.word	0xe000ed00
 8004d94:	40010c00 	.word	0x40010c00
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8004d98:	68ac      	ldr	r4, [r5, #8]
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8004d9a:	f014 0404 	ands.w	r4, r4, #4
 8004d9e:	d1fb      	bne.n	8004d98 <main+0x378>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004da0:	68ab      	ldr	r3, [r5, #8]
 8004da2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8004da6:	60ab      	str	r3, [r5, #8]
  InitLCD();
 8004da8:	f7fc fe8f 	bl	8001aca <InitLCD>
  SystemCoreClockUpdate();
 8004dac:	f000 fa82 	bl	80052b4 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8004db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004db4:	4baf      	ldr	r3, [pc, #700]	; (8005074 <main+0x654>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dc2:	d208      	bcs.n	8004dd6 <main+0x3b6>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dc6:	4aac      	ldr	r2, [pc, #688]	; (8005078 <main+0x658>)
 8004dc8:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dca:	4bac      	ldr	r3, [pc, #688]	; (800507c <main+0x65c>)
 8004dcc:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dd0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dd2:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dd4:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	LoggingData.RecordsQuantity= 0;
 8004dda:	2400      	movs	r4, #0
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004ddc:	6133      	str	r3, [r6, #16]
	LoggingData.RecordsQuantity= 0;
 8004dde:	4da8      	ldr	r5, [pc, #672]	; (8005080 <main+0x660>)
	OFF();
 8004de0:	f7fe fb24 	bl	800342c <OFF>
	PrintToLCD(Version);
 8004de4:	48a7      	ldr	r0, [pc, #668]	; (8005084 <main+0x664>)
	LoggingData.RecordsQuantity= 0;
 8004de6:	602c      	str	r4, [r5, #0]
	PrintToLCD(Version);
 8004de8:	f7fc fe60 	bl	8001aac <PrintToLCD>
	InfoToUARTBeforeStart();
 8004dec:	f7fc f930 	bl	8001050 <InfoToUARTBeforeStart>
	logInfo(Version);
 8004df0:	48a5      	ldr	r0, [pc, #660]	; (8005088 <main+0x668>)
 8004df2:	f000 faf5 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004df6:	48a3      	ldr	r0, [pc, #652]	; (8005084 <main+0x664>)
 8004df8:	f000 fa8c 	bl	8005314 <printToBufferUART1>
	SetSymbols();
 8004dfc:	f7fc fd7e 	bl	80018fc <SetSymbols>
	lcd_set_xy(0,0);
 8004e00:	4621      	mov	r1, r4
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7fc fdd2 	bl	80019ac <lcd_set_xy>
	delay_ms(1000);
 8004e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e0c:	f7fc f910 	bl	8001030 <delay_ms>
	flash_read_block();
 8004e10:	f7fb fa8a 	bl	8000328 <flash_read_block>
	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	2b17      	cmp	r3, #23
 8004e18:	bf88      	it	hi
 8004e1a:	602c      	strhi	r4, [r5, #0]
	EEpromReadStatus = ReadFromFlash();
 8004e1c:	f7fb fd5e 	bl	80008dc <ReadFromFlash>
	if (EEpromReadStatus==0)
 8004e20:	4604      	mov	r4, r0
 8004e22:	b968      	cbnz	r0, 8004e40 <main+0x420>
		delay_ms(1000);
 8004e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e28:	f7fc f902 	bl	8001030 <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8004e2c:	f7fb fd56 	bl	80008dc <ReadFromFlash>
 8004e30:	4604      	mov	r4, r0
		logInfo("Read from EEprom - FAIL");
 8004e32:	4895      	ldr	r0, [pc, #596]	; (8005088 <main+0x668>)
 8004e34:	f000 fad4 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004e38:	4894      	ldr	r0, [pc, #592]	; (800508c <main+0x66c>)
 8004e3a:	f000 fa6b 	bl	8005314 <printToBufferUART1>
	if (EEpromReadStatus == 0)
 8004e3e:	b134      	cbz	r4, 8004e4e <main+0x42e>
	if (EEpromReadStatus == 1)
 8004e40:	2c01      	cmp	r4, #1
 8004e42:	d114      	bne.n	8004e6e <main+0x44e>
		logInfo("Read from EEprom - SUCCESS");
 8004e44:	4890      	ldr	r0, [pc, #576]	; (8005088 <main+0x668>)
 8004e46:	f000 facb 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004e4a:	4891      	ldr	r0, [pc, #580]	; (8005090 <main+0x670>)
 8004e4c:	e00d      	b.n	8004e6a <main+0x44a>
		PrintToLCD("EEprom Read FAIL");
 8004e4e:	4891      	ldr	r0, [pc, #580]	; (8005094 <main+0x674>)
 8004e50:	f7fc fe2c 	bl	8001aac <PrintToLCD>
		delay_ms(4000);
 8004e54:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004e58:	f7fc f8ea 	bl	8001030 <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 8004e5c:	488e      	ldr	r0, [pc, #568]	; (8005098 <main+0x678>)
 8004e5e:	f7fb ff21 	bl	8000ca4 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8004e62:	4889      	ldr	r0, [pc, #548]	; (8005088 <main+0x668>)
 8004e64:	f000 fabc 	bl	80053e0 <printToBufferWithoutEndUART1>
 8004e68:	4888      	ldr	r0, [pc, #544]	; (800508c <main+0x66c>)
		logInfo("Read from EEprom - SUCCESS");
 8004e6a:	f000 fa53 	bl	8005314 <printToBufferUART1>
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.CurrentConsumption1s;
 8004e6e:	4b8b      	ldr	r3, [pc, #556]	; (800509c <main+0x67c>)
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004e70:	4c8b      	ldr	r4, [pc, #556]	; (80050a0 <main+0x680>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.CurrentConsumption1s;
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	4b8b      	ldr	r3, [pc, #556]	; (80050a4 <main+0x684>)
 8004e76:	601a      	str	r2, [r3, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004e78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004e7c:	6922      	ldr	r2, [r4, #16]
 8004e7e:	4353      	muls	r3, r2
 8004e80:	4a89      	ldr	r2, [pc, #548]	; (80050a8 <main+0x688>)
 8004e82:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8004e84:	68a2      	ldr	r2, [r4, #8]
 8004e86:	4b89      	ldr	r3, [pc, #548]	; (80050ac <main+0x68c>)
 8004e88:	601a      	str	r2, [r3, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e8c:	4a88      	ldr	r2, [pc, #544]	; (80050b0 <main+0x690>)
 8004e8e:	6013      	str	r3, [r2, #0]
  OutStateAfterPowerUp = SettingsData.Option2;
 8004e90:	4a88      	ldr	r2, [pc, #544]	; (80050b4 <main+0x694>)
 8004e92:	6013      	str	r3, [r2, #0]
  Generation_Coefficients_R_A_B();
 8004e94:	f7fb feaa 	bl	8000bec <Generation_Coefficients_R_A_B>
  delay_ms(1000);
 8004e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e9c:	f7fc f8c8 	bl	8001030 <delay_ms>
  lcd_clear();
 8004ea0:	f7fc fdf2 	bl	8001a88 <lcd_clear>
	Menu_SetGenericWriteCallback(Generic_Write);
 8004ea4:	4884      	ldr	r0, [pc, #528]	; (80050b8 <main+0x698>)
 8004ea6:	f7fc fc75 	bl	8001794 <Menu_SetGenericWriteCallback>
	if (SettingsData.Option1 == 1)
 8004eaa:	68a3      	ldr	r3, [r4, #8]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d112      	bne.n	8004ed6 <main+0x4b6>
		Menu_Navigate(&Menu_2_1);
 8004eb0:	4882      	ldr	r0, [pc, #520]	; (80050bc <main+0x69c>)
		Menu_Navigate(&Menu_3_1);
 8004eb2:	f7fc fc55 	bl	8001760 <Menu_Navigate>
  	Blink_message_counter++;
 8004eb6:	4d82      	ldr	r5, [pc, #520]	; (80050c0 <main+0x6a0>)
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004eb8:	4f80      	ldr	r7, [pc, #512]	; (80050bc <main+0x69c>)
 8004eba:	4e82      	ldr	r6, [pc, #520]	; (80050c4 <main+0x6a4>)
  	Blink_message_counter++;
 8004ebc:	782b      	ldrb	r3, [r5, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	702b      	strb	r3, [r5, #0]
  	Button=BUT_GetKey();
 8004ec2:	f7fd faeb 	bl	800249c <BUT_GetKey>
 8004ec6:	1e43      	subs	r3, r0, #1
 8004ec8:	4604      	mov	r4, r0
	switch (Button)
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d820      	bhi.n	8004f10 <main+0x4f0>
 8004ece:	e8df f003 	tbb	[pc, r3]
 8004ed2:	3a1a      	.short	0x3a1a
 8004ed4:	453e      	.short	0x453e
	else if (SettingsData.Option1 == 2)
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d101      	bne.n	8004ede <main+0x4be>
		Menu_Navigate(&Menu_3_1);
 8004eda:	487b      	ldr	r0, [pc, #492]	; (80050c8 <main+0x6a8>)
 8004edc:	e7e9      	b.n	8004eb2 <main+0x492>
	else if (SettingsData.Option1 == 3)
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d101      	bne.n	8004ee6 <main+0x4c6>
		Menu_Navigate(&Menu_4_1);
 8004ee2:	487a      	ldr	r0, [pc, #488]	; (80050cc <main+0x6ac>)
 8004ee4:	e7e5      	b.n	8004eb2 <main+0x492>
	else if (SettingsData.Option1 == 4)
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d101      	bne.n	8004eee <main+0x4ce>
		Menu_Navigate(&Menu_5_1);
 8004eea:	4879      	ldr	r0, [pc, #484]	; (80050d0 <main+0x6b0>)
 8004eec:	e7e1      	b.n	8004eb2 <main+0x492>
	else if (SettingsData.Option1 == 5)
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d101      	bne.n	8004ef6 <main+0x4d6>
		Menu_Navigate(&Menu_6_1);
 8004ef2:	4878      	ldr	r0, [pc, #480]	; (80050d4 <main+0x6b4>)
 8004ef4:	e7dd      	b.n	8004eb2 <main+0x492>
	else if (SettingsData.Option1 == 6)
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d101      	bne.n	8004efe <main+0x4de>
		Menu_Navigate(&Menu_7_1);
 8004efa:	4877      	ldr	r0, [pc, #476]	; (80050d8 <main+0x6b8>)
 8004efc:	e7d9      	b.n	8004eb2 <main+0x492>
	else if (SettingsData.Option1 == 7)
 8004efe:	2b07      	cmp	r3, #7
 8004f00:	d1d6      	bne.n	8004eb0 <main+0x490>
		Menu_Navigate(&Menu_8_1);
 8004f02:	4876      	ldr	r0, [pc, #472]	; (80050dc <main+0x6bc>)
 8004f04:	e7d5      	b.n	8004eb2 <main+0x492>
			Menu_Navigate(MENU_PREVIOUS);
 8004f06:	f7fc fc25 	bl	8001754 <Menu_GetCurrentMenu>
 8004f0a:	6840      	ldr	r0, [r0, #4]
			Menu_Navigate(MENU_PARENT);
 8004f0c:	f7fc fc28 	bl	8001760 <Menu_Navigate>
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004f10:	f7fc fc20 	bl	8001754 <Menu_GetCurrentMenu>
 8004f14:	4287      	cmp	r7, r0
 8004f16:	d125      	bne.n	8004f64 <main+0x544>
		MenuPowerSupply(Button);
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7fd fb59 	bl	80025d0 <MenuPowerSupply>
	if (EnterInMenu_Status == 0)
 8004f1e:	7833      	ldrb	r3, [r6, #0]
 8004f20:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004f24:	b95b      	cbnz	r3, 8004f3e <main+0x51e>
		OFF();
 8004f26:	f7fe fa81 	bl	800342c <OFF>
		InitiStatus = 0;
 8004f2a:	4b6d      	ldr	r3, [pc, #436]	; (80050e0 <main+0x6c0>)
 8004f2c:	7019      	strb	r1, [r3, #0]
		CountShow = 0;
 8004f2e:	4b6d      	ldr	r3, [pc, #436]	; (80050e4 <main+0x6c4>)
 8004f30:	7019      	strb	r1, [r3, #0]
		CurrentConsumption1s = 0;
 8004f32:	4b6d      	ldr	r3, [pc, #436]	; (80050e8 <main+0x6c8>)
 8004f34:	6019      	str	r1, [r3, #0]
		CurrentCapacity5ms = 0;
 8004f36:	4b6d      	ldr	r3, [pc, #436]	; (80050ec <main+0x6cc>)
 8004f38:	6019      	str	r1, [r3, #0]
		DischargeTimeSec = 0;
 8004f3a:	4b6d      	ldr	r3, [pc, #436]	; (80050f0 <main+0x6d0>)
 8004f3c:	6019      	str	r1, [r3, #0]
	delay_ms(100);
 8004f3e:	2064      	movs	r0, #100	; 0x64
 8004f40:	f7fc f876 	bl	8001030 <delay_ms>
  {
 8004f44:	e7ba      	b.n	8004ebc <main+0x49c>
			Menu_Navigate(MENU_NEXT);
 8004f46:	f7fc fc05 	bl	8001754 <Menu_GetCurrentMenu>
 8004f4a:	6800      	ldr	r0, [r0, #0]
 8004f4c:	e7de      	b.n	8004f0c <main+0x4ec>
			Menu_SelectItem(KEY_NEXT);
 8004f4e:	2002      	movs	r0, #2
 8004f50:	f7fc fc2a 	bl	80017a8 <Menu_SelectItem>
			Menu_Navigate(MENU_CHILD);
 8004f54:	f7fc fbfe 	bl	8001754 <Menu_GetCurrentMenu>
 8004f58:	68c0      	ldr	r0, [r0, #12]
 8004f5a:	e7d7      	b.n	8004f0c <main+0x4ec>
			Menu_Navigate(MENU_PARENT);
 8004f5c:	f7fc fbfa 	bl	8001754 <Menu_GetCurrentMenu>
 8004f60:	6880      	ldr	r0, [r0, #8]
 8004f62:	e7d3      	b.n	8004f0c <main+0x4ec>
	else if (Menu_GetCurrentMenu() == &Menu_3_1)
 8004f64:	f7fc fbf6 	bl	8001754 <Menu_GetCurrentMenu>
 8004f68:	4b57      	ldr	r3, [pc, #348]	; (80050c8 <main+0x6a8>)
 8004f6a:	4283      	cmp	r3, r0
 8004f6c:	d103      	bne.n	8004f76 <main+0x556>
		MenuLoad(Button);
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f7fd fe26 	bl	8002bc0 <MenuLoad>
 8004f74:	e7d3      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_4_1)
 8004f76:	f7fc fbed 	bl	8001754 <Menu_GetCurrentMenu>
 8004f7a:	4b54      	ldr	r3, [pc, #336]	; (80050cc <main+0x6ac>)
 8004f7c:	4283      	cmp	r3, r0
 8004f7e:	d103      	bne.n	8004f88 <main+0x568>
		MenuChargeCC_CV(Button);
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7fe fa5b 	bl	800343c <MenuChargeCC_CV>
 8004f86:	e7ca      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_5_1)
 8004f88:	f7fc fbe4 	bl	8001754 <Menu_GetCurrentMenu>
 8004f8c:	4b50      	ldr	r3, [pc, #320]	; (80050d0 <main+0x6b0>)
 8004f8e:	4283      	cmp	r3, r0
 8004f90:	d103      	bne.n	8004f9a <main+0x57a>
		MenuChargeAdapt(Button);
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7fe fbc6 	bl	8003724 <MenuChargeAdapt>
 8004f98:	e7c1      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_6_1)
 8004f9a:	f7fc fbdb 	bl	8001754 <Menu_GetCurrentMenu>
 8004f9e:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <main+0x6b4>)
 8004fa0:	4283      	cmp	r3, r0
 8004fa2:	d103      	bne.n	8004fac <main+0x58c>
		MenuDisCharge(Button);
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7fe fd79 	bl	8003a9c <MenuDisCharge>
 8004faa:	e7b8      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_6_1a)
 8004fac:	f7fc fbd2 	bl	8001754 <Menu_GetCurrentMenu>
 8004fb0:	4b50      	ldr	r3, [pc, #320]	; (80050f4 <main+0x6d4>)
 8004fb2:	4283      	cmp	r3, r0
 8004fb4:	d103      	bne.n	8004fbe <main+0x59e>
		MenuCheckingCapacity(Button);
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f7fe feca 	bl	8003d50 <MenuCheckingCapacity>
 8004fbc:	e7af      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_7_1)
 8004fbe:	f7fc fbc9 	bl	8001754 <Menu_GetCurrentMenu>
 8004fc2:	4b45      	ldr	r3, [pc, #276]	; (80050d8 <main+0x6b8>)
 8004fc4:	4283      	cmp	r3, r0
 8004fc6:	d103      	bne.n	8004fd0 <main+0x5b0>
		MenuTraining_new(Button);
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7fd fee5 	bl	8002d98 <MenuTraining_new>
 8004fce:	e7a6      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_8_1)
 8004fd0:	f7fc fbc0 	bl	8001754 <Menu_GetCurrentMenu>
 8004fd4:	4b41      	ldr	r3, [pc, #260]	; (80050dc <main+0x6bc>)
 8004fd6:	4283      	cmp	r3, r0
 8004fd8:	d103      	bne.n	8004fe2 <main+0x5c2>
		MenuSwing(Button);
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7fe f92c 	bl	8003238 <MenuSwing>
 8004fe0:	e79d      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_8a_1)
 8004fe2:	f7fc fbb7 	bl	8001754 <Menu_GetCurrentMenu>
 8004fe6:	4b44      	ldr	r3, [pc, #272]	; (80050f8 <main+0x6d8>)
 8004fe8:	4283      	cmp	r3, r0
 8004fea:	d103      	bne.n	8004ff4 <main+0x5d4>
		MenuBatterySimilation(Button);
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7fd fe3d 	bl	8002c6c <MenuBatterySimilation>
 8004ff2:	e794      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_9_1)
 8004ff4:	f7fc fbae 	bl	8001754 <Menu_GetCurrentMenu>
 8004ff8:	4b40      	ldr	r3, [pc, #256]	; (80050fc <main+0x6dc>)
 8004ffa:	4283      	cmp	r3, r0
 8004ffc:	d103      	bne.n	8005006 <main+0x5e6>
		MenuDIAGNOSTIC(Button);
 8004ffe:	4620      	mov	r0, r4
 8005000:	f7ff f9a2 	bl	8004348 <MenuDIAGNOSTIC>
 8005004:	e78b      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_11_1)
 8005006:	f7fc fba5 	bl	8001754 <Menu_GetCurrentMenu>
 800500a:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <main+0x6e0>)
 800500c:	4283      	cmp	r3, r0
 800500e:	d103      	bne.n	8005018 <main+0x5f8>
		MenuLog(Button);
 8005010:	4620      	mov	r0, r4
 8005012:	f7fc ff1b 	bl	8001e4c <MenuLog>
 8005016:	e782      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_10_2_1)
 8005018:	f7fc fb9c 	bl	8001754 <Menu_GetCurrentMenu>
 800501c:	4b39      	ldr	r3, [pc, #228]	; (8005104 <main+0x6e4>)
 800501e:	4283      	cmp	r3, r0
 8005020:	d103      	bne.n	800502a <main+0x60a>
		MenuCalibration_CURRENT_Load_to_0(Button);
 8005022:	4620      	mov	r0, r4
 8005024:	f7fc ff80 	bl	8001f28 <MenuCalibration_CURRENT_Load_to_0>
 8005028:	e779      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_10_1_1)
 800502a:	f7fc fb93 	bl	8001754 <Menu_GetCurrentMenu>
 800502e:	4b36      	ldr	r3, [pc, #216]	; (8005108 <main+0x6e8>)
 8005030:	4283      	cmp	r3, r0
 8005032:	d103      	bne.n	800503c <main+0x61c>
		MenuCalibration_CURRENT_Out_to_0(Button);
 8005034:	4620      	mov	r0, r4
 8005036:	f7fc ff53 	bl	8001ee0 <MenuCalibration_CURRENT_Out_to_0>
 800503a:	e770      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_10_4_1)
 800503c:	f7fc fb8a 	bl	8001754 <Menu_GetCurrentMenu>
 8005040:	4b32      	ldr	r3, [pc, #200]	; (800510c <main+0x6ec>)
 8005042:	4283      	cmp	r3, r0
 8005044:	d103      	bne.n	800504e <main+0x62e>
		MenuCalibration_CURRENT_Load(Button);
 8005046:	4620      	mov	r0, r4
 8005048:	f7fd fd56 	bl	8002af8 <MenuCalibration_CURRENT_Load>
 800504c:	e767      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_10_3_1)
 800504e:	f7fc fb81 	bl	8001754 <Menu_GetCurrentMenu>
 8005052:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <main+0x6f0>)
 8005054:	4283      	cmp	r3, r0
 8005056:	d103      	bne.n	8005060 <main+0x640>
		MenuCalibration_CURRENT_Out(Button);
 8005058:	4620      	mov	r0, r4
 800505a:	f7fd fbf5 	bl	8002848 <MenuCalibration_CURRENT_Out>
 800505e:	e75e      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_10_7_1)
 8005060:	f7fc fb78 	bl	8001754 <Menu_GetCurrentMenu>
 8005064:	4b2b      	ldr	r3, [pc, #172]	; (8005114 <main+0x6f4>)
 8005066:	4283      	cmp	r3, r0
 8005068:	d156      	bne.n	8005118 <main+0x6f8>
		MenuCalibration_VoltageIn(Button);
 800506a:	4620      	mov	r0, r4
 800506c:	f7fd fc92 	bl	8002994 <MenuCalibration_VoltageIn>
 8005070:	e755      	b.n	8004f1e <main+0x4fe>
 8005072:	bf00      	nop
 8005074:	2000028c 	.word	0x2000028c
 8005078:	e000e010 	.word	0xe000e010
 800507c:	e000ed00 	.word	0xe000ed00
 8005080:	20000888 	.word	0x20000888
 8005084:	2000027a 	.word	0x2000027a
 8005088:	08005dda 	.word	0x08005dda
 800508c:	08006476 	.word	0x08006476
 8005090:	08005c84 	.word	0x08005c84
 8005094:	0800648e 	.word	0x0800648e
 8005098:	0800649f 	.word	0x0800649f
 800509c:	200000f4 	.word	0x200000f4
 80050a0:	20000154 	.word	0x20000154
 80050a4:	20000790 	.word	0x20000790
 80050a8:	20000a28 	.word	0x20000a28
 80050ac:	20000a2c 	.word	0x20000a2c
 80050b0:	20000a24 	.word	0x20000a24
 80050b4:	20000274 	.word	0x20000274
 80050b8:	08001c91 	.word	0x08001c91
 80050bc:	08006be4 	.word	0x08006be4
 80050c0:	20000795 	.word	0x20000795
 80050c4:	200007b0 	.word	0x200007b0
 80050c8:	08006c3c 	.word	0x08006c3c
 80050cc:	08006c94 	.word	0x08006c94
 80050d0:	08006cec 	.word	0x08006cec
 80050d4:	08006d44 	.word	0x08006d44
 80050d8:	08006df4 	.word	0x08006df4
 80050dc:	08006e4c 	.word	0x08006e4c
 80050e0:	200007b1 	.word	0x200007b1
 80050e4:	2000079d 	.word	0x2000079d
 80050e8:	200007a0 	.word	0x200007a0
 80050ec:	200002b8 	.word	0x200002b8
 80050f0:	200007a8 	.word	0x200007a8
 80050f4:	08006d70 	.word	0x08006d70
 80050f8:	08006ea4 	.word	0x08006ea4
 80050fc:	08006efc 	.word	0x08006efc
 8005100:	08006848 	.word	0x08006848
 8005104:	080065b8 	.word	0x080065b8
 8005108:	08006560 	.word	0x08006560
 800510c:	08006668 	.word	0x08006668
 8005110:	08006610 	.word	0x08006610
 8005114:	08006770 	.word	0x08006770
	else if (Menu_GetCurrentMenu() == &Menu_10_6_1)
 8005118:	f7fc fb1c 	bl	8001754 <Menu_GetCurrentMenu>
 800511c:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <main+0x7e8>)
 800511e:	4283      	cmp	r3, r0
 8005120:	d103      	bne.n	800512a <main+0x70a>
		MenuCalibration_VoltageOut(Button);
 8005122:	4620      	mov	r0, r4
 8005124:	f7fd fbfe 	bl	8002924 <MenuCalibration_VoltageOut>
 8005128:	e6f9      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_10_5_1)
 800512a:	f7fc fb13 	bl	8001754 <Menu_GetCurrentMenu>
 800512e:	4b37      	ldr	r3, [pc, #220]	; (800520c <main+0x7ec>)
 8005130:	4283      	cmp	r3, r0
 8005132:	d103      	bne.n	800513c <main+0x71c>
		MenuCalibration_VoltagePS(Button);
 8005134:	4620      	mov	r0, r4
 8005136:	f7fd fbbd 	bl	80028b4 <MenuCalibration_VoltagePS>
 800513a:	e6f0      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_10_8_1)
 800513c:	f7fc fb0a 	bl	8001754 <Menu_GetCurrentMenu>
 8005140:	4b33      	ldr	r3, [pc, #204]	; (8005210 <main+0x7f0>)
 8005142:	4283      	cmp	r3, r0
 8005144:	d103      	bne.n	800514e <main+0x72e>
		MenuCalibration_Resist_Comp_5V1A(Button);
 8005146:	4620      	mov	r0, r4
 8005148:	f7fd fc5c 	bl	8002a04 <MenuCalibration_Resist_Comp_5V1A>
 800514c:	e6e7      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_10_9_1)
 800514e:	f7fc fb01 	bl	8001754 <Menu_GetCurrentMenu>
 8005152:	4b30      	ldr	r3, [pc, #192]	; (8005214 <main+0x7f4>)
 8005154:	4283      	cmp	r3, r0
 8005156:	d103      	bne.n	8005160 <main+0x740>
		MenuCalibration_BackToFactory(Button);
 8005158:	4620      	mov	r0, r4
 800515a:	f7fc ff09 	bl	8001f70 <MenuCalibration_BackToFactory>
 800515e:	e6de      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1)
 8005160:	f7fc faf8 	bl	8001754 <Menu_GetCurrentMenu>
 8005164:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <main+0x7f8>)
 8005166:	4283      	cmp	r3, r0
 8005168:	d103      	bne.n	8005172 <main+0x752>
		MenuSettingsChargeTime(Button);
 800516a:	4620      	mov	r0, r4
 800516c:	f7fc ff5c 	bl	8002028 <MenuSettingsChargeTime>
 8005170:	e6d5      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1a)
 8005172:	f7fc faef 	bl	8001754 <Menu_GetCurrentMenu>
 8005176:	4b29      	ldr	r3, [pc, #164]	; (800521c <main+0x7fc>)
 8005178:	4283      	cmp	r3, r0
 800517a:	d103      	bne.n	8005184 <main+0x764>
		MenuSettingsBatteryType(Button);
 800517c:	4620      	mov	r0, r4
 800517e:	f7fc ff79 	bl	8002074 <MenuSettingsBatteryType>
 8005182:	e6cc      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_2_1)
 8005184:	f7fc fae6 	bl	8001754 <Menu_GetCurrentMenu>
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <main+0x800>)
 800518a:	4283      	cmp	r3, r0
 800518c:	d103      	bne.n	8005196 <main+0x776>
		MenuSettingsLowVolt(Button);
 800518e:	4620      	mov	r0, r4
 8005190:	f7fc ffe8 	bl	8002164 <MenuSettingsLowVolt>
 8005194:	e6c3      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_3_1)
 8005196:	f7fc fadd 	bl	8001754 <Menu_GetCurrentMenu>
 800519a:	4b22      	ldr	r3, [pc, #136]	; (8005224 <main+0x804>)
 800519c:	4283      	cmp	r3, r0
 800519e:	d103      	bne.n	80051a8 <main+0x788>
		MenuSettingsMaxVolt(Button);
 80051a0:	4620      	mov	r0, r4
 80051a2:	f7fd f801 	bl	80021a8 <MenuSettingsMaxVolt>
 80051a6:	e6ba      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_4_1)
 80051a8:	f7fc fad4 	bl	8001754 <Menu_GetCurrentMenu>
 80051ac:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <main+0x808>)
 80051ae:	4283      	cmp	r3, r0
 80051b0:	d103      	bne.n	80051ba <main+0x79a>
		MenuSettingsSwngChrgTime(Button);
 80051b2:	4620      	mov	r0, r4
 80051b4:	f7fd f81a 	bl	80021ec <MenuSettingsSwngChrgTime>
 80051b8:	e6b1      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_5_1)
 80051ba:	f7fc facb 	bl	8001754 <Menu_GetCurrentMenu>
 80051be:	4b1b      	ldr	r3, [pc, #108]	; (800522c <main+0x80c>)
 80051c0:	4283      	cmp	r3, r0
 80051c2:	d103      	bne.n	80051cc <main+0x7ac>
		MenuSettingsSwngDChrgTime(Button);
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7fd f82f 	bl	8002228 <MenuSettingsSwngDChrgTime>
 80051ca:	e6a8      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_6_1)
 80051cc:	f7fc fac2 	bl	8001754 <Menu_GetCurrentMenu>
 80051d0:	4b17      	ldr	r3, [pc, #92]	; (8005230 <main+0x810>)
 80051d2:	4283      	cmp	r3, r0
 80051d4:	d103      	bne.n	80051de <main+0x7be>
		MenuSettingsChargeAddapt(Button);
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7fd f844 	bl	8002264 <MenuSettingsChargeAddapt>
 80051dc:	e69f      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_S_1)
 80051de:	f7fc fab9 	bl	8001754 <Menu_GetCurrentMenu>
 80051e2:	4b14      	ldr	r3, [pc, #80]	; (8005234 <main+0x814>)
 80051e4:	4283      	cmp	r3, r0
 80051e6:	d103      	bne.n	80051f0 <main+0x7d0>
		MenuSettingsSaveMenuPosWhenOFF(Button);
 80051e8:	4620      	mov	r0, r4
 80051ea:	f7fd f897 	bl	800231c <MenuSettingsSaveMenuPosWhenOFF>
 80051ee:	e696      	b.n	8004f1e <main+0x4fe>
	else if (Menu_GetCurrentMenu() == &Menu_1_SO_1)
 80051f0:	f7fc fab0 	bl	8001754 <Menu_GetCurrentMenu>
 80051f4:	4b10      	ldr	r3, [pc, #64]	; (8005238 <main+0x818>)
 80051f6:	4283      	cmp	r3, r0
 80051f8:	d103      	bne.n	8005202 <main+0x7e2>
		MenuSettingsOutAfterPowerUp(Button);
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7fd f8e4 	bl	80023c8 <MenuSettingsOutAfterPowerUp>
 8005200:	e68d      	b.n	8004f1e <main+0x4fe>
	else EnterInMenu_Status = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	7033      	strb	r3, [r6, #0]
 8005206:	e68a      	b.n	8004f1e <main+0x4fe>
 8005208:	08006718 	.word	0x08006718
 800520c:	080066c0 	.word	0x080066c0
 8005210:	080067b8 	.word	0x080067b8
 8005214:	08006800 	.word	0x08006800
 8005218:	080068a0 	.word	0x080068a0
 800521c:	080068cc 	.word	0x080068cc
 8005220:	08006950 	.word	0x08006950
 8005224:	080069a8 	.word	0x080069a8
 8005228:	08006a00 	.word	0x08006a00
 800522c:	08006a58 	.word	0x08006a58
 8005230:	08006ab0 	.word	0x08006ab0
 8005234:	08006b8c 	.word	0x08006b8c
 8005238:	08006b60 	.word	0x08006b60

0800523c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800523c:	4770      	bx	lr

0800523e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800523e:	e7fe      	b.n	800523e <HardFault_Handler>

08005240 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005240:	e7fe      	b.n	8005240 <MemManage_Handler>

08005242 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005242:	e7fe      	b.n	8005242 <BusFault_Handler>

08005244 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005244:	e7fe      	b.n	8005244 <UsageFault_Handler>

08005246 <SVC_Handler>:
 8005246:	4770      	bx	lr

08005248 <DebugMon_Handler>:
 8005248:	4770      	bx	lr

0800524a <PendSV_Handler>:
 800524a:	4770      	bx	lr

0800524c <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Delay_us(990);
	SysTick_Callback();
 800524c:	f7ff bb34 	b.w	80048b8 <SysTick_Callback>

08005250 <DMA1_Channel1_IRQHandler>:
 8005250:	4770      	bx	lr
	...

08005254 <USART1_IRQHandler>:
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 8005254:	4914      	ldr	r1, [pc, #80]	; (80052a8 <USART1_IRQHandler+0x54>)
 8005256:	680b      	ldr	r3, [r1, #0]
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	d524      	bpl.n	80052a6 <USART1_IRQHandler+0x52>
	{
		if (bufferUart1.tx_counter > 0) //если есть что передать
 800525c:	4b13      	ldr	r3, [pc, #76]	; (80052ac <USART1_IRQHandler+0x58>)
 800525e:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005262:	b292      	uxth	r2, r2
 8005264:	b1da      	cbz	r2, 800529e <USART1_IRQHandler+0x4a>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количество не переданных данных
 8005266:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800526a:	3a01      	subs	r2, #1
 800526c:	b292      	uxth	r2, r2
 800526e:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементируя хвост буфера
 8005272:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 8005276:	b292      	uxth	r2, r2
 8005278:	1c50      	adds	r0, r2, #1
 800527a:	b280      	uxth	r0, r0
 800527c:	f8a3 0456 	strh.w	r0, [r3, #1110]	; 0x456
 8005280:	441a      	add	r2, r3
 8005282:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	604a      	str	r2, [r1, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 800528a:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 800528e:	b292      	uxth	r2, r2
 8005290:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005294:	d107      	bne.n	80052a6 <USART1_IRQHandler+0x52>
 8005296:	2200      	movs	r2, #0
 8005298:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
 800529c:	4770      	bx	lr
	    }
	    else //если нечего передать, запрещаем прерывание по передачи
	    {
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800529e:	68cb      	ldr	r3, [r1, #12]
 80052a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a4:	60cb      	str	r3, [r1, #12]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052a6:	4770      	bx	lr
 80052a8:	40013800 	.word	0x40013800
 80052ac:	200002c2 	.word	0x200002c2

080052b0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052b0:	4770      	bx	lr
	...

080052b4 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80052b4:	4a12      	ldr	r2, [pc, #72]	; (8005300 <SystemCoreClockUpdate+0x4c>)
{
 80052b6:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80052b8:	6853      	ldr	r3, [r2, #4]
  
  switch (tmp)
 80052ba:	4912      	ldr	r1, [pc, #72]	; (8005304 <SystemCoreClockUpdate+0x50>)
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80052bc:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d00a      	beq.n	80052da <SystemCoreClockUpdate+0x26>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80052c4:	4b10      	ldr	r3, [pc, #64]	; (8005308 <SystemCoreClockUpdate+0x54>)
      else
      {
 #if defined(STM32F100xB) || defined(STM32F100xE)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80052c6:	600b      	str	r3, [r1, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80052c8:	6853      	ldr	r3, [r2, #4]
 80052ca:	4a10      	ldr	r2, [pc, #64]	; (800530c <SystemCoreClockUpdate+0x58>)
 80052cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80052d0:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80052d2:	680b      	ldr	r3, [r1, #0]
 80052d4:	40d3      	lsrs	r3, r2
 80052d6:	600b      	str	r3, [r1, #0]
}
 80052d8:	bd10      	pop	{r4, pc}
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80052da:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80052dc:	6850      	ldr	r0, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 80052de:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00U)
 80052e2:	03c0      	lsls	r0, r0, #15
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 80052e4:	bf41      	itttt	mi
 80052e6:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80052e8:	4c07      	ldrmi	r4, [pc, #28]	; (8005308 <SystemCoreClockUpdate+0x54>)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 80052ea:	f000 000f 	andmi.w	r0, r0, #15
 80052ee:	3001      	addmi	r0, #1
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80052f0:	bf4c      	ite	mi
 80052f2:	fbb4 f0f0 	udivmi	r0, r4, r0
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80052f6:	4806      	ldrpl	r0, [pc, #24]	; (8005310 <SystemCoreClockUpdate+0x5c>)
      pllmull = ( pllmull >> 18U) + 2U;
 80052f8:	3302      	adds	r3, #2
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80052fa:	4343      	muls	r3, r0
 80052fc:	e7e3      	b.n	80052c6 <SystemCoreClockUpdate+0x12>
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000
 8005304:	2000028c 	.word	0x2000028c
 8005308:	007a1200 	.word	0x007a1200
 800530c:	08006f25 	.word	0x08006f25
 8005310:	003d0900 	.word	0x003d0900

08005314 <printToBufferUART1>:
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005314:	2100      	movs	r1, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005316:	4a30      	ldr	r2, [pc, #192]	; (80053d8 <printToBufferUART1+0xc4>)
{
 8005318:	b510      	push	{r4, lr}
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800531a:	68d3      	ldr	r3, [r2, #12]
 800531c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005320:	60d3      	str	r3, [r2, #12]
	while (*str != 0)
 8005322:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <printToBufferUART1+0xc8>)
 8005324:	7802      	ldrb	r2, [r0, #0]
 8005326:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800532a:	bb5a      	cbnz	r2, 8005384 <printToBufferUART1+0x70>
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 800532c:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005330:	b292      	uxth	r2, r2
 8005332:	1c51      	adds	r1, r2, #1
 8005334:	b289      	uxth	r1, r1
 8005336:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 800533a:	210a      	movs	r1, #10
 800533c:	441a      	add	r2, r3
 800533e:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005342:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005346:	b292      	uxth	r2, r2
 8005348:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800534c:	bf08      	it	eq
 800534e:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005352:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005356:	3201      	adds	r2, #1
 8005358:	b292      	uxth	r2, r2
 800535a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800535e:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 8005362:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005366:	b289      	uxth	r1, r1
 8005368:	b292      	uxth	r2, r2
 800536a:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800536c:	bf3e      	ittt	cc
 800536e:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005372:	b292      	uxthcc	r2, r2
 8005374:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8005378:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <printToBufferUART1+0xc4>)
 800537a:	68d3      	ldr	r3, [r2, #12]
 800537c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005380:	60d3      	str	r3, [r2, #12]
}
 8005382:	bd10      	pop	{r4, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005384:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005388:	b292      	uxth	r2, r2
 800538a:	1c54      	adds	r4, r2, #1
 800538c:	b2a4      	uxth	r4, r4
 800538e:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 8005392:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005396:	441a      	add	r2, r3
 8005398:	b2e4      	uxtb	r4, r4
 800539a:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800539e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80053a2:	b292      	uxth	r2, r2
 80053a4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80053a8:	bf08      	it	eq
 80053aa:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80053ae:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053b2:	3201      	adds	r2, #1
 80053b4:	b292      	uxth	r2, r2
 80053b6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80053ba:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 80053be:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80053c2:	b2a4      	uxth	r4, r4
 80053c4:	b292      	uxth	r2, r2
 80053c6:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80053c8:	bf3e      	ittt	cc
 80053ca:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80053ce:	b292      	uxthcc	r2, r2
 80053d0:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 80053d4:	e7a6      	b.n	8005324 <printToBufferUART1+0x10>
 80053d6:	bf00      	nop
 80053d8:	40013800 	.word	0x40013800
 80053dc:	200002c2 	.word	0x200002c2

080053e0 <printToBufferWithoutEndUART1>:
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80053e0:	2100      	movs	r1, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80053e2:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <printToBufferWithoutEndUART1+0x74>)
{
 80053e4:	b510      	push	{r4, lr}
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80053e6:	68d3      	ldr	r3, [r2, #12]
 80053e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ec:	60d3      	str	r3, [r2, #12]
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80053ee:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <printToBufferWithoutEndUART1+0x78>)
	while (*str != 0)
 80053f0:	7802      	ldrb	r2, [r0, #0]
 80053f2:	b92a      	cbnz	r2, 8005400 <printToBufferWithoutEndUART1+0x20>
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80053f4:	4a17      	ldr	r2, [pc, #92]	; (8005454 <printToBufferWithoutEndUART1+0x74>)
 80053f6:	68d3      	ldr	r3, [r2, #12]
 80053f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fc:	60d3      	str	r3, [r2, #12]
}
 80053fe:	bd10      	pop	{r4, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005400:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005404:	b292      	uxth	r2, r2
 8005406:	1c54      	adds	r4, r2, #1
 8005408:	b2a4      	uxth	r4, r4
 800540a:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 800540e:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005412:	441a      	add	r2, r3
 8005414:	b2e4      	uxtb	r4, r4
 8005416:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800541a:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800541e:	b292      	uxth	r2, r2
 8005420:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005424:	bf08      	it	eq
 8005426:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800542a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800542e:	3201      	adds	r2, #1
 8005430:	b292      	uxth	r2, r2
 8005432:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005436:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 800543a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800543e:	b2a4      	uxth	r4, r4
 8005440:	b292      	uxth	r2, r2
 8005442:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005444:	bf3e      	ittt	cc
 8005446:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 800544a:	b292      	uxthcc	r2, r2
 800544c:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 8005450:	e7ce      	b.n	80053f0 <printToBufferWithoutEndUART1+0x10>
 8005452:	bf00      	nop
 8005454:	40013800 	.word	0x40013800
 8005458:	200002c2 	.word	0x200002c2

0800545c <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 800545c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800545e:	9101      	str	r1, [sp, #4]
 8005460:	f88d 2003 	strb.w	r2, [sp, #3]
	char *str1;
	if (koma == 0)
 8005464:	f89d 3003 	ldrb.w	r3, [sp, #3]
{
 8005468:	4604      	mov	r4, r0
		str1 = itoa(value);
 800546a:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 800546c:	2b00      	cmp	r3, #0
 800546e:	d13f      	bne.n	80054f0 <printToBufferUART1D+0x94>
		str1 = itoa(value);
 8005470:	f7fb fefa 	bl	8001268 <itoa>
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005474:	2500      	movs	r5, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005476:	4a47      	ldr	r2, [pc, #284]	; (8005594 <printToBufferUART1D+0x138>)
 8005478:	68d3      	ldr	r3, [r2, #12]
 800547a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547e:	60d3      	str	r3, [r2, #12]
	while (*str != 0)
 8005480:	4b45      	ldr	r3, [pc, #276]	; (8005598 <printToBufferUART1D+0x13c>)
 8005482:	7822      	ldrb	r2, [r4, #0]
 8005484:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005488:	2a00      	cmp	r2, #0
 800548a:	d136      	bne.n	80054fa <printToBufferUART1D+0x9e>
 800548c:	3801      	subs	r0, #1

	}

	while (*str1 != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 800548e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
	while (*str1 != 0)
 8005492:	f810 4f01 	ldrb.w	r4, [r0, #1]!
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005496:	b292      	uxth	r2, r2
	while (*str1 != 0)
 8005498:	2c00      	cmp	r4, #0
 800549a:	d157      	bne.n	800554c <printToBufferUART1D+0xf0>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 800549c:	1c51      	adds	r1, r2, #1
 800549e:	b289      	uxth	r1, r1
 80054a0:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 80054a4:	210a      	movs	r1, #10
 80054a6:	441a      	add	r2, r3
 80054a8:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80054ac:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80054b0:	b292      	uxth	r2, r2
 80054b2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80054b6:	bf08      	it	eq
 80054b8:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80054bc:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80054c0:	3201      	adds	r2, #1
 80054c2:	b292      	uxth	r2, r2
 80054c4:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80054c8:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 80054cc:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80054d0:	b289      	uxth	r1, r1
 80054d2:	b292      	uxth	r2, r2
 80054d4:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80054d6:	bf3e      	ittt	cc
 80054d8:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80054dc:	b292      	uxthcc	r2, r2
 80054de:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80054e2:	4a2c      	ldr	r2, [pc, #176]	; (8005594 <printToBufferUART1D+0x138>)
 80054e4:	68d3      	ldr	r3, [r2, #12]
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	60d3      	str	r3, [r2, #12]
}
 80054ec:	b003      	add	sp, #12
 80054ee:	bd30      	pop	{r4, r5, pc}
		str1 = itoa_koma(value,koma);
 80054f0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80054f4:	f7fb ff30 	bl	8001358 <itoa_koma>
 80054f8:	e7bc      	b.n	8005474 <printToBufferUART1D+0x18>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80054fa:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80054fe:	b292      	uxth	r2, r2
 8005500:	1c51      	adds	r1, r2, #1
 8005502:	b289      	uxth	r1, r1
 8005504:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 8005508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800550c:	441a      	add	r2, r3
 800550e:	b2c9      	uxtb	r1, r1
 8005510:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005514:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005518:	b292      	uxth	r2, r2
 800551a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800551e:	bf08      	it	eq
 8005520:	f8a3 5454 	strheq.w	r5, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005524:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005528:	3201      	adds	r2, #1
 800552a:	b292      	uxth	r2, r2
 800552c:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005530:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 8005534:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005538:	b289      	uxth	r1, r1
 800553a:	b292      	uxth	r2, r2
 800553c:	4291      	cmp	r1, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800553e:	bf3e      	ittt	cc
 8005540:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005544:	b292      	uxthcc	r2, r2
 8005546:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 800554a:	e79a      	b.n	8005482 <printToBufferUART1D+0x26>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 800554c:	1c54      	adds	r4, r2, #1
 800554e:	b2a4      	uxth	r4, r4
 8005550:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 8005554:	7804      	ldrb	r4, [r0, #0]
 8005556:	441a      	add	r2, r3
 8005558:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800555c:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005560:	b292      	uxth	r2, r2
 8005562:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005566:	bf08      	it	eq
 8005568:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800556c:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005570:	3201      	adds	r2, #1
 8005572:	b292      	uxth	r2, r2
 8005574:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005578:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 800557c:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005580:	b2a4      	uxth	r4, r4
 8005582:	b292      	uxth	r2, r2
 8005584:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005586:	bf3e      	ittt	cc
 8005588:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 800558c:	b292      	uxthcc	r2, r2
 800558e:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 8005592:	e77c      	b.n	800548e <printToBufferUART1D+0x32>
 8005594:	40013800 	.word	0x40013800
 8005598:	200002c2 	.word	0x200002c2

0800559c <putCharDirectToUart1>:
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800559c:	4b02      	ldr	r3, [pc, #8]	; (80055a8 <putCharDirectToUart1+0xc>)
 800559e:	681a      	ldr	r2, [r3, #0]
	  putCharInBufferUart1(*s++);
}

void putCharDirectToUart1(uint8_t c)
{
	while (!LL_USART_IsActiveFlag_TXE(USART1));
 80055a0:	0612      	lsls	r2, r2, #24
 80055a2:	d5fc      	bpl.n	800559e <putCharDirectToUart1+0x2>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80055a4:	6058      	str	r0, [r3, #4]
	LL_USART_TransmitData8(USART1, c);
	c++;
}
 80055a6:	4770      	bx	lr
 80055a8:	40013800 	.word	0x40013800

080055ac <putStringDirectToUart1>:

void putStringDirectToUart1(volatile char *s)
{
 80055ac:	4601      	mov	r1, r0
 80055ae:	b508      	push	{r3, lr}
  while (*s != 0)
 80055b0:	780b      	ldrb	r3, [r1, #0]
 80055b2:	b903      	cbnz	r3, 80055b6 <putStringDirectToUart1+0xa>
	  putCharDirectToUart1(*s++);
}
 80055b4:	bd08      	pop	{r3, pc}
	  putCharDirectToUart1(*s++);
 80055b6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80055ba:	f7ff ffef 	bl	800559c <putCharDirectToUart1>
 80055be:	e7f7      	b.n	80055b0 <putStringDirectToUart1+0x4>

080055c0 <Print_to_USART1>:
{
 80055c0:	b508      	push	{r3, lr}
	putStringDirectToUart1(data);
 80055c2:	f7ff fff3 	bl	80055ac <putStringDirectToUart1>
}
 80055c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	putCharDirectToUart1('\n');
 80055ca:	200a      	movs	r0, #10
 80055cc:	f7ff bfe6 	b.w	800559c <putCharDirectToUart1>

080055d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80055d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80055d2:	e003      	b.n	80055dc <LoopCopyDataInit>

080055d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80055d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80055d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80055da:	3104      	adds	r1, #4

080055dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80055dc:	480a      	ldr	r0, [pc, #40]	; (8005608 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80055e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80055e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80055e4:	d3f6      	bcc.n	80055d4 <CopyDataInit>
  ldr r2, =_sbss
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80055e8:	e002      	b.n	80055f0 <LoopFillZerobss>

080055ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80055ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80055ec:	f842 3b04 	str.w	r3, [r2], #4

080055f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80055f0:	4b08      	ldr	r3, [pc, #32]	; (8005614 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80055f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80055f4:	d3f9      	bcc.n	80055ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055f6:	f7ff fe5b 	bl	80052b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055fa:	f000 f99f 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055fe:	f7ff fa0f 	bl	8004a20 <main>
  bx lr
 8005602:	4770      	bx	lr
  ldr r3, =_sidata
 8005604:	08006f48 	.word	0x08006f48
  ldr r0, =_sdata
 8005608:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800560c:	20000290 	.word	0x20000290
  ldr r2, =_sbss
 8005610:	20000290 	.word	0x20000290
  ldr r3, = _ebss
 8005614:	20000a30 	.word	0x20000a30

08005618 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005618:	e7fe      	b.n	8005618 <ADC1_IRQHandler>

0800561a <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800561a:	4602      	mov	r2, r0
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800561c:	6880      	ldr	r0, [r0, #8]
 800561e:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005620:	f010 0001 	ands.w	r0, r0, #1
 8005624:	d10c      	bne.n	8005640 <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8005626:	6853      	ldr	r3, [r2, #4]
 8005628:	684c      	ldr	r4, [r1, #4]
 800562a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562e:	4323      	orrs	r3, r4
 8005630:	6053      	str	r3, [r2, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8005632:	6893      	ldr	r3, [r2, #8]
 8005634:	6809      	ldr	r1, [r1, #0]
 8005636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563a:	430b      	orrs	r3, r1
 800563c:	6093      	str	r3, [r2, #8]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800563e:	bd10      	pop	{r4, pc}
    status = ERROR;
 8005640:	2001      	movs	r0, #1
 8005642:	e7fc      	b.n	800563e <LL_ADC_Init+0x24>

08005644 <LL_ADC_REG_Init>:
 8005644:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005646:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005648:	07db      	lsls	r3, r3, #31
 800564a:	d41b      	bmi.n	8005684 <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 800564c:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800564e:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 8005650:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005654:	b112      	cbz	r2, 800565c <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 8005656:	688c      	ldr	r4, [r1, #8]
 8005658:	4313      	orrs	r3, r2
 800565a:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800565c:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800565e:	6883      	ldr	r3, [r0, #8]
 8005660:	680c      	ldr	r4, [r1, #0]
 8005662:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8005666:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800566a:	4323      	orrs	r3, r4
 800566c:	68cc      	ldr	r4, [r1, #12]
 800566e:	6909      	ldr	r1, [r1, #16]
 8005670:	4323      	orrs	r3, r4
 8005672:	430b      	orrs	r3, r1
 8005674:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005676:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005678:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800567c:	4313      	orrs	r3, r2
 800567e:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 8005680:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8005682:	bd10      	pop	{r4, pc}
    status = ERROR;
 8005684:	2001      	movs	r0, #1
 8005686:	e7fc      	b.n	8005682 <LL_ADC_REG_Init+0x3e>

08005688 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800568c:	680d      	ldr	r5, [r1, #0]
{
 800568e:	4604      	mov	r4, r0
  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8005690:	f3c5 250f 	ubfx	r5, r5, #8, #16
 8005694:	fa95 f2a5 	rbit	r2, r5
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005698:	f04f 0a0f 	mov.w	sl, #15
  pinpos = POSITION_VAL(pinmask);
 800569c:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80056a0:	f04f 0903 	mov.w	r9, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80056a4:	2704      	movs	r7, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80056a6:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 80056aa:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 80056ae:	fa35 f002 	lsrs.w	r0, r5, r2
 80056b2:	d101      	bne.n	80056b8 <LL_GPIO_Init+0x30>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 80056b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 80056b8:	2301      	movs	r3, #1
 80056ba:	4093      	lsls	r3, r2
 80056bc:	422b      	tst	r3, r5
 80056be:	d05e      	beq.n	800577e <LL_GPIO_Init+0xf6>
      if (pinpos < GPIO_PIN_MASK_POS)
 80056c0:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80056c2:	bf85      	ittet	hi
 80056c4:	f1a2 0308 	subhi.w	r3, r2, #8
 80056c8:	fa0c f303 	lslhi.w	r3, ip, r3
        currentpin = (0x00000101uL << pinpos);
 80056cc:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80056d0:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80056d4:	68e0      	ldr	r0, [r4, #12]
 80056d6:	0a1e      	lsrs	r6, r3, #8
 80056d8:	fa96 f8a6 	rbit	r8, r6
 80056dc:	fab8 f888 	clz	r8, r8
 80056e0:	ea20 0606 	bic.w	r6, r0, r6
 80056e4:	6908      	ldr	r0, [r1, #16]
 80056e6:	fa00 f008 	lsl.w	r0, r0, r8
 80056ea:	4330      	orrs	r0, r6
 80056ec:	60e0      	str	r0, [r4, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80056ee:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80056f2:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80056f6:	fab6 f686 	clz	r6, r6
 80056fa:	fa93 fba3 	rbit	fp, r3
 80056fe:	fabb fb8b 	clz	fp, fp
 8005702:	00b6      	lsls	r6, r6, #2
 8005704:	fa0a f006 	lsl.w	r0, sl, r6
 8005708:	f854 6008 	ldr.w	r6, [r4, r8]
 800570c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005710:	ea26 0600 	bic.w	r6, r6, r0
 8005714:	6848      	ldr	r0, [r1, #4]
 8005716:	fa00 fb0b 	lsl.w	fp, r0, fp
 800571a:	ea46 060b 	orr.w	r6, r6, fp
 800571e:	f844 6008 	str.w	r6, [r4, r8]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005722:	6848      	ldr	r0, [r1, #4]
 8005724:	f020 0008 	bic.w	r0, r0, #8
 8005728:	2801      	cmp	r0, #1
 800572a:	d128      	bne.n	800577e <LL_GPIO_Init+0xf6>
 800572c:	fa93 f0a3 	rbit	r0, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8005730:	fab0 f080 	clz	r0, r0
 8005734:	fa93 fba3 	rbit	fp, r3
 8005738:	fabb fb8b 	clz	fp, fp
 800573c:	0080      	lsls	r0, r0, #2
 800573e:	fa09 f000 	lsl.w	r0, r9, r0
 8005742:	ea26 0600 	bic.w	r6, r6, r0
 8005746:	6888      	ldr	r0, [r1, #8]
 8005748:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800574c:	fa00 fb0b 	lsl.w	fp, r0, fp
 8005750:	ea46 060b 	orr.w	r6, r6, fp
 8005754:	f844 6008 	str.w	r6, [r4, r8]
 8005758:	fa93 f0a3 	rbit	r0, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800575c:	fab0 f080 	clz	r0, r0
 8005760:	fa93 f3a3 	rbit	r3, r3
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	0080      	lsls	r0, r0, #2
 800576a:	fa07 f000 	lsl.w	r0, r7, r0
 800576e:	ea26 0000 	bic.w	r0, r6, r0
 8005772:	68ce      	ldr	r6, [r1, #12]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	409e      	lsls	r6, r3
 8005778:	4306      	orrs	r6, r0
 800577a:	f844 6008 	str.w	r6, [r4, r8]
    pinpos++;
 800577e:	3201      	adds	r2, #1
 8005780:	e795      	b.n	80056ae <LL_GPIO_Init+0x26>
	...

08005784 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005784:	4b03      	ldr	r3, [pc, #12]	; (8005794 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005786:	4a04      	ldr	r2, [pc, #16]	; (8005798 <RCC_GetHCLKClockFreq+0x14>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800578e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005790:	40d8      	lsrs	r0, r3
 8005792:	4770      	bx	lr
 8005794:	40021000 	.word	0x40021000
 8005798:	08006f25 	.word	0x08006f25

0800579c <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800579c:	4b03      	ldr	r3, [pc, #12]	; (80057ac <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800579e:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <RCC_GetPCLK1ClockFreq+0x14>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80057a6:	5cd3      	ldrb	r3, [r2, r3]
}
 80057a8:	40d8      	lsrs	r0, r3
 80057aa:	4770      	bx	lr
 80057ac:	40021000 	.word	0x40021000
 80057b0:	08006f35 	.word	0x08006f35

080057b4 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80057b6:	4a04      	ldr	r2, [pc, #16]	; (80057c8 <RCC_GetPCLK2ClockFreq+0x14>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80057be:	5cd3      	ldrb	r3, [r2, r3]
}
 80057c0:	40d8      	lsrs	r0, r3
 80057c2:	4770      	bx	lr
 80057c4:	40021000 	.word	0x40021000
 80057c8:	08006f35 	.word	0x08006f35

080057cc <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80057cc:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 80057ce:	685a      	ldr	r2, [r3, #4]
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80057d0:	03d2      	lsls	r2, r2, #15
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 80057d2:	bf41      	itttt	mi
 80057d4:	6ad8      	ldrmi	r0, [r3, #44]	; 0x2c
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80057d6:	4a08      	ldrmi	r2, [pc, #32]	; (80057f8 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 80057d8:	f000 000f 	andmi.w	r0, r0, #15
 80057dc:	3001      	addmi	r0, #1
 80057de:	bf48      	it	mi
 80057e0:	fbb2 f0f0 	udivmi	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80057e4:	685b      	ldr	r3, [r3, #4]
      pllinputfreq = HSI_VALUE / 2U;
 80057e6:	bf58      	it	pl
 80057e8:	4804      	ldrpl	r0, [pc, #16]	; (80057fc <RCC_PLL_GetFreqDomain_SYS+0x30>)

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80057ea:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80057ee:	3302      	adds	r3, #2
}
 80057f0:	4358      	muls	r0, r3
 80057f2:	4770      	bx	lr
 80057f4:	40021000 	.word	0x40021000
 80057f8:	007a1200 	.word	0x007a1200
 80057fc:	003d0900 	.word	0x003d0900

08005800 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <RCC_GetSystemClockFreq+0x14>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005808:	2b08      	cmp	r3, #8
 800580a:	d101      	bne.n	8005810 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800580c:	f7ff bfde 	b.w	80057cc <RCC_PLL_GetFreqDomain_SYS>
}
 8005810:	4801      	ldr	r0, [pc, #4]	; (8005818 <RCC_GetSystemClockFreq+0x18>)
 8005812:	4770      	bx	lr
 8005814:	40021000 	.word	0x40021000
 8005818:	007a1200 	.word	0x007a1200

0800581c <LL_RCC_GetSystemClocksFreq>:
{
 800581c:	b508      	push	{r3, lr}
 800581e:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005820:	f7ff ffee 	bl	8005800 <RCC_GetSystemClockFreq>
 8005824:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005826:	f7ff ffad 	bl	8005784 <RCC_GetHCLKClockFreq>
 800582a:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800582c:	f7ff ffb6 	bl	800579c <RCC_GetPCLK1ClockFreq>
 8005830:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005832:	6848      	ldr	r0, [r1, #4]
 8005834:	f7ff ffbe 	bl	80057b4 <RCC_GetPCLK2ClockFreq>
 8005838:	60c8      	str	r0, [r1, #12]
}
 800583a:	bd08      	pop	{r3, pc}

0800583c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800583c:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800583e:	68c3      	ldr	r3, [r0, #12]
 8005840:	4604      	mov	r4, r0
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005842:	049b      	lsls	r3, r3, #18
{
 8005844:	460d      	mov	r5, r1
 8005846:	b085      	sub	sp, #20
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005848:	d502      	bpl.n	8005850 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 800584a:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800584c:	b005      	add	sp, #20
 800584e:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8005850:	684b      	ldr	r3, [r1, #4]
 8005852:	68c9      	ldr	r1, [r1, #12]
 8005854:	68c2      	ldr	r2, [r0, #12]
 8005856:	430b      	orrs	r3, r1
 8005858:	6929      	ldr	r1, [r5, #16]
 800585a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800585e:	430b      	orrs	r3, r1
 8005860:	69a9      	ldr	r1, [r5, #24]
 8005862:	f022 020c 	bic.w	r2, r2, #12
 8005866:	430b      	orrs	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800586c:	6903      	ldr	r3, [r0, #16]
 800586e:	68aa      	ldr	r2, [r5, #8]
 8005870:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005874:	4313      	orrs	r3, r2
 8005876:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005878:	6943      	ldr	r3, [r0, #20]
 800587a:	696a      	ldr	r2, [r5, #20]
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	4313      	orrs	r3, r2
 8005882:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005884:	4668      	mov	r0, sp
 8005886:	f7ff ffc9 	bl	800581c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800588a:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <LL_USART_Init+0xcc>)
 800588c:	429c      	cmp	r4, r3
 800588e:	d124      	bne.n	80058da <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005890:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005892:	2900      	cmp	r1, #0
 8005894:	d0d9      	beq.n	800584a <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8005896:	682a      	ldr	r2, [r5, #0]
 8005898:	2a00      	cmp	r2, #0
 800589a:	d0d6      	beq.n	800584a <LL_USART_Init+0xe>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800589c:	2319      	movs	r3, #25
 800589e:	434b      	muls	r3, r1
 80058a0:	69a9      	ldr	r1, [r5, #24]
 80058a2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80058a6:	f04f 0164 	mov.w	r1, #100	; 0x64
 80058aa:	d11f      	bne.n	80058ec <LL_USART_Init+0xb0>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80058ac:	0052      	lsls	r2, r2, #1
 80058ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80058b2:	fbb3 f0f1 	udiv	r0, r3, r1
 80058b6:	fb01 3310 	mls	r3, r1, r0, r3
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	3332      	adds	r3, #50	; 0x32
 80058be:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c2:	f003 0207 	and.w	r2, r3, #7
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80058cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058d0:	4413      	add	r3, r2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80058d2:	b29b      	uxth	r3, r3
      status = SUCCESS;
 80058d4:	2000      	movs	r0, #0
 80058d6:	60a3      	str	r3, [r4, #8]
 80058d8:	e7b8      	b.n	800584c <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <LL_USART_Init+0xd0>)
 80058dc:	429c      	cmp	r4, r3
 80058de:	d101      	bne.n	80058e4 <LL_USART_Init+0xa8>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80058e0:	9902      	ldr	r1, [sp, #8]
 80058e2:	e7d6      	b.n	8005892 <LL_USART_Init+0x56>
    else if (USARTx == USART3)
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <LL_USART_Init+0xd4>)
 80058e6:	429c      	cmp	r4, r3
 80058e8:	d1af      	bne.n	800584a <LL_USART_Init+0xe>
 80058ea:	e7f9      	b.n	80058e0 <LL_USART_Init+0xa4>
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f2:	fbb3 f2f1 	udiv	r2, r3, r1
 80058f6:	fb01 3312 	mls	r3, r1, r2, r3
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	3332      	adds	r3, #50	; 0x32
 80058fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005902:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005906:	e7e4      	b.n	80058d2 <LL_USART_Init+0x96>
 8005908:	40013800 	.word	0x40013800
 800590c:	40004400 	.word	0x40004400
 8005910:	40004800 	.word	0x40004800

08005914 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005918:	fbb0 f0f3 	udiv	r0, r0, r3
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800591c:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800591e:	4b03      	ldr	r3, [pc, #12]	; (800592c <LL_Init1msTick+0x18>)
 8005920:	3801      	subs	r0, #1
 8005922:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005926:	2205      	movs	r2, #5
 8005928:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800592a:	4770      	bx	lr
 800592c:	e000e010 	.word	0xe000e010

08005930 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005930:	4b01      	ldr	r3, [pc, #4]	; (8005938 <LL_SetSystemCoreClock+0x8>)
 8005932:	6018      	str	r0, [r3, #0]
}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	2000028c 	.word	0x2000028c

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	2600      	movs	r6, #0
 8005940:	4d0c      	ldr	r5, [pc, #48]	; (8005974 <__libc_init_array+0x38>)
 8005942:	4c0d      	ldr	r4, [pc, #52]	; (8005978 <__libc_init_array+0x3c>)
 8005944:	1b64      	subs	r4, r4, r5
 8005946:	10a4      	asrs	r4, r4, #2
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	f000 f830 	bl	80059b0 <_init>
 8005950:	2600      	movs	r6, #0
 8005952:	4d0a      	ldr	r5, [pc, #40]	; (800597c <__libc_init_array+0x40>)
 8005954:	4c0a      	ldr	r4, [pc, #40]	; (8005980 <__libc_init_array+0x44>)
 8005956:	1b64      	subs	r4, r4, r5
 8005958:	10a4      	asrs	r4, r4, #2
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	08006f40 	.word	0x08006f40
 8005978:	08006f40 	.word	0x08006f40
 800597c:	08006f40 	.word	0x08006f40
 8005980:	08006f44 	.word	0x08006f44

08005984 <memcpy>:
 8005984:	440a      	add	r2, r1
 8005986:	4291      	cmp	r1, r2
 8005988:	f100 33ff 	add.w	r3, r0, #4294967295
 800598c:	d100      	bne.n	8005990 <memcpy+0xc>
 800598e:	4770      	bx	lr
 8005990:	b510      	push	{r4, lr}
 8005992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005996:	4291      	cmp	r1, r2
 8005998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800599c:	d1f9      	bne.n	8005992 <memcpy+0xe>
 800599e:	bd10      	pop	{r4, pc}

080059a0 <memset>:
 80059a0:	4603      	mov	r3, r0
 80059a2:	4402      	add	r2, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <_init>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	bf00      	nop
 80059b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b6:	bc08      	pop	{r3}
 80059b8:	469e      	mov	lr, r3
 80059ba:	4770      	bx	lr

080059bc <_fini>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr
