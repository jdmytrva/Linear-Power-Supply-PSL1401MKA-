
PSL1401MKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000158c  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  080070e4  080070e4  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e4  080070e4  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  080070ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000290  0800737c  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800737c  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119b9  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286c  00000000  00000000  00031c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000051e4  00000000  00000000  000344de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  000396c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed0  00000000  00000000  00039e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c382  00000000  00000000  0003ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b5e6  00000000  00000000  000470ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00043e1a  00000000  00000000  000526a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000964ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001620  00000000  00000000  00096510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b40 	.word	0x08005b40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	08005b40 	.word	0x08005b40

08000210 <flash_erase_page>:
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
	while (FLASH->SR & FLASH_SR_BSY);
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <flash_erase_page+0x3c>)
 8000212:	4613      	mov	r3, r2
 8000214:	68d1      	ldr	r1, [r2, #12]
 8000216:	07c9      	lsls	r1, r1, #31
 8000218:	d4fc      	bmi.n	8000214 <flash_erase_page+0x4>

		if (FLASH->SR & FLASH_SR_EOP) {
 800021a:	68d1      	ldr	r1, [r2, #12]
 800021c:	0689      	lsls	r1, r1, #26
			FLASH->SR = FLASH_SR_EOP;
 800021e:	bf44      	itt	mi
 8000220:	2120      	movmi	r1, #32
 8000222:	60d1      	strmi	r1, [r2, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 8000224:	691a      	ldr	r2, [r3, #16]
 8000226:	f042 0202 	orr.w	r2, r2, #2
 800022a:	611a      	str	r2, [r3, #16]
		FLASH->AR = address;
 800022c:	6158      	str	r0, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800022e:	691a      	ldr	r2, [r3, #16]
 8000230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000234:	611a      	str	r2, [r3, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <flash_erase_page+0x3c>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	0692      	lsls	r2, r2, #26
 800023c:	d5fc      	bpl.n	8000238 <flash_erase_page+0x28>
		FLASH->SR = FLASH_SR_EOP;
 800023e:	2220      	movs	r2, #32
 8000240:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 8000242:	691a      	ldr	r2, [r3, #16]
 8000244:	f022 0202 	bic.w	r2, r2, #2
 8000248:	611a      	str	r2, [r3, #16]
}
 800024a:	4770      	bx	lr
 800024c:	40022000 	.word	0x40022000

08000250 <flash_unlock>:


void flash_unlock(void)
{
	  FLASH->KEYR = FLASH_KEY1;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <flash_unlock+0x10>)
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <flash_unlock+0x14>)
 8000254:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 8000256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800025a:	605a      	str	r2, [r3, #4]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	45670123 	.word	0x45670123

08000268 <flash_lock>:

void flash_lock()
{
	FLASH->CR |= FLASH_CR_LOCK;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <flash_lock+0xc>)
 800026a:	6913      	ldr	r3, [r2, #16]
 800026c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000270:	6113      	str	r3, [r2, #16]
}
 8000272:	4770      	bx	lr
 8000274:	40022000 	.word	0x40022000

08000278 <flash_write>:

void flash_write(uint32_t address,uint32_t data)
{


	while (FLASH->SR & FLASH_SR_BSY);
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <flash_write+0x48>)
{
 800027a:	b510      	push	{r4, lr}
 800027c:	461a      	mov	r2, r3
	while (FLASH->SR & FLASH_SR_BSY);
 800027e:	68dc      	ldr	r4, [r3, #12]
 8000280:	07e4      	lsls	r4, r4, #31
 8000282:	d4fc      	bmi.n	800027e <flash_write+0x6>
	if (FLASH->SR & FLASH_SR_EOP) {
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	06a4      	lsls	r4, r4, #26
		FLASH->SR = FLASH_SR_EOP;
 8000288:	bf44      	itt	mi
 800028a:	2420      	movmi	r4, #32
 800028c:	60dc      	strmi	r4, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 800028e:	6913      	ldr	r3, [r2, #16]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <flash_write+0x48>)
    *(__IO uint16_t*)address = (uint16_t)data;
 8000298:	b28b      	uxth	r3, r1
 800029a:	8003      	strh	r3, [r0, #0]
    while (!(FLASH->SR & FLASH_SR_EOP));
 800029c:	4613      	mov	r3, r2
 800029e:	68d4      	ldr	r4, [r2, #12]
 80002a0:	06a4      	lsls	r4, r4, #26
 80002a2:	d5fc      	bpl.n	800029e <flash_write+0x26>
    		FLASH->SR = FLASH_SR_EOP;
 80002a4:	2420      	movs	r4, #32


	address+=2;
	data>>=16;
    *(__IO uint16_t*)address = (uint16_t)data;
 80002a6:	0c09      	lsrs	r1, r1, #16
    		FLASH->SR = FLASH_SR_EOP;
 80002a8:	60d4      	str	r4, [r2, #12]
    *(__IO uint16_t*)address = (uint16_t)data;
 80002aa:	8041      	strh	r1, [r0, #2]
    while (!(FLASH->SR & FLASH_SR_EOP));
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	0692      	lsls	r2, r2, #26
 80002b0:	d5fc      	bpl.n	80002ac <flash_write+0x34>
    		FLASH->SR = FLASH_SR_EOP;
 80002b2:	2220      	movs	r2, #32
 80002b4:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 80002b6:	691a      	ldr	r2, [r3, #16]
 80002b8:	f022 0201 	bic.w	r2, r2, #1
 80002bc:	611a      	str	r2, [r3, #16]

}
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	40022000 	.word	0x40022000

080002c4 <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
void flash_write_block()
{
 80002c4:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c6:	b672      	cpsid	i
	__disable_irq();
	flash_unlock();
 80002c8:	f7ff ffc2 	bl	8000250 <flash_unlock>
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = (void *)&LoggingData;

	logDebugD("size: ",size,0);
 80002cc:	4810      	ldr	r0, [pc, #64]	; (8000310 <flash_write_block+0x4c>)
 80002ce:	f005 f969 	bl	80055a4 <printToBufferWithoutEndUART1>
	logDebugD("val: ",*(source_adr + 0),0);
 80002d2:	4c10      	ldr	r4, [pc, #64]	; (8000314 <flash_write_block+0x50>)
	logDebugD("size: ",size,0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80002da:	480f      	ldr	r0, [pc, #60]	; (8000318 <flash_write_block+0x54>)
 80002dc:	f005 f9a0 	bl	8005620 <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 80002e0:	480b      	ldr	r0, [pc, #44]	; (8000310 <flash_write_block+0x4c>)
 80002e2:	f005 f95f 	bl	80055a4 <printToBufferWithoutEndUART1>
 80002e6:	2200      	movs	r2, #0
 80002e8:	6821      	ldr	r1, [r4, #0]
 80002ea:	480c      	ldr	r0, [pc, #48]	; (800031c <flash_write_block+0x58>)
 80002ec:	f005 f998 	bl	8005620 <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <flash_write_block+0x5c>)
 80002f2:	f7ff ff8d 	bl	8000210 <flash_erase_page>
	for (i = 0; i < size/4; ++i)
 80002f6:	4d0b      	ldr	r5, [pc, #44]	; (8000324 <flash_write_block+0x60>)
	flash_erase_page(pageAdr );
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <flash_write_block+0x5c>)
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80002fa:	f854 1b04 	ldr.w	r1, [r4], #4
 80002fe:	f7ff ffbb 	bl	8000278 <flash_write>
	for (i = 0; i < size/4; ++i)
 8000302:	3004      	adds	r0, #4
 8000304:	42a8      	cmp	r0, r5
 8000306:	d1f8      	bne.n	80002fa <flash_write_block+0x36>
    }

	flash_lock();
 8000308:	f7ff ffae 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800030c:	b662      	cpsie	i
	__enable_irq();
	return 1;
}
 800030e:	bd38      	pop	{r3, r4, r5, pc}
 8000310:	08005c58 	.word	0x08005c58
 8000314:	20000878 	.word	0x20000878
 8000318:	08005c60 	.word	0x08005c60
 800031c:	08005c67 	.word	0x08005c67
 8000320:	0801e400 	.word	0x0801e400
 8000324:	0801e59c 	.word	0x0801e59c

08000328 <flash_read_block>:

	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
	uint32_t *dest_adr = (void *)&LoggingData;

	for (i=0; i < size/4; ++i)
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <flash_read_block+0x18>)
{
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <flash_read_block+0x1c>)
	for (i=0; i < size/4; ++i)
 800032c:	4906      	ldr	r1, [pc, #24]	; (8000348 <flash_read_block+0x20>)
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 800032e:	f853 0b04 	ldr.w	r0, [r3], #4
	for (i=0; i < size/4; ++i)
 8000332:	428b      	cmp	r3, r1
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000334:	f842 0b04 	str.w	r0, [r2], #4
	for (i=0; i < size/4; ++i)
 8000338:	d1f9      	bne.n	800032e <flash_read_block+0x6>
	}

	return 1;

}
 800033a:	2001      	movs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000878 	.word	0x20000878
 8000344:	0801e400 	.word	0x0801e400
 8000348:	0801e59c 	.word	0x0801e59c

0800034c <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 800034e:	6804      	ldr	r4, [r0, #0]
{
 8000350:	4607      	mov	r7, r0
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000352:	428c      	cmp	r4, r1
{
 8000354:	460d      	mov	r5, r1
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000356:	d301      	bcc.n	800035c <flash_read+0x10>
 8000358:	4294      	cmp	r4, r2
 800035a:	d91b      	bls.n	8000394 <flash_read+0x48>
	{
		return EEpromValue;
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800035c:	2600      	movs	r6, #0
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <flash_read+0x4c>)
		logDebugD("Fail to read address: ",address,0);
 8000360:	480e      	ldr	r0, [pc, #56]	; (800039c <flash_read+0x50>)
		EEpromReadStatus = 0;
 8000362:	701e      	strb	r6, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000364:	f005 f91e 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000368:	4632      	mov	r2, r6
 800036a:	4639      	mov	r1, r7
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <flash_read+0x54>)
 800036e:	f005 f957 	bl	8005620 <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 8000372:	480a      	ldr	r0, [pc, #40]	; (800039c <flash_read+0x50>)
 8000374:	f005 f916 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000378:	4621      	mov	r1, r4
 800037a:	4632      	mov	r2, r6
 800037c:	4809      	ldr	r0, [pc, #36]	; (80003a4 <flash_read+0x58>)
 800037e:	f005 f94f 	bl	8005620 <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 8000382:	4806      	ldr	r0, [pc, #24]	; (800039c <flash_read+0x50>)
 8000384:	f005 f90e 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000388:	4632      	mov	r2, r6
 800038a:	4907      	ldr	r1, [pc, #28]	; (80003a8 <flash_read+0x5c>)
 800038c:	4807      	ldr	r0, [pc, #28]	; (80003ac <flash_read+0x60>)
 800038e:	f005 f947 	bl	8005620 <printToBufferUART1D>
		return MinValue;
 8000392:	462c      	mov	r4, r5
	}
}
 8000394:	4620      	mov	r0, r4
 8000396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000398:	20000000 	.word	0x20000000
 800039c:	08005c58 	.word	0x08005c58
 80003a0:	08005c6d 	.word	0x08005c6d
 80003a4:	08005c84 	.word	0x08005c84
 80003a8:	0801ec00 	.word	0x0801ec00
 80003ac:	08005c96 	.word	0x08005c96

080003b0 <CalibrationWriteToFlash>:
	__enable_irq();

}

uint8_t CalibrationWriteToFlash(void)
{
 80003b0:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationData.CRC_AddresInEEprom);
 80003b2:	4c19      	ldr	r4, [pc, #100]	; (8000418 <CalibrationWriteToFlash+0x68>)
 80003b4:	6860      	ldr	r0, [r4, #4]
 80003b6:	f7ff ff2b 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationData.CRC_AddresInEEprom, CalibrationData.CRC_data);
 80003ba:	e9d4 1000 	ldrd	r1, r0, [r4]
 80003be:	f7ff ff5b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent);
 80003c2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80003c6:	f7ff ff57 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent1);
 80003ca:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80003ce:	f7ff ff53 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent_AddresInEEprom, CalibrationData.CalibrationValueForCurrent);
 80003d2:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 80003d6:	f7ff ff4f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent1_AddresInEEprom, CalibrationData.CalibrationValueForCurrent1);
 80003da:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80003de:	f7ff ff4b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage_AddresInEEprom, CalibrationData.CalibrationValueForVoltage);
 80003e2:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 80003e6:	f7ff ff47 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage1_AddresInEEprom, CalibrationData.CalibrationValueForVoltage1);
 80003ea:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 80003ee:	f7ff ff43 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage2_AddresInEEprom, CalibrationData.CalibrationValueForVoltage2);
 80003f2:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 80003f6:	f7ff ff3f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationData.ResistanceComp_Ishunt_Wires);
 80003fa:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80003fe:	f7ff ff3b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_MOSFET_AddresInEEprom, CalibrationData.ResistanceComp_MOSFET);
 8000402:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000406:	f7ff ff37 	bl	8000278 <flash_write>
	logDebug("CalibrationWriteToFlash ");
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <CalibrationWriteToFlash+0x6c>)
 800040c:	f005 f8ca 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <CalibrationWriteToFlash+0x70>)
 8000412:	f005 f861 	bl	80054d8 <printToBufferUART1>

}
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000004 	.word	0x20000004
 800041c:	08005c58 	.word	0x08005c58
 8000420:	08005cad 	.word	0x08005cad

08000424 <CalibrationFactoryWriteToFlash>:
uint8_t CalibrationFactoryWriteToFlash(void)
{
 8000424:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationDataFactory.CRC_AddresInEEprom);
 8000426:	4c19      	ldr	r4, [pc, #100]	; (800048c <CalibrationFactoryWriteToFlash+0x68>)
 8000428:	6860      	ldr	r0, [r4, #4]
 800042a:	f7ff fef1 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationDataFactory.CRC_AddresInEEprom, CalibrationDataFactory.CRC_data);
 800042e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000432:	f7ff ff21 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent);
 8000436:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800043a:	f7ff ff1d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent1);
 800043e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000442:	f7ff ff19 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent);
 8000446:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800044a:	f7ff ff15 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent1);
 800044e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000452:	f7ff ff11 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage);
 8000456:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800045a:	f7ff ff0d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage1);
 800045e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000462:	f7ff ff09 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage2);
 8000466:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800046a:	f7ff ff05 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationDataFactory.ResistanceComp_Ishunt_Wires);
 800046e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000472:	f7ff ff01 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_MOSFET_AddresInEEprom, CalibrationDataFactory.ResistanceComp_MOSFET);
 8000476:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 800047a:	f7ff fefd 	bl	8000278 <flash_write>
	logDebug("CalibrationFactoryWriteToFlash ");
 800047e:	4804      	ldr	r0, [pc, #16]	; (8000490 <CalibrationFactoryWriteToFlash+0x6c>)
 8000480:	f005 f890 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <CalibrationFactoryWriteToFlash+0x70>)
 8000486:	f005 f827 	bl	80054d8 <printToBufferUART1>
}
 800048a:	bd10      	pop	{r4, pc}
 800048c:	20000054 	.word	0x20000054
 8000490:	08005c58 	.word	0x08005c58
 8000494:	08005cc6 	.word	0x08005cc6

08000498 <CalibrationReadFromFlash>:
uint8_t CalibrationReadFromFlash(void)
{
 8000498:	b538      	push	{r3, r4, r5, lr}
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 800049a:	4c24      	ldr	r4, [pc, #144]	; (800052c <CalibrationReadFromFlash+0x94>)
 800049c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a0:	2100      	movs	r1, #0
 80004a2:	6860      	ldr	r0, [r4, #4]
 80004a4:	f7ff ff52 	bl	800034c <flash_read>
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004ac:	6020      	str	r0, [r4, #0]
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ae:	2100      	movs	r1, #0
 80004b0:	68e0      	ldr	r0, [r4, #12]
 80004b2:	f7ff ff4b 	bl	800034c <flash_read>
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ba:	60a0      	str	r0, [r4, #8]
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004bc:	2100      	movs	r1, #0
 80004be:	6960      	ldr	r0, [r4, #20]
 80004c0:	f7ff ff44 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForCurrent = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004c4:	4d1a      	ldr	r5, [pc, #104]	; (8000530 <CalibrationReadFromFlash+0x98>)
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004c6:	6120      	str	r0, [r4, #16]
	CalibrationData.CalibrationValueForCurrent = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004c8:	462a      	mov	r2, r5
 80004ca:	210a      	movs	r1, #10
 80004cc:	69e0      	ldr	r0, [r4, #28]
 80004ce:	f7ff ff3d 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004d2:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d4:	61a0      	str	r0, [r4, #24]
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004d6:	210a      	movs	r1, #10
 80004d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004da:	f7ff ff37 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004de:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent1 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e0:	6220      	str	r0, [r4, #32]
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004e2:	210a      	movs	r1, #10
 80004e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004e6:	f7ff ff31 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004ea:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForVoltage = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004ec:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004ee:	210a      	movs	r1, #10
 80004f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80004f2:	f7ff ff2b 	bl	800034c <flash_read>
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80004f6:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForVoltage1 = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004f8:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80004fa:	210a      	movs	r1, #10
 80004fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80004fe:	f7ff ff25 	bl	800034c <flash_read>
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000502:	22c8      	movs	r2, #200	; 0xc8
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000504:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000506:	2146      	movs	r1, #70	; 0x46
 8000508:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800050a:	f7ff ff1f 	bl	800034c <flash_read>
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 800050e:	22c8      	movs	r2, #200	; 0xc8
 8000510:	210a      	movs	r1, #10
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000512:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 8000514:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000516:	f7ff ff19 	bl	800034c <flash_read>
 800051a:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <CalibrationReadFromFlash+0x9c>)
 800051e:	f005 f841 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <CalibrationReadFromFlash+0xa0>)
 8000524:	f004 ffd8 	bl	80054d8 <printToBufferUART1>
}
 8000528:	bd38      	pop	{r3, r4, r5, pc}
 800052a:	bf00      	nop
 800052c:	20000004 	.word	0x20000004
 8000530:	000186a0 	.word	0x000186a0
 8000534:	08005c58 	.word	0x08005c58
 8000538:	08005ce6 	.word	0x08005ce6

0800053c <CalibrationReadFromFlashForVerify>:
uint8_t CalibrationReadFromFlashForVerify(void)
{
 800053c:	b538      	push	{r3, r4, r5, lr}
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 800053e:	4c24      	ldr	r4, [pc, #144]	; (80005d0 <CalibrationReadFromFlashForVerify+0x94>)
 8000540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000544:	2100      	movs	r1, #0
 8000546:	6860      	ldr	r0, [r4, #4]
 8000548:	f7ff ff00 	bl	800034c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000550:	6020      	str	r0, [r4, #0]
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000552:	2100      	movs	r1, #0
 8000554:	68e0      	ldr	r0, [r4, #12]
 8000556:	f7ff fef9 	bl	800034c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800055a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800055e:	60a0      	str	r0, [r4, #8]
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 8000560:	2100      	movs	r1, #0
 8000562:	6960      	ldr	r0, [r4, #20]
 8000564:	f7ff fef2 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000568:	4d1a      	ldr	r5, [pc, #104]	; (80005d4 <CalibrationReadFromFlashForVerify+0x98>)
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800056a:	6120      	str	r0, [r4, #16]
	CalibrationDataForVerify.CalibrationValueForCurrent = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 800056c:	462a      	mov	r2, r5
 800056e:	210a      	movs	r1, #10
 8000570:	69e0      	ldr	r0, [r4, #28]
 8000572:	f7ff feeb 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000576:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000578:	61a0      	str	r0, [r4, #24]
	CalibrationDataForVerify.CalibrationValueForCurrent1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 800057a:	210a      	movs	r1, #10
 800057c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800057e:	f7ff fee5 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000582:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000584:	6220      	str	r0, [r4, #32]
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000586:	210a      	movs	r1, #10
 8000588:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800058a:	f7ff fedf 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800058e:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForVoltage = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000590:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 8000592:	210a      	movs	r1, #10
 8000594:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000596:	f7ff fed9 	bl	800034c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800059a:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForVoltage1 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800059c:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800059e:	210a      	movs	r1, #10
 80005a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005a2:	f7ff fed3 	bl	800034c <flash_read>
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005a6:	22c8      	movs	r2, #200	; 0xc8
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005a8:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005aa:	2146      	movs	r1, #70	; 0x46
 80005ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005ae:	f7ff fecd 	bl	800034c <flash_read>
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005b2:	22c8      	movs	r2, #200	; 0xc8
 80005b4:	210a      	movs	r1, #10
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005b6:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005b8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80005ba:	f7ff fec7 	bl	800034c <flash_read>
 80005be:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlashForVerify ");
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <CalibrationReadFromFlashForVerify+0x9c>)
 80005c2:	f004 ffef 	bl	80055a4 <printToBufferWithoutEndUART1>
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <CalibrationReadFromFlashForVerify+0xa0>)
 80005c8:	f004 ff86 	bl	80054d8 <printToBufferUART1>
}
 80005cc:	bd38      	pop	{r3, r4, r5, pc}
 80005ce:	bf00      	nop
 80005d0:	200000a4 	.word	0x200000a4
 80005d4:	000186a0 	.word	0x000186a0
 80005d8:	08005c58 	.word	0x08005c58
 80005dc:	08005d00 	.word	0x08005d00

080005e0 <SettingsWriteToFlash>:
//==============
uint8_t SettingsWriteToFlash(void)
{
 80005e0:	b510      	push	{r4, lr}
	flash_erase_page( SettingsData.CRC_AddresInEEprom);
 80005e2:	4c17      	ldr	r4, [pc, #92]	; (8000640 <SettingsWriteToFlash+0x60>)
 80005e4:	6860      	ldr	r0, [r4, #4]
 80005e6:	f7ff fe13 	bl	8000210 <flash_erase_page>
	flash_write( SettingsData.CRC_AddresInEEprom, SettingsData.CRC_data);
 80005ea:	e9d4 1000 	ldrd	r1, r0, [r4]
 80005ee:	f7ff fe43 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option1_AddresInEEprom, SettingsData.Option1);
 80005f2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80005f6:	f7ff fe3f 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeTime_AddresInEEprom, SettingsData.ChargeTime);
 80005fa:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80005fe:	f7ff fe3b 	bl	8000278 <flash_write>
	flash_write( SettingsData.LowVoltage_AddresInEEprom, SettingsData.LowVoltage);
 8000602:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000606:	f7ff fe37 	bl	8000278 <flash_write>
	flash_write( SettingsData.MaxVoltage_AddresInEEprom, SettingsData.MaxVoltage);
 800060a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800060e:	f7ff fe33 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_Chrg_time_AddresInEEprom, SettingsData.Swing_Chrg_time);
 8000612:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000616:	f7ff fe2f 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_DChrg_time_AddresInEEprom, SettingsData.Swing_DChrg_time);
 800061a:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800061e:	f7ff fe2b 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeAdapt_AddresInEEprom, SettingsData.ChargeAdapt);
 8000622:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000626:	f7ff fe27 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option2_AddresInEEprom, SettingsData.Option2);
 800062a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800062e:	f7ff fe23 	bl	8000278 <flash_write>
	logDebug("SettingsWriteToFlash ");
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <SettingsWriteToFlash+0x64>)
 8000634:	f004 ffb6 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <SettingsWriteToFlash+0x68>)
 800063a:	f004 ff4d 	bl	80054d8 <printToBufferUART1>
}
 800063e:	bd10      	pop	{r4, pc}
 8000640:	20000154 	.word	0x20000154
 8000644:	08005c58 	.word	0x08005c58
 8000648:	08005d23 	.word	0x08005d23

0800064c <SettingsFactoryWriteToFlash>:
uint8_t SettingsFactoryWriteToFlash(void)
{
 800064c:	b510      	push	{r4, lr}
	flash_erase_page( SettingsDataFactory.CRC_AddresInEEprom);
 800064e:	4c17      	ldr	r4, [pc, #92]	; (80006ac <SettingsFactoryWriteToFlash+0x60>)
 8000650:	6860      	ldr	r0, [r4, #4]
 8000652:	f7ff fddd 	bl	8000210 <flash_erase_page>
	flash_write( SettingsDataFactory.CRC_AddresInEEprom, SettingsDataFactory.CRC_data);
 8000656:	e9d4 1000 	ldrd	r1, r0, [r4]
 800065a:	f7ff fe0d 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option1_AddresInEEprom, SettingsDataFactory.Option1);
 800065e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000662:	f7ff fe09 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeTime_AddresInEEprom, SettingsDataFactory.ChargeTime);
 8000666:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800066a:	f7ff fe05 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.LowVoltage_AddresInEEprom, SettingsDataFactory.LowVoltage);
 800066e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000672:	f7ff fe01 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.MaxVoltage_AddresInEEprom, SettingsDataFactory.MaxVoltage);
 8000676:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800067a:	f7ff fdfd 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_Chrg_time_AddresInEEprom, SettingsDataFactory.Swing_Chrg_time);
 800067e:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000682:	f7ff fdf9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_DChrg_time_AddresInEEprom, SettingsDataFactory.Swing_DChrg_time);
 8000686:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800068a:	f7ff fdf5 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
 800068e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000692:	f7ff fdf1 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
 8000696:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800069a:	f7ff fded 	bl	8000278 <flash_write>
	logDebug("SettingsFactoryWriteToFlash ");
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <SettingsFactoryWriteToFlash+0x64>)
 80006a0:	f004 ff80 	bl	80055a4 <printToBufferWithoutEndUART1>
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <SettingsFactoryWriteToFlash+0x68>)
 80006a6:	f004 ff17 	bl	80054d8 <printToBufferUART1>
}
 80006aa:	bd10      	pop	{r4, pc}
 80006ac:	2000019c 	.word	0x2000019c
 80006b0:	08005c58 	.word	0x08005c58
 80006b4:	08005d39 	.word	0x08005d39

080006b8 <SettingsReadFromFlash>:
uint8_t SettingsReadFromFlash(void)
{
 80006b8:	b510      	push	{r4, lr}
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006ba:	4c22      	ldr	r4, [pc, #136]	; (8000744 <SettingsReadFromFlash+0x8c>)
 80006bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c0:	2100      	movs	r1, #0
 80006c2:	6860      	ldr	r0, [r4, #4]
 80006c4:	f7ff fe42 	bl	800034c <flash_read>
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006c8:	220a      	movs	r2, #10
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006ca:	6020      	str	r0, [r4, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006cc:	2101      	movs	r1, #1
 80006ce:	68e0      	ldr	r0, [r4, #12]
 80006d0:	f7ff fe3c 	bl	800034c <flash_read>
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006d8:	60a0      	str	r0, [r4, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006da:	2101      	movs	r1, #1
 80006dc:	6960      	ldr	r0, [r4, #20]
 80006de:	f7ff fe35 	bl	800034c <flash_read>
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006e2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006e6:	6120      	str	r0, [r4, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006e8:	2101      	movs	r1, #1
 80006ea:	69e0      	ldr	r0, [r4, #28]
 80006ec:	f7ff fe2e 	bl	800034c <flash_read>
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 80006f0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f4:	61a0      	str	r0, [r4, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 80006f6:	2101      	movs	r1, #1
 80006f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80006fa:	f7ff fe27 	bl	800034c <flash_read>
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 80006fe:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000702:	6220      	str	r0, [r4, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000704:	2100      	movs	r1, #0
 8000706:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000708:	f7ff fe20 	bl	800034c <flash_read>
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800070c:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000710:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000712:	2100      	movs	r1, #0
 8000714:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000716:	f7ff fe19 	bl	800034c <flash_read>
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800071a:	2264      	movs	r2, #100	; 0x64
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800071c:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800071e:	2100      	movs	r1, #0
 8000720:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000722:	f7ff fe13 	bl	800034c <flash_read>
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000726:	2203      	movs	r2, #3
 8000728:	2101      	movs	r1, #1
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072a:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 800072c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800072e:	f7ff fe0d 	bl	800034c <flash_read>
 8000732:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <SettingsReadFromFlash+0x90>)
 8000736:	f004 ff35 	bl	80055a4 <printToBufferWithoutEndUART1>
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <SettingsReadFromFlash+0x94>)
 800073c:	f004 fecc 	bl	80054d8 <printToBufferUART1>
}
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop
 8000744:	20000154 	.word	0x20000154
 8000748:	08005c58 	.word	0x08005c58
 800074c:	08005d56 	.word	0x08005d56

08000750 <SettingsReadFromFlashForVerify>:
uint8_t SettingsReadFromFlashForVerify(void)
{
 8000750:	b510      	push	{r4, lr}
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000752:	4c22      	ldr	r4, [pc, #136]	; (80007dc <SettingsReadFromFlashForVerify+0x8c>)
 8000754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000758:	2100      	movs	r1, #0
 800075a:	6860      	ldr	r0, [r4, #4]
 800075c:	f7ff fdf6 	bl	800034c <flash_read>
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000760:	220a      	movs	r2, #10
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000762:	6020      	str	r0, [r4, #0]
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000764:	2101      	movs	r1, #1
 8000766:	68e0      	ldr	r0, [r4, #12]
 8000768:	f7ff fdf0 	bl	800034c <flash_read>
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800076c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000770:	60a0      	str	r0, [r4, #8]
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000772:	2101      	movs	r1, #1
 8000774:	6960      	ldr	r0, [r4, #20]
 8000776:	f7ff fde9 	bl	800034c <flash_read>
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800077a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800077e:	6120      	str	r0, [r4, #16]
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000780:	2101      	movs	r1, #1
 8000782:	69e0      	ldr	r0, [r4, #28]
 8000784:	f7ff fde2 	bl	800034c <flash_read>
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000788:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800078c:	61a0      	str	r0, [r4, #24]
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800078e:	2101      	movs	r1, #1
 8000790:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000792:	f7ff fddb 	bl	800034c <flash_read>
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000796:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800079a:	6220      	str	r0, [r4, #32]
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 800079c:	2100      	movs	r1, #0
 800079e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007a0:	f7ff fdd4 	bl	800034c <flash_read>
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007a4:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007a8:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007aa:	2100      	movs	r1, #0
 80007ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80007ae:	f7ff fdcd 	bl	800034c <flash_read>
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007b2:	2264      	movs	r2, #100	; 0x64
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007b4:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007b6:	2100      	movs	r1, #0
 80007b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007ba:	f7ff fdc7 	bl	800034c <flash_read>
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007be:	2203      	movs	r2, #3
 80007c0:	2101      	movs	r1, #1
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c2:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80007c6:	f7ff fdc1 	bl	800034c <flash_read>
 80007ca:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlashForVerify ");
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <SettingsReadFromFlashForVerify+0x90>)
 80007ce:	f004 fee9 	bl	80055a4 <printToBufferWithoutEndUART1>
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <SettingsReadFromFlashForVerify+0x94>)
 80007d4:	f004 fe80 	bl	80054d8 <printToBufferUART1>
}
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	bf00      	nop
 80007dc:	200001e4 	.word	0x200001e4
 80007e0:	08005c58 	.word	0x08005c58
 80007e4:	08005d6d 	.word	0x08005d6d

080007e8 <DataWhenPowerOffWriteToFlash>:
//===============
uint8_t DataWhenPowerOffWriteToFlash(void)
{
 80007e8:	b538      	push	{r3, r4, r5, lr}
	logDebugD("Write C maH : ",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue,0);
 80007ea:	4d12      	ldr	r5, [pc, #72]	; (8000834 <DataWhenPowerOffWriteToFlash+0x4c>)
 80007ec:	4c12      	ldr	r4, [pc, #72]	; (8000838 <DataWhenPowerOffWriteToFlash+0x50>)
 80007ee:	4628      	mov	r0, r5
 80007f0:	f004 fed8 	bl	80055a4 <printToBufferWithoutEndUART1>
 80007f4:	2200      	movs	r2, #0
 80007f6:	68a1      	ldr	r1, [r4, #8]
 80007f8:	4810      	ldr	r0, [pc, #64]	; (800083c <DataWhenPowerOffWriteToFlash+0x54>)
 80007fa:	f004 ff11 	bl	8005620 <printToBufferUART1D>
	flash_erase_page( SaveDataWhenPowerOff.CRC_AddresInEEprom);
 80007fe:	6860      	ldr	r0, [r4, #4]
 8000800:	f7ff fd06 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOff.CRC_AddresInEEprom, SaveDataWhenPowerOff.CRC_data);
 8000804:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000808:	f7ff fd36 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue);
 800080c:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000810:	f7ff fd32 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent);
 8000814:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000818:	f7ff fd2e 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOff.OutState_AddresInEEprom, SaveDataWhenPowerOff.OutState);
 800081c:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000820:	f7ff fd2a 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOffWriteToFlash ");
 8000824:	4628      	mov	r0, r5
 8000826:	f004 febd 	bl	80055a4 <printToBufferWithoutEndUART1>
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <DataWhenPowerOffWriteToFlash+0x58>)
 800082c:	f004 fe54 	bl	80054d8 <printToBufferUART1>
}
 8000830:	bd38      	pop	{r3, r4, r5, pc}
 8000832:	bf00      	nop
 8000834:	08005c58 	.word	0x08005c58
 8000838:	200000f4 	.word	0x200000f4
 800083c:	08005d8d 	.word	0x08005d8d
 8000840:	08005d9c 	.word	0x08005d9c

08000844 <DataWhenPowerOff_Factory_WriteToFlash>:
uint8_t DataWhenPowerOff_Factory_WriteToFlash(void)
{
 8000844:	b510      	push	{r4, lr}
	flash_erase_page( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom);
 8000846:	4c0d      	ldr	r4, [pc, #52]	; (800087c <DataWhenPowerOff_Factory_WriteToFlash+0x38>)
 8000848:	6860      	ldr	r0, [r4, #4]
 800084a:	f7ff fce1 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom, SaveDataWhenPowerOffFactory.CRC_data);
 800084e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000852:	f7ff fd11 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargePreviousValue);
 8000856:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800085a:	f7ff fd0d 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
 800085e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000862:	f7ff fd09 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
 8000866:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800086a:	f7ff fd05 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <DataWhenPowerOff_Factory_WriteToFlash+0x3c>)
 8000870:	f004 fe98 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <DataWhenPowerOff_Factory_WriteToFlash+0x40>)
 8000876:	f004 fe2f 	bl	80054d8 <printToBufferUART1>
}
 800087a:	bd10      	pop	{r4, pc}
 800087c:	20000114 	.word	0x20000114
 8000880:	08005c58 	.word	0x08005c58
 8000884:	08005dba 	.word	0x08005dba

08000888 <DataWhenPowerOffReadFromFlash>:
uint8_t DataWhenPowerOffReadFromFlash(void)
{
 8000888:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800088a:	4c11      	ldr	r4, [pc, #68]	; (80008d0 <DataWhenPowerOffReadFromFlash+0x48>)
 800088c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000890:	2100      	movs	r1, #0
 8000892:	6860      	ldr	r0, [r4, #4]
 8000894:	f7ff fd5a 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000898:	4d0e      	ldr	r5, [pc, #56]	; (80008d4 <DataWhenPowerOffReadFromFlash+0x4c>)
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800089a:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800089c:	462a      	mov	r2, r5
 800089e:	2100      	movs	r1, #0
 80008a0:	68e0      	ldr	r0, [r4, #12]
 80008a2:	f7ff fd53 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008a6:	462a      	mov	r2, r5
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a8:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008aa:	2100      	movs	r1, #0
 80008ac:	6960      	ldr	r0, [r4, #20]
 80008ae:	f7ff fd4d 	bl	800034c <flash_read>
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2100      	movs	r1, #0
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008b6:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 80008b8:	69e0      	ldr	r0, [r4, #28]
 80008ba:	f7ff fd47 	bl	800034c <flash_read>
 80008be:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <DataWhenPowerOffReadFromFlash+0x50>)
 80008c2:	f004 fe6f 	bl	80055a4 <printToBufferWithoutEndUART1>
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <DataWhenPowerOffReadFromFlash+0x54>)
 80008c8:	f004 fe06 	bl	80054d8 <printToBufferUART1>
}
 80008cc:	bd38      	pop	{r3, r4, r5, pc}
 80008ce:	bf00      	nop
 80008d0:	200000f4 	.word	0x200000f4
 80008d4:	ee6b2800 	.word	0xee6b2800
 80008d8:	08005c58 	.word	0x08005c58
 80008dc:	08005de1 	.word	0x08005de1

080008e0 <DataWhenPowerOffReadFromFlashForVerify>:
uint8_t DataWhenPowerOffReadFromFlashForVerify(void)
{
 80008e0:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 80008e2:	4c11      	ldr	r4, [pc, #68]	; (8000928 <DataWhenPowerOffReadFromFlashForVerify+0x48>)
 80008e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e8:	2100      	movs	r1, #0
 80008ea:	6860      	ldr	r0, [r4, #4]
 80008ec:	f7ff fd2e 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008f0:	4d0e      	ldr	r5, [pc, #56]	; (800092c <DataWhenPowerOffReadFromFlashForVerify+0x4c>)
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 80008f2:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008f4:	462a      	mov	r2, r5
 80008f6:	2100      	movs	r1, #0
 80008f8:	68e0      	ldr	r0, [r4, #12]
 80008fa:	f7ff fd27 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008fe:	462a      	mov	r2, r5
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000900:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000902:	2100      	movs	r1, #0
 8000904:	6960      	ldr	r0, [r4, #20]
 8000906:	f7ff fd21 	bl	800034c <flash_read>
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 800090a:	2201      	movs	r2, #1
 800090c:	2100      	movs	r1, #0
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800090e:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 8000910:	69e0      	ldr	r0, [r4, #28]
 8000912:	f7ff fd1b 	bl	800034c <flash_read>
 8000916:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlashForVerify ");
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <DataWhenPowerOffReadFromFlashForVerify+0x50>)
 800091a:	f004 fe43 	bl	80055a4 <printToBufferWithoutEndUART1>
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <DataWhenPowerOffReadFromFlashForVerify+0x54>)
 8000920:	f004 fdda 	bl	80054d8 <printToBufferUART1>
}
 8000924:	bd38      	pop	{r3, r4, r5, pc}
 8000926:	bf00      	nop
 8000928:	20000134 	.word	0x20000134
 800092c:	ee6b2800 	.word	0xee6b2800
 8000930:	08005c58 	.word	0x08005c58
 8000934:	08005e00 	.word	0x08005e00

08000938 <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 8000938:	b570      	push	{r4, r5, r6, lr}
		EEpromReadStatus = 1;
 800093a:	2401      	movs	r4, #1
 800093c:	4d0e      	ldr	r5, [pc, #56]	; (8000978 <ReadFromFlash+0x40>)
 800093e:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
	    __disable_irq();

	    DataWhenPowerOffReadFromFlash();
 8000942:	f7ff ffa1 	bl	8000888 <DataWhenPowerOffReadFromFlash>
	    SettingsReadFromFlash();
 8000946:	f7ff feb7 	bl	80006b8 <SettingsReadFromFlash>
	    CalibrationReadFromFlash();
 800094a:	f7ff fda5 	bl	8000498 <CalibrationReadFromFlash>
  __ASM volatile ("cpsie i" : : : "memory");
 800094e:	b662      	cpsie	i


		__enable_irq();
		if (EEpromReadStatus == 0)
 8000950:	782e      	ldrb	r6, [r5, #0]
		{
			logDebug("Read from EEprom - FAIL ");
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <ReadFromFlash+0x44>)
		if (EEpromReadStatus == 0)
 8000954:	b93e      	cbnz	r6, 8000966 <ReadFromFlash+0x2e>
			logDebug("Read from EEprom - FAIL ");
 8000956:	f004 fe25 	bl	80055a4 <printToBufferWithoutEndUART1>
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <ReadFromFlash+0x48>)
 800095c:	f004 fdbc 	bl	80054d8 <printToBufferUART1>
			EEpromReadStatus = 1;
 8000960:	702c      	strb	r4, [r5, #0]
		{
			logDebug("Read from EEprom - SUCCESS");
			EEpromReadStatus = 1;
			return 1;
		}
}
 8000962:	4630      	mov	r0, r6
 8000964:	bd70      	pop	{r4, r5, r6, pc}
			logDebug("Read from EEprom - SUCCESS");
 8000966:	f004 fe1d 	bl	80055a4 <printToBufferWithoutEndUART1>
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <ReadFromFlash+0x4c>)
 800096c:	f004 fdb4 	bl	80054d8 <printToBufferUART1>
			return 1;
 8000970:	4626      	mov	r6, r4
			EEpromReadStatus = 1;
 8000972:	702c      	strb	r4, [r5, #0]
			return 1;
 8000974:	e7f5      	b.n	8000962 <ReadFromFlash+0x2a>
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	08005c58 	.word	0x08005c58
 8000980:	08005e28 	.word	0x08005e28
 8000984:	08005e41 	.word	0x08005e41

08000988 <CalcCRC8>:



char CalcCRC8(char *Ptr, char Num, char CRC1)
{
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	4614      	mov	r4, r2
 800098c:	b0c0      	sub	sp, #256	; 0x100
 800098e:	4606      	mov	r6, r0
 8000990:	460d      	mov	r5, r1
   const char CrcTable[256] = {
 8000992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000996:	4668      	mov	r0, sp
 8000998:	4907      	ldr	r1, [pc, #28]	; (80009b8 <CalcCRC8+0x30>)
 800099a:	f005 f8bb 	bl	8005b14 <memcpy>
 800099e:	4620      	mov	r0, r4
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 80009a0:	f816 2b01 	ldrb.w	r2, [r6], #1
 80009a4:	3d01      	subs	r5, #1
 80009a6:	4042      	eors	r2, r0
 80009a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80009ac:	f81d 0002 	ldrb.w	r0, [sp, r2]
 80009b0:	d1f6      	bne.n	80009a0 <CalcCRC8+0x18>
  return CRC1;
}
 80009b2:	b040      	add	sp, #256	; 0x100
 80009b4:	bd70      	pop	{r4, r5, r6, pc}
 80009b6:	bf00      	nop
 80009b8:	08005b58 	.word	0x08005b58

080009bc <CalibrationWriteToFlash_CRC>:
{
 80009bc:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80009be:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationData)+4,((unsigned char)sizeof(CalibrationData))-4,0);
 80009c0:	4d14      	ldr	r5, [pc, #80]	; (8000a14 <CalibrationWriteToFlash_CRC+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	214c      	movs	r1, #76	; 0x4c
 80009c6:	4628      	mov	r0, r5
 80009c8:	f7ff ffde 	bl	8000988 <CalcCRC8>
 80009cc:	4604      	mov	r4, r0
	CalibrationData.CRC_data = CRC_Calibration;
 80009ce:	f845 0c04 	str.w	r0, [r5, #-4]
	flash_unlock();
 80009d2:	f7ff fc3d 	bl	8000250 <flash_unlock>
	CalibrationWriteToFlash();
 80009d6:	f7ff fceb 	bl	80003b0 <CalibrationWriteToFlash>
	CalibrationReadFromFlashForVerify();
 80009da:	f7ff fdaf 	bl	800053c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 80009de:	2200      	movs	r2, #0
 80009e0:	214c      	movs	r1, #76	; 0x4c
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <CalibrationWriteToFlash_CRC+0x5c>)
 80009e4:	f7ff ffd0 	bl	8000988 <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 80009e8:	4284      	cmp	r4, r0
		logDebug("Calibration write to Flash success ");
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <CalibrationWriteToFlash_CRC+0x60>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 80009ec:	d109      	bne.n	8000a02 <CalibrationWriteToFlash_CRC+0x46>
		logDebug("Calibration write to Flash success ");
 80009ee:	f004 fdd9 	bl	80055a4 <printToBufferWithoutEndUART1>
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <CalibrationWriteToFlash_CRC+0x64>)
 80009f4:	f004 fd70 	bl	80054d8 <printToBufferUART1>
	flash_lock();
 80009f8:	f7ff fc36 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80009fc:	b662      	cpsie	i
}
 80009fe:	2001      	movs	r0, #1
 8000a00:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Calibration write to Flash Fail, try again... ");
 8000a02:	f004 fdcf 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <CalibrationWriteToFlash_CRC+0x68>)
 8000a08:	f004 fd66 	bl	80054d8 <printToBufferUART1>
		CalibrationWriteToFlash();
 8000a0c:	f7ff fcd0 	bl	80003b0 <CalibrationWriteToFlash>
 8000a10:	e7f2      	b.n	80009f8 <CalibrationWriteToFlash_CRC+0x3c>
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	200000a8 	.word	0x200000a8
 8000a1c:	08005c58 	.word	0x08005c58
 8000a20:	08005e81 	.word	0x08005e81
 8000a24:	08005ea6 	.word	0x08005ea6

08000a28 <SettingsWriteToFlash_CRC>:
{
 8000a28:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2a:	b672      	cpsid	i
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsData)+4,((unsigned char)sizeof(SettingsData))-4,0);
 8000a2c:	4d24      	ldr	r5, [pc, #144]	; (8000ac0 <SettingsWriteToFlash_CRC+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2144      	movs	r1, #68	; 0x44
 8000a32:	4628      	mov	r0, r5
 8000a34:	f7ff ffa8 	bl	8000988 <CalcCRC8>
 8000a38:	4604      	mov	r4, r0
	logDebugD("CRC is : ",CRC_Settings,0);
 8000a3a:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <SettingsWriteToFlash_CRC+0x9c>)
 8000a3c:	f004 fdb2 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000a40:	2200      	movs	r2, #0
 8000a42:	4621      	mov	r1, r4
 8000a44:	4820      	ldr	r0, [pc, #128]	; (8000ac8 <SettingsWriteToFlash_CRC+0xa0>)
 8000a46:	f004 fdeb 	bl	8005620 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsData))-4,0);
 8000a4a:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <SettingsWriteToFlash_CRC+0x9c>)
 8000a4c:	f004 fdaa 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000a50:	2200      	movs	r2, #0
 8000a52:	2144      	movs	r1, #68	; 0x44
 8000a54:	481d      	ldr	r0, [pc, #116]	; (8000acc <SettingsWriteToFlash_CRC+0xa4>)
 8000a56:	f004 fde3 	bl	8005620 <printToBufferUART1D>
	SettingsData.CRC_data = CRC_Settings;
 8000a5a:	f845 4c04 	str.w	r4, [r5, #-4]
	flash_unlock();
 8000a5e:	f7ff fbf7 	bl	8000250 <flash_unlock>
	SettingsWriteToFlash();
 8000a62:	f7ff fdbd 	bl	80005e0 <SettingsWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000a66:	f7ff fe73 	bl	8000750 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2144      	movs	r1, #68	; 0x44
 8000a6e:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <SettingsWriteToFlash_CRC+0xa8>)
 8000a70:	f7ff ff8a 	bl	8000988 <CalcCRC8>
 8000a74:	4605      	mov	r5, r0
	logDebugD("CRC is : ",CRC_SettingsVerify,0);
 8000a76:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <SettingsWriteToFlash_CRC+0x9c>)
 8000a78:	f004 fd94 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4629      	mov	r1, r5
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <SettingsWriteToFlash_CRC+0xa0>)
 8000a82:	f004 fdcd 	bl	8005620 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a86:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <SettingsWriteToFlash_CRC+0x9c>)
 8000a88:	f004 fd8c 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000a8c:	480f      	ldr	r0, [pc, #60]	; (8000acc <SettingsWriteToFlash_CRC+0xa4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2144      	movs	r1, #68	; 0x44
 8000a92:	f004 fdc5 	bl	8005620 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000a96:	42ac      	cmp	r4, r5
		logDebug("Settings write to Flash success ");
 8000a98:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <SettingsWriteToFlash_CRC+0x9c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000a9a:	d109      	bne.n	8000ab0 <SettingsWriteToFlash_CRC+0x88>
		logDebug("Settings write to Flash success ");
 8000a9c:	f004 fd82 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <SettingsWriteToFlash_CRC+0xac>)
 8000aa2:	f004 fd19 	bl	80054d8 <printToBufferUART1>
	flash_lock();
 8000aa6:	f7ff fbdf 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aaa:	b662      	cpsie	i
}
 8000aac:	2001      	movs	r0, #1
 8000aae:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Settings write to Flash Fail, try again... ");
 8000ab0:	f004 fd78 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <SettingsWriteToFlash_CRC+0xb0>)
 8000ab6:	f004 fd0f 	bl	80054d8 <printToBufferUART1>
		SettingsWriteToFlash();
 8000aba:	f7ff fd91 	bl	80005e0 <SettingsWriteToFlash>
 8000abe:	e7f2      	b.n	8000aa6 <SettingsWriteToFlash_CRC+0x7e>
 8000ac0:	20000158 	.word	0x20000158
 8000ac4:	08005c58 	.word	0x08005c58
 8000ac8:	08005ed6 	.word	0x08005ed6
 8000acc:	08005ee1 	.word	0x08005ee1
 8000ad0:	200001e8 	.word	0x200001e8
 8000ad4:	08005eed 	.word	0x08005eed
 8000ad8:	08005f0f 	.word	0x08005f0f

08000adc <DataWhenPowerOffWriteToFlash_CRC>:
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000ade:	b672      	cpsid	i
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOff)+4,((unsigned char)sizeof(SaveDataWhenPowerOff))-4,0);
 8000ae0:	4d1c      	ldr	r5, [pc, #112]	; (8000b54 <DataWhenPowerOffWriteToFlash_CRC+0x78>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	211c      	movs	r1, #28
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	f7ff ff4e 	bl	8000988 <CalcCRC8>
 8000aec:	4604      	mov	r4, r0
	SaveDataWhenPowerOff.CRC_data = CRC_DataWhenPowerOff;
 8000aee:	f845 0c04 	str.w	r0, [r5, #-4]
	flash_unlock();
 8000af2:	f7ff fbad 	bl	8000250 <flash_unlock>
	DataWhenPowerOffWriteToFlash();
 8000af6:	f7ff fe77 	bl	80007e8 <DataWhenPowerOffWriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000afa:	f7ff fef1 	bl	80008e0 <DataWhenPowerOffReadFromFlashForVerify>
	logDebugD("stateoutE: ",SaveDataWhenPowerOff.OutState,0);
 8000afe:	4816      	ldr	r0, [pc, #88]	; (8000b58 <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
 8000b00:	f004 fd50 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000b04:	6969      	ldr	r1, [r5, #20]
 8000b06:	2200      	movs	r2, #0
 8000b08:	4814      	ldr	r0, [pc, #80]	; (8000b5c <DataWhenPowerOffWriteToFlash_CRC+0x80>)
	logDebugD("stateoutE: ",SaveDataWhenPowerOffForVerify.OutState,0);
 8000b0a:	4d15      	ldr	r5, [pc, #84]	; (8000b60 <DataWhenPowerOffWriteToFlash_CRC+0x84>)
	logDebugD("stateoutE: ",SaveDataWhenPowerOff.OutState,0);
 8000b0c:	f004 fd88 	bl	8005620 <printToBufferUART1D>
	logDebugD("stateoutE: ",SaveDataWhenPowerOffForVerify.OutState,0);
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
 8000b12:	f004 fd47 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000b16:	2200      	movs	r2, #0
 8000b18:	69a9      	ldr	r1, [r5, #24]
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <DataWhenPowerOffWriteToFlash_CRC+0x80>)
 8000b1c:	f004 fd80 	bl	8005620 <printToBufferUART1D>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	211c      	movs	r1, #28
 8000b24:	1d28      	adds	r0, r5, #4
 8000b26:	f7ff ff2f 	bl	8000988 <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b2a:	4284      	cmp	r4, r0
		logDebug("DataWhenPowerOff write to Flash success ");
 8000b2c:	480a      	ldr	r0, [pc, #40]	; (8000b58 <DataWhenPowerOffWriteToFlash_CRC+0x7c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b2e:	d109      	bne.n	8000b44 <DataWhenPowerOffWriteToFlash_CRC+0x68>
		logDebug("DataWhenPowerOff write to Flash success ");
 8000b30:	f004 fd38 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <DataWhenPowerOffWriteToFlash_CRC+0x88>)
 8000b36:	f004 fccf 	bl	80054d8 <printToBufferUART1>
	flash_lock();
 8000b3a:	f7ff fb95 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b3e:	b662      	cpsie	i
}
 8000b40:	2001      	movs	r0, #1
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
		logDebug("DataWhenPowerOff write to Flash Fail, try again... ");
 8000b44:	f004 fd2e 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <DataWhenPowerOffWriteToFlash_CRC+0x8c>)
 8000b4a:	f004 fcc5 	bl	80054d8 <printToBufferUART1>
		DataWhenPowerOffWriteToFlash();
 8000b4e:	f7ff fe4b 	bl	80007e8 <DataWhenPowerOffWriteToFlash>
 8000b52:	e7f2      	b.n	8000b3a <DataWhenPowerOffWriteToFlash_CRC+0x5e>
 8000b54:	200000f8 	.word	0x200000f8
 8000b58:	08005c58 	.word	0x08005c58
 8000b5c:	08005e5c 	.word	0x08005e5c
 8000b60:	20000134 	.word	0x20000134
 8000b64:	08005f3c 	.word	0x08005f3c
 8000b68:	08005f66 	.word	0x08005f66

08000b6c <FactoryWriteToFlash_CRC>:
{
 8000b6c:	b538      	push	{r3, r4, r5, lr}
	logDebug("FactoryWriteToFlash_CRC");
 8000b6e:	484a      	ldr	r0, [pc, #296]	; (8000c98 <FactoryWriteToFlash_CRC+0x12c>)
 8000b70:	f004 fd18 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000b74:	4849      	ldr	r0, [pc, #292]	; (8000c9c <FactoryWriteToFlash_CRC+0x130>)
 8000b76:	f004 fcaf 	bl	80054d8 <printToBufferUART1>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7a:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000b7c:	4d48      	ldr	r5, [pc, #288]	; (8000ca0 <FactoryWriteToFlash_CRC+0x134>)
	flash_unlock();
 8000b7e:	f7ff fb67 	bl	8000250 <flash_unlock>
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	214c      	movs	r1, #76	; 0x4c
 8000b86:	4628      	mov	r0, r5
 8000b88:	f7ff fefe 	bl	8000988 <CalcCRC8>
 8000b8c:	4604      	mov	r4, r0
	CalibrationDataFactory.CRC_data = CRC_Calibration;
 8000b8e:	f845 0c04 	str.w	r0, [r5, #-4]
	CalibrationFactoryWriteToFlash();
 8000b92:	f7ff fc47 	bl	8000424 <CalibrationFactoryWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000b96:	f7ff fcd1 	bl	800053c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	214c      	movs	r1, #76	; 0x4c
 8000b9e:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <FactoryWriteToFlash_CRC+0x138>)
 8000ba0:	f7ff fef2 	bl	8000988 <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000ba4:	4284      	cmp	r4, r0
		logDebug("FCalibration write to Flash success ");
 8000ba6:	483c      	ldr	r0, [pc, #240]	; (8000c98 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000ba8:	d15d      	bne.n	8000c66 <FactoryWriteToFlash_CRC+0xfa>
		logDebug("FCalibration write to Flash success ");
 8000baa:	f004 fcfb 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000bae:	483e      	ldr	r0, [pc, #248]	; (8000ca8 <FactoryWriteToFlash_CRC+0x13c>)
 8000bb0:	f004 fc92 	bl	80054d8 <printToBufferUART1>
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsDataFactory)+4,((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000bb4:	4d3d      	ldr	r5, [pc, #244]	; (8000cac <FactoryWriteToFlash_CRC+0x140>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2144      	movs	r1, #68	; 0x44
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f7ff fee4 	bl	8000988 <CalcCRC8>
 8000bc0:	4604      	mov	r4, r0
	logDebugD("FCRC is : ",CRC_Settings,0);
 8000bc2:	4835      	ldr	r0, [pc, #212]	; (8000c98 <FactoryWriteToFlash_CRC+0x12c>)
 8000bc4:	f004 fcee 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4621      	mov	r1, r4
 8000bcc:	4838      	ldr	r0, [pc, #224]	; (8000cb0 <FactoryWriteToFlash_CRC+0x144>)
 8000bce:	f004 fd27 	bl	8005620 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000bd2:	4831      	ldr	r0, [pc, #196]	; (8000c98 <FactoryWriteToFlash_CRC+0x12c>)
 8000bd4:	f004 fce6 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2144      	movs	r1, #68	; 0x44
 8000bdc:	4835      	ldr	r0, [pc, #212]	; (8000cb4 <FactoryWriteToFlash_CRC+0x148>)
 8000bde:	f004 fd1f 	bl	8005620 <printToBufferUART1D>
	SettingsDataFactory.CRC_data = CRC_Settings;
 8000be2:	f845 4c04 	str.w	r4, [r5, #-4]
	SettingsFactoryWriteToFlash();
 8000be6:	f7ff fd31 	bl	800064c <SettingsFactoryWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000bea:	f7ff fdb1 	bl	8000750 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2144      	movs	r1, #68	; 0x44
 8000bf2:	4831      	ldr	r0, [pc, #196]	; (8000cb8 <FactoryWriteToFlash_CRC+0x14c>)
 8000bf4:	f7ff fec8 	bl	8000988 <CalcCRC8>
 8000bf8:	4605      	mov	r5, r0
	logDebugD("FCRC is : ",CRC_SettingsVerify,0);
 8000bfa:	4827      	ldr	r0, [pc, #156]	; (8000c98 <FactoryWriteToFlash_CRC+0x12c>)
 8000bfc:	f004 fcd2 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000c00:	2200      	movs	r2, #0
 8000c02:	4629      	mov	r1, r5
 8000c04:	482a      	ldr	r0, [pc, #168]	; (8000cb0 <FactoryWriteToFlash_CRC+0x144>)
 8000c06:	f004 fd0b 	bl	8005620 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000c0a:	4823      	ldr	r0, [pc, #140]	; (8000c98 <FactoryWriteToFlash_CRC+0x12c>)
 8000c0c:	f004 fcca 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000c10:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <FactoryWriteToFlash_CRC+0x148>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	2144      	movs	r1, #68	; 0x44
 8000c16:	f004 fd03 	bl	8005620 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000c1a:	42ac      	cmp	r4, r5
		logDebug("FSettings write to Flash success ");
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000c1e:	d12a      	bne.n	8000c76 <FactoryWriteToFlash_CRC+0x10a>
		logDebug("FSettings write to Flash success ");
 8000c20:	f004 fcc0 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000c24:	4825      	ldr	r0, [pc, #148]	; (8000cbc <FactoryWriteToFlash_CRC+0x150>)
 8000c26:	f004 fc57 	bl	80054d8 <printToBufferUART1>
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffFactory)+4,((unsigned char)sizeof(SaveDataWhenPowerOffFactory))-4,0);
 8000c2a:	4d25      	ldr	r5, [pc, #148]	; (8000cc0 <FactoryWriteToFlash_CRC+0x154>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	211c      	movs	r1, #28
 8000c30:	4628      	mov	r0, r5
 8000c32:	f7ff fea9 	bl	8000988 <CalcCRC8>
 8000c36:	4604      	mov	r4, r0
	SaveDataWhenPowerOffFactory.CRC_data = CRC_DataWhenPowerOff;
 8000c38:	f845 0c04 	str.w	r0, [r5, #-4]
	DataWhenPowerOff_Factory_WriteToFlash();
 8000c3c:	f7ff fe02 	bl	8000844 <DataWhenPowerOff_Factory_WriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000c40:	f7ff fe4e 	bl	80008e0 <DataWhenPowerOffReadFromFlashForVerify>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	211c      	movs	r1, #28
 8000c48:	481e      	ldr	r0, [pc, #120]	; (8000cc4 <FactoryWriteToFlash_CRC+0x158>)
 8000c4a:	f7ff fe9d 	bl	8000988 <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000c4e:	4284      	cmp	r4, r0
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000c52:	d118      	bne.n	8000c86 <FactoryWriteToFlash_CRC+0x11a>
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000c54:	f004 fca6 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000c58:	481b      	ldr	r0, [pc, #108]	; (8000cc8 <FactoryWriteToFlash_CRC+0x15c>)
 8000c5a:	f004 fc3d 	bl	80054d8 <printToBufferUART1>
	flash_lock();
 8000c5e:	f7ff fb03 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c62:	b662      	cpsie	i
}
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("FCalibration write to Flash Fail, try again... ");
 8000c66:	f004 fc9d 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000c6a:	4818      	ldr	r0, [pc, #96]	; (8000ccc <FactoryWriteToFlash_CRC+0x160>)
 8000c6c:	f004 fc34 	bl	80054d8 <printToBufferUART1>
		CalibrationFactoryWriteToFlash();
 8000c70:	f7ff fbd8 	bl	8000424 <CalibrationFactoryWriteToFlash>
 8000c74:	e79e      	b.n	8000bb4 <FactoryWriteToFlash_CRC+0x48>
		logDebug("FSettings write to Flash Fail, try again... ");
 8000c76:	f004 fc95 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000c7a:	4815      	ldr	r0, [pc, #84]	; (8000cd0 <FactoryWriteToFlash_CRC+0x164>)
 8000c7c:	f004 fc2c 	bl	80054d8 <printToBufferUART1>
		SettingsFactoryWriteToFlash();
 8000c80:	f7ff fce4 	bl	800064c <SettingsFactoryWriteToFlash>
 8000c84:	e7d1      	b.n	8000c2a <FactoryWriteToFlash_CRC+0xbe>
		logDebug("FDataWhenPowerOff write to Flash Fail, try again... ");
 8000c86:	f004 fc8d 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <FactoryWriteToFlash_CRC+0x168>)
 8000c8c:	f004 fc24 	bl	80054d8 <printToBufferUART1>
		DataWhenPowerOff_Factory_WriteToFlash();
 8000c90:	f7ff fdd8 	bl	8000844 <DataWhenPowerOff_Factory_WriteToFlash>
 8000c94:	e7e3      	b.n	8000c5e <FactoryWriteToFlash_CRC+0xf2>
 8000c96:	bf00      	nop
 8000c98:	08005c58 	.word	0x08005c58
 8000c9c:	08005e68 	.word	0x08005e68
 8000ca0:	20000058 	.word	0x20000058
 8000ca4:	200000a8 	.word	0x200000a8
 8000ca8:	08005e80 	.word	0x08005e80
 8000cac:	200001a0 	.word	0x200001a0
 8000cb0:	08005ed5 	.word	0x08005ed5
 8000cb4:	08005ee0 	.word	0x08005ee0
 8000cb8:	200001e8 	.word	0x200001e8
 8000cbc:	08005eec 	.word	0x08005eec
 8000cc0:	20000118 	.word	0x20000118
 8000cc4:	20000138 	.word	0x20000138
 8000cc8:	08005f3b 	.word	0x08005f3b
 8000ccc:	08005ea5 	.word	0x08005ea5
 8000cd0:	08005f0e 	.word	0x08005f0e
 8000cd4:	08005f65 	.word	0x08005f65

08000cd8 <Generation_Coefficients_R_A_B>:
		{150,500}
};
void Generation_Coefficients_R_A_B()
{
	int8_t i;
	for (i=0;i<(TLT-1);i++)
 8000cd8:	4917      	ldr	r1, [pc, #92]	; (8000d38 <Generation_Coefficients_R_A_B+0x60>)
 8000cda:	4818      	ldr	r0, [pc, #96]	; (8000d3c <Generation_Coefficients_R_A_B+0x64>)
{
 8000cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		Temp_R_A_B[i].R = T_Table[i].R;
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000ce0:	f242 7c10 	movw	ip, #10000	; 0x2710
{
 8000ce4:	2400      	movs	r4, #0
 8000ce6:	460e      	mov	r6, r1
 8000ce8:	4605      	mov	r5, r0
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000cea:	4f15      	ldr	r7, [pc, #84]	; (8000d40 <Generation_Coefficients_R_A_B+0x68>)
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000cec:	f9b1 e000 	ldrsh.w	lr, [r1]
 8000cf0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
		Temp_R_A_B[i].R = T_Table[i].R;
 8000cf4:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000cf8:	eba2 020e 	sub.w	r2, r2, lr
 8000cfc:	fb0c f202 	mul.w	r2, ip, r2
 8000d00:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8000d04:	3401      	adds	r4, #1
 8000d06:	eba3 0308 	sub.w	r3, r3, r8
 8000d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d0e:	6043      	str	r3, [r0, #4]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000d10:	fb03 f308 	mul.w	r3, r3, r8
 8000d14:	fb93 f3f7 	sdiv	r3, r3, r7
	for (i=0;i<(TLT-1);i++)
 8000d18:	2c07      	cmp	r4, #7
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000d1a:	4473      	add	r3, lr
		Temp_R_A_B[i].R = T_Table[i].R;
 8000d1c:	f8c0 8000 	str.w	r8, [r0]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000d20:	6083      	str	r3, [r0, #8]
	for (i=0;i<(TLT-1);i++)
 8000d22:	f101 0104 	add.w	r1, r1, #4
 8000d26:	f100 000c 	add.w	r0, r0, #12
 8000d2a:	d1df      	bne.n	8000cec <Generation_Coefficients_R_A_B+0x14>
	}
	Temp_R_A_B[i].R = T_Table[i].R;
 8000d2c:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
 8000d30:	656b      	str	r3, [r5, #84]	; 0x54
	    c=(Temp_R_A_B[i].R-Temp_R_A_B[i+1].R)/2+Temp_R_A_B[i+1].R;
	    Print_to_USART1_d(c,"c= ",0);
	    Print_to_USART1_d(Temp_R_A_B[i].A10000*c/10000+Temp_R_A_B[i].B,"T:",0);
	}
*/
}
 8000d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d36:	bf00      	nop
 8000d38:	2000022c 	.word	0x2000022c
 8000d3c:	200007f8 	.word	0x200007f8
 8000d40:	ffffd8f0 	.word	0xffffd8f0

08000d44 <GetTemperature>:
int32_t GetTemperature(int32_t Rtemp)
{
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <GetTemperature+0x48>)
{
 8000d46:	b510      	push	{r4, lr}
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	db1a      	blt.n	8000d84 <GetTemperature+0x40>
 8000d4e:	4619      	mov	r1, r3
 8000d50:	2200      	movs	r2, #0

	int8_t i;
	for (i=0; i<(TLT-1);i++)
	{
		if (Rtemp <= Temp_R_A_B[i].R  && Rtemp > Temp_R_A_B[i+1].R)
 8000d52:	680c      	ldr	r4, [r1, #0]
 8000d54:	4284      	cmp	r4, r0
 8000d56:	db0e      	blt.n	8000d76 <GetTemperature+0x32>
 8000d58:	68cc      	ldr	r4, [r1, #12]
 8000d5a:	4284      	cmp	r4, r0
 8000d5c:	da0b      	bge.n	8000d76 <GetTemperature+0x32>
		{
			return Rtemp*Temp_R_A_B[i].A10000/10000+Temp_R_A_B[i].B;
 8000d5e:	210c      	movs	r1, #12
 8000d60:	fb01 3202 	mla	r2, r1, r2, r3
 8000d64:	6853      	ldr	r3, [r2, #4]
 8000d66:	4358      	muls	r0, r3
 8000d68:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d6c:	fb90 f0f3 	sdiv	r0, r0, r3
 8000d70:	6893      	ldr	r3, [r2, #8]
 8000d72:	4418      	add	r0, r3

		}
	}
	return 200;
}
 8000d74:	bd10      	pop	{r4, pc}
	for (i=0; i<(TLT-1);i++)
 8000d76:	3201      	adds	r2, #1
 8000d78:	2a07      	cmp	r2, #7
 8000d7a:	f101 010c 	add.w	r1, r1, #12
 8000d7e:	d1e8      	bne.n	8000d52 <GetTemperature+0xe>
	return 200;
 8000d80:	20c8      	movs	r0, #200	; 0xc8
 8000d82:	e7f7      	b.n	8000d74 <GetTemperature+0x30>
	if (Rtemp>Temp_R_A_B[0].R) return -10;
 8000d84:	f06f 0009 	mvn.w	r0, #9
 8000d88:	e7f4      	b.n	8000d74 <GetTemperature+0x30>
 8000d8a:	bf00      	nop
 8000d8c:	200007f8 	.word	0x200007f8

08000d90 <WriteInLOG>:

void WriteInLOG(char  str [17])
{
 8000d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000d94:	4c5d      	ldr	r4, [pc, #372]	; (8000f0c <WriteInLOG+0x17c>)
{
 8000d96:	4606      	mov	r6, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	f000 fadb 	bl	8001354 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000d9e:	2200      	movs	r2, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000da0:	6827      	ldr	r7, [r4, #0]
 8000da2:	eb07 1307 	add.w	r3, r7, r7, lsl #4
 8000da6:	0139      	lsls	r1, r7, #4
 8000da8:	4423      	add	r3, r4
	for(i=0;number[i]!='\0';i++)
 8000daa:	f810 c002 	ldrb.w	ip, [r0, r2]
 8000dae:	4615      	mov	r5, r2
 8000db0:	3201      	adds	r2, #1
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	f1bc 0f00 	cmp.w	ip, #0
 8000db8:	d11b      	bne.n	8000df2 <WriteInLOG+0x62>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000dba:	19cb      	adds	r3, r1, r7
 8000dbc:	18e0      	adds	r0, r4, r3
 8000dbe:	4405      	add	r5, r0
 8000dc0:	203a      	movs	r0, #58	; 0x3a
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	7128      	strb	r0, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000dc6:	eb04 0c03 	add.w	ip, r4, r3
 8000dca:	1e70      	subs	r0, r6, #1
 8000dcc:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8000dd0:	b2d5      	uxtb	r5, r2
 8000dd2:	b996      	cbnz	r6, 8000dfa <WriteInLOG+0x6a>
 8000dd4:	462a      	mov	r2, r5
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	442b      	add	r3, r5
 8000dda:	4423      	add	r3, r4
	for (;i<16;i++)
 8000ddc:	2a0f      	cmp	r2, #15
 8000dde:	d975      	bls.n	8000ecc <WriteInLOG+0x13c>
 8000de0:	2d10      	cmp	r5, #16
 8000de2:	f1c5 0110 	rsb	r1, r5, #16
 8000de6:	bf88      	it	hi
 8000de8:	2100      	movhi	r1, #0
 8000dea:	440d      	add	r5, r1
 8000dec:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8000df0:	e00e      	b.n	8000e10 <WriteInLOG+0x80>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000df2:	441d      	add	r5, r3
 8000df4:	f885 c004 	strb.w	ip, [r5, #4]
	for(i=0;number[i]!='\0';i++)
 8000df8:	e7d7      	b.n	8000daa <WriteInLOG+0x1a>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000dfa:	2d0f      	cmp	r5, #15
 8000dfc:	d803      	bhi.n	8000e06 <WriteInLOG+0x76>
 8000dfe:	f80c 6002 	strb.w	r6, [ip, r2]
	for(j=0;str[j]!='\0';i++,j++)
 8000e02:	3201      	adds	r2, #1
 8000e04:	e7e2      	b.n	8000dcc <WriteInLOG+0x3c>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e06:	2300      	movs	r3, #0
 8000e08:	4439      	add	r1, r7
 8000e0a:	4421      	add	r1, r4
 8000e0c:	440a      	add	r2, r1
 8000e0e:	7113      	strb	r3, [r2, #4]
	}
	logDebugD("ii: ",i,0);
 8000e10:	483f      	ldr	r0, [pc, #252]	; (8000f10 <WriteInLOG+0x180>)
 8000e12:	f004 fbc7 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000e16:	4629      	mov	r1, r5
 8000e18:	2200      	movs	r2, #0
 8000e1a:	483e      	ldr	r0, [pc, #248]	; (8000f14 <WriteInLOG+0x184>)
 8000e1c:	f004 fc00 	bl	8005620 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8000e26:	4421      	add	r1, r4
 8000e28:	4429      	add	r1, r5
 8000e2a:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000e2c:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000e2e:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e30:	710d      	strb	r5, [r1, #4]
	LoggingData.RecordsQuantity++;
 8000e32:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000e34:	d93e      	bls.n	8000eb4 <WriteInLOG+0x124>
 8000e36:	260a      	movs	r6, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000e38:	462f      	mov	r7, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000e3a:	f04f 0820 	mov.w	r8, #32
			number = itoa(i);
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f000 fa88 	bl	8001354 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000e44:	2300      	movs	r3, #0
				LoggingData.Records[i][k] = number[k];
 8000e46:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 8000e4a:	012a      	lsls	r2, r5, #4
 8000e4c:	4421      	add	r1, r4
			for(k=0;number[k]!='\0';k++)
 8000e4e:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000e52:	469c      	mov	ip, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f1be 0f00 	cmp.w	lr, #0
 8000e5c:	d13b      	bne.n	8000ed6 <WriteInLOG+0x146>
			LoggingData.Records[i][k] = ':';
 8000e5e:	203a      	movs	r0, #58	; 0x3a
 8000e60:	1951      	adds	r1, r2, r5
 8000e62:	4421      	add	r1, r4
 8000e64:	448c      	add	ip, r1
 8000e66:	f88c 0004 	strb.w	r0, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000e6a:	eb06 1006 	add.w	r0, r6, r6, lsl #4
 8000e6e:	4420      	add	r0, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000e70:	eb01 0c03 	add.w	ip, r1, r3
 8000e74:	f89c c004 	ldrb.w	ip, [ip, #4]
 8000e78:	f1bc 0f00 	cmp.w	ip, #0
 8000e7c:	d12f      	bne.n	8000ede <WriteInLOG+0x14e>
			j--;
 8000e7e:	1e58      	subs	r0, r3, #1
 8000e80:	b2c0      	uxtb	r0, r0
 8000e82:	4684      	mov	ip, r0
 8000e84:	1951      	adds	r1, r2, r5
 8000e86:	3104      	adds	r1, #4
 8000e88:	4401      	add	r1, r0
 8000e8a:	4421      	add	r1, r4
			for (;j<16;j++)
 8000e8c:	f1bc 0f0f 	cmp.w	ip, #15
 8000e90:	d934      	bls.n	8000efc <WriteInLOG+0x16c>
			}
			LoggingData.Records[i][j] = '\0';
 8000e92:	2810      	cmp	r0, #16
 8000e94:	f1c3 0311 	rsb	r3, r3, #17
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	bf88      	it	hi
 8000e9c:	2300      	movhi	r3, #0
 8000e9e:	442a      	add	r2, r5
 8000ea0:	4422      	add	r2, r4
 8000ea2:	4402      	add	r2, r0
 8000ea4:	3501      	adds	r5, #1
 8000ea6:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000ea8:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000eaa:	711f      	strb	r7, [r3, #4]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000eac:	f106 0601 	add.w	r6, r6, #1
 8000eb0:	d1c5      	bne.n	8000e3e <WriteInLOG+0xae>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000eb2:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000eb4:	f7ff fa06 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000eb8:	4815      	ldr	r0, [pc, #84]	; (8000f10 <WriteInLOG+0x180>)
 8000eba:	f004 fb73 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000ebe:	6821      	ldr	r1, [r4, #0]
 8000ec0:	2200      	movs	r2, #0
}
 8000ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000ec6:	4814      	ldr	r0, [pc, #80]	; (8000f18 <WriteInLOG+0x188>)
 8000ec8:	f004 bbaa 	b.w	8005620 <printToBufferUART1D>
	for (;i<16;i++)
 8000ecc:	3201      	adds	r2, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000ece:	f803 1b01 	strb.w	r1, [r3], #1
	for (;i<16;i++)
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	e782      	b.n	8000ddc <WriteInLOG+0x4c>
				LoggingData.Records[i][k] = number[k];
 8000ed6:	448c      	add	ip, r1
 8000ed8:	f88c e004 	strb.w	lr, [ip, #4]
			for(k=0;number[k]!='\0';k++)
 8000edc:	e7b7      	b.n	8000e4e <WriteInLOG+0xbe>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000ede:	eb00 0c03 	add.w	ip, r0, r3
				if (i>=10)
 8000ee2:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000ee4:	bf8c      	ite	hi
 8000ee6:	f89c c004 	ldrbhi.w	ip, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000eea:	f89c c005 	ldrbls.w	ip, [ip, #5]
 8000eee:	eb01 0e03 	add.w	lr, r1, r3
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	f88e c004 	strb.w	ip, [lr, #4]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	e7b9      	b.n	8000e70 <WriteInLOG+0xe0>
			for (;j<16;j++)
 8000efc:	f10c 0c01 	add.w	ip, ip, #1
				LoggingData.Records[i][j] = ' ';
 8000f00:	f801 8b01 	strb.w	r8, [r1], #1
			for (;j<16;j++)
 8000f04:	fa5f fc8c 	uxtb.w	ip, ip
 8000f08:	e7c0      	b.n	8000e8c <WriteInLOG+0xfc>
 8000f0a:	bf00      	nop
 8000f0c:	20000878 	.word	0x20000878
 8000f10:	08005c58 	.word	0x08005c58
 8000f14:	08005f9a 	.word	0x08005f9a
 8000f18:	08005f9f 	.word	0x08005f9f

08000f1c <WriteInLOGc>:

void WriteInLOGc(char  str [17],char c)
{
 8000f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000f20:	4c5e      	ldr	r4, [pc, #376]	; (800109c <WriteInLOGc+0x180>)
{
 8000f22:	4680      	mov	r8, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000f24:	6820      	ldr	r0, [r4, #0]
{
 8000f26:	460e      	mov	r6, r1
	number = itoa(LoggingData.RecordsQuantity);
 8000f28:	f000 fa14 	bl	8001354 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000f2c:	2200      	movs	r2, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000f2e:	6827      	ldr	r7, [r4, #0]
 8000f30:	eb07 1307 	add.w	r3, r7, r7, lsl #4
 8000f34:	0139      	lsls	r1, r7, #4
 8000f36:	4423      	add	r3, r4
	for(i=0;number[i]!='\0';i++)
 8000f38:	f810 c002 	ldrb.w	ip, [r0, r2]
 8000f3c:	4615      	mov	r5, r2
 8000f3e:	3201      	adds	r2, #1
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f1bc 0f00 	cmp.w	ip, #0
 8000f46:	d11d      	bne.n	8000f84 <WriteInLOGc+0x68>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = c;
 8000f48:	19cb      	adds	r3, r1, r7
 8000f4a:	18e0      	adds	r0, r4, r3
 8000f4c:	4405      	add	r5, r0
 8000f4e:	3304      	adds	r3, #4
 8000f50:	712e      	strb	r6, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000f52:	f108 30ff 	add.w	r0, r8, #4294967295
 8000f56:	eb04 0e03 	add.w	lr, r4, r3
 8000f5a:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8000f5e:	b2d5      	uxtb	r5, r2
 8000f60:	f1bc 0f00 	cmp.w	ip, #0
 8000f64:	d112      	bne.n	8000f8c <WriteInLOGc+0x70>
 8000f66:	462a      	mov	r2, r5
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000f68:	2120      	movs	r1, #32
 8000f6a:	442b      	add	r3, r5
 8000f6c:	4423      	add	r3, r4
	for (;i<16;i++)
 8000f6e:	2a0f      	cmp	r2, #15
 8000f70:	d975      	bls.n	800105e <WriteInLOGc+0x142>
 8000f72:	2d10      	cmp	r5, #16
 8000f74:	f1c5 0110 	rsb	r1, r5, #16
 8000f78:	bf88      	it	hi
 8000f7a:	2100      	movhi	r1, #0
 8000f7c:	440d      	add	r5, r1
 8000f7e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8000f82:	e00e      	b.n	8000fa2 <WriteInLOGc+0x86>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000f84:	441d      	add	r5, r3
 8000f86:	f885 c004 	strb.w	ip, [r5, #4]
	for(i=0;number[i]!='\0';i++)
 8000f8a:	e7d5      	b.n	8000f38 <WriteInLOGc+0x1c>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000f8c:	2d0f      	cmp	r5, #15
 8000f8e:	d803      	bhi.n	8000f98 <WriteInLOGc+0x7c>
 8000f90:	f80e c002 	strb.w	ip, [lr, r2]
	for(j=0;str[j]!='\0';i++,j++)
 8000f94:	3201      	adds	r2, #1
 8000f96:	e7e0      	b.n	8000f5a <WriteInLOGc+0x3e>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4439      	add	r1, r7
 8000f9c:	4421      	add	r1, r4
 8000f9e:	440a      	add	r2, r1
 8000fa0:	7113      	strb	r3, [r2, #4]
	}
	logDebugD("ii: ",i,0);
 8000fa2:	483f      	ldr	r0, [pc, #252]	; (80010a0 <WriteInLOGc+0x184>)
 8000fa4:	f004 fafe 	bl	80055a4 <printToBufferWithoutEndUART1>
 8000fa8:	4629      	mov	r1, r5
 8000faa:	2200      	movs	r2, #0
 8000fac:	483d      	ldr	r0, [pc, #244]	; (80010a4 <WriteInLOGc+0x188>)
 8000fae:	f004 fb37 	bl	8005620 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8000fb8:	4421      	add	r1, r4
 8000fba:	4429      	add	r1, r5
 8000fbc:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000fbe:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000fc0:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000fc2:	710d      	strb	r5, [r1, #4]
	LoggingData.RecordsQuantity++;
 8000fc4:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000fc6:	d93e      	bls.n	8001046 <WriteInLOGc+0x12a>
 8000fc8:	270a      	movs	r7, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000fca:	46a8      	mov	r8, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000fcc:	f04f 0920 	mov.w	r9, #32
			number = itoa(i);
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f000 f9bf 	bl	8001354 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000fd6:	2300      	movs	r3, #0
				LoggingData.Records[i][k] = number[k];
 8000fd8:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 8000fdc:	012a      	lsls	r2, r5, #4
 8000fde:	4421      	add	r1, r4
			for(k=0;number[k]!='\0';k++)
 8000fe0:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f1be 0f00 	cmp.w	lr, #0
 8000fee:	d13b      	bne.n	8001068 <WriteInLOGc+0x14c>
			LoggingData.Records[i][k] = c;
 8000ff0:	1951      	adds	r1, r2, r5
 8000ff2:	4421      	add	r1, r4
 8000ff4:	448c      	add	ip, r1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000ff6:	eb07 1007 	add.w	r0, r7, r7, lsl #4
			LoggingData.Records[i][k] = c;
 8000ffa:	f88c 6004 	strb.w	r6, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000ffe:	4420      	add	r0, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8001000:	eb01 0c03 	add.w	ip, r1, r3
 8001004:	f89c c004 	ldrb.w	ip, [ip, #4]
 8001008:	f1bc 0f00 	cmp.w	ip, #0
 800100c:	d130      	bne.n	8001070 <WriteInLOGc+0x154>
			j--;
 800100e:	1e58      	subs	r0, r3, #1
 8001010:	b2c0      	uxtb	r0, r0
 8001012:	4684      	mov	ip, r0
 8001014:	1951      	adds	r1, r2, r5
 8001016:	3104      	adds	r1, #4
 8001018:	4401      	add	r1, r0
 800101a:	4421      	add	r1, r4
			for (;j<16;j++)
 800101c:	f1bc 0f0f 	cmp.w	ip, #15
 8001020:	d935      	bls.n	800108e <WriteInLOGc+0x172>
			}
			LoggingData.Records[i][j] = '\0';
 8001022:	2810      	cmp	r0, #16
 8001024:	f1c3 0311 	rsb	r3, r3, #17
 8001028:	b2db      	uxtb	r3, r3
 800102a:	bf88      	it	hi
 800102c:	2300      	movhi	r3, #0
 800102e:	442a      	add	r2, r5
 8001030:	4422      	add	r2, r4
 8001032:	4402      	add	r2, r0
 8001034:	3501      	adds	r5, #1
 8001036:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8001038:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 800103a:	f883 8004 	strb.w	r8, [r3, #4]
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 800103e:	f107 0701 	add.w	r7, r7, #1
 8001042:	d1c5      	bne.n	8000fd0 <WriteInLOGc+0xb4>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8001044:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8001046:	f7ff f93d 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <WriteInLOGc+0x184>)
 800104c:	f004 faaa 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001050:	6821      	ldr	r1, [r4, #0]
 8001052:	2200      	movs	r2, #0
}
 8001054:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <WriteInLOGc+0x18c>)
 800105a:	f004 bae1 	b.w	8005620 <printToBufferUART1D>
	for (;i<16;i++)
 800105e:	3201      	adds	r2, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8001060:	f803 1b01 	strb.w	r1, [r3], #1
	for (;i<16;i++)
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	e782      	b.n	8000f6e <WriteInLOGc+0x52>
				LoggingData.Records[i][k] = number[k];
 8001068:	448c      	add	ip, r1
 800106a:	f88c e004 	strb.w	lr, [ip, #4]
			for(k=0;number[k]!='\0';k++)
 800106e:	e7b7      	b.n	8000fe0 <WriteInLOGc+0xc4>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8001070:	eb00 0c03 	add.w	ip, r0, r3
				if (i>=10)
 8001074:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8001076:	bf8c      	ite	hi
 8001078:	f89c c004 	ldrbhi.w	ip, [ip, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 800107c:	f89c c005 	ldrbls.w	ip, [ip, #5]
 8001080:	eb01 0e03 	add.w	lr, r1, r3
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8001084:	3301      	adds	r3, #1
 8001086:	f88e c004 	strb.w	ip, [lr, #4]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	e7b8      	b.n	8001000 <WriteInLOGc+0xe4>
			for (;j<16;j++)
 800108e:	f10c 0c01 	add.w	ip, ip, #1
				LoggingData.Records[i][j] = ' ';
 8001092:	f801 9b01 	strb.w	r9, [r1], #1
			for (;j<16;j++)
 8001096:	fa5f fc8c 	uxtb.w	ip, ip
 800109a:	e7bf      	b.n	800101c <WriteInLOGc+0x100>
 800109c:	20000878 	.word	0x20000878
 80010a0:	08005c58 	.word	0x08005c58
 80010a4:	08005f9a 	.word	0x08005f9a
 80010a8:	08005f9f 	.word	0x08005f9f

080010ac <delay_us>:
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
	delay_ms(50);
}
void delay_us(uint32_t us)
{
	volatile uint32_t n = 0;
 80010ac:	2300      	movs	r3, #0
{
 80010ae:	b084      	sub	sp, #16
	if (us==1) n=1;//в тактах процесора
 80010b0:	2801      	cmp	r0, #1
	volatile uint32_t n = 0;
 80010b2:	9300      	str	r3, [sp, #0]
	if (us==1) n=1;//в тактах процесора
 80010b4:	d101      	bne.n	80010ba <delay_us+0xe>
	if (us==2) n=2;//в тактах процесора
	if (us==3) n=18;//в тактах процесора
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 80010b6:	9000      	str	r0, [sp, #0]
 80010b8:	e004      	b.n	80010c4 <delay_us+0x18>
	if (us==2) n=2;//в тактах процесора
 80010ba:	2802      	cmp	r0, #2
 80010bc:	d0fb      	beq.n	80010b6 <delay_us+0xa>
	if (us==3) n=18;//в тактах процесора
 80010be:	2803      	cmp	r0, #3
 80010c0:	d01a      	beq.n	80010f8 <delay_us+0x4c>
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 80010c2:	d81c      	bhi.n	80010fe <delay_us+0x52>
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <delay_us+0x64>)
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	9201      	str	r2, [sp, #4]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 80010ca:	9a01      	ldr	r2, [sp, #4]
 80010cc:	9202      	str	r2, [sp, #8]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	9203      	str	r2, [sp, #12]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 80010d2:	9903      	ldr	r1, [sp, #12]
 80010d4:	9a02      	ldr	r2, [sp, #8]
 80010d6:	4291      	cmp	r1, r2
 80010d8:	d304      	bcc.n	80010e4 <delay_us+0x38>
            n0+=SysTick->LOAD+1;
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	9901      	ldr	r1, [sp, #4]
 80010de:	440a      	add	r2, r1
 80010e0:	3201      	adds	r2, #1
 80010e2:	9201      	str	r2, [sp, #4]
        np=nc;
 80010e4:	9a03      	ldr	r2, [sp, #12]
 80010e6:	9202      	str	r2, [sp, #8]
    }while(n0-nc<n);
 80010e8:	9a01      	ldr	r2, [sp, #4]
 80010ea:	9803      	ldr	r0, [sp, #12]
 80010ec:	9900      	ldr	r1, [sp, #0]
 80010ee:	1a12      	subs	r2, r2, r0
 80010f0:	428a      	cmp	r2, r1
 80010f2:	d3ec      	bcc.n	80010ce <delay_us+0x22>
}
 80010f4:	b004      	add	sp, #16
 80010f6:	4770      	bx	lr
	if (us==3) n=18;//в тактах процесора
 80010f8:	2312      	movs	r3, #18
 80010fa:	9300      	str	r3, [sp, #0]
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 80010fc:	e7e2      	b.n	80010c4 <delay_us+0x18>
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <delay_us+0x68>)
 8001100:	4a05      	ldr	r2, [pc, #20]	; (8001118 <delay_us+0x6c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3803      	subs	r0, #3
 8001106:	fbb3 f3f2 	udiv	r3, r3, r2
 800110a:	4358      	muls	r0, r3
 800110c:	e7d3      	b.n	80010b6 <delay_us+0xa>
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010
 8001114:	2000028c 	.word	0x2000028c
 8001118:	000f4240 	.word	0x000f4240

0800111c <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 800111c:	b507      	push	{r0, r1, r2, lr}
 800111e:	9001      	str	r0, [sp, #4]
	while(value>0)
 8001120:	9b01      	ldr	r3, [sp, #4]
 8001122:	b913      	cbnz	r3, 800112a <delay_ms+0xe>
	{
		delay_us(1000);
		value--;
	}
}
 8001124:	b003      	add	sp, #12
 8001126:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_us(1000);
 800112a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112e:	f7ff ffbd 	bl	80010ac <delay_us>
		value--;
 8001132:	9b01      	ldr	r3, [sp, #4]
 8001134:	3b01      	subs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	e7f2      	b.n	8001120 <delay_ms+0x4>
	...

0800113c <InfoToUARTBeforeStart>:
{
 800113c:	b538      	push	{r3, r4, r5, lr}
	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 800113e:	4c68      	ldr	r4, [pc, #416]	; (80012e0 <InfoToUARTBeforeStart+0x1a4>)
 8001140:	4d68      	ldr	r5, [pc, #416]	; (80012e4 <InfoToUARTBeforeStart+0x1a8>)
 8001142:	4620      	mov	r0, r4
 8001144:	f004 fa2e 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001148:	6829      	ldr	r1, [r5, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	4866      	ldr	r0, [pc, #408]	; (80012e8 <InfoToUARTBeforeStart+0x1ac>)
 800114e:	f004 fa67 	bl	8005620 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.Calibration0ValueForCurrent ,0);
 8001152:	4620      	mov	r0, r4
 8001154:	f004 fa26 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001158:	68a9      	ldr	r1, [r5, #8]
 800115a:	2200      	movs	r2, #0
 800115c:	4863      	ldr	r0, [pc, #396]	; (80012ec <InfoToUARTBeforeStart+0x1b0>)
 800115e:	f004 fa5f 	bl	8005620 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent1 =",CalibrationData.Calibration0ValueForCurrent1 ,0);
 8001162:	4620      	mov	r0, r4
 8001164:	f004 fa1e 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001168:	6929      	ldr	r1, [r5, #16]
 800116a:	2200      	movs	r2, #0
 800116c:	4860      	ldr	r0, [pc, #384]	; (80012f0 <InfoToUARTBeforeStart+0x1b4>)
 800116e:	f004 fa57 	bl	8005620 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent =",CalibrationData.CalibrationValueForCurrent ,0);
 8001172:	4620      	mov	r0, r4
 8001174:	f004 fa16 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001178:	69a9      	ldr	r1, [r5, #24]
 800117a:	2200      	movs	r2, #0
 800117c:	485d      	ldr	r0, [pc, #372]	; (80012f4 <InfoToUARTBeforeStart+0x1b8>)
 800117e:	f004 fa4f 	bl	8005620 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent1 =",CalibrationData.CalibrationValueForCurrent1 ,0);
 8001182:	4620      	mov	r0, r4
 8001184:	f004 fa0e 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001188:	6a29      	ldr	r1, [r5, #32]
 800118a:	2200      	movs	r2, #0
 800118c:	485a      	ldr	r0, [pc, #360]	; (80012f8 <InfoToUARTBeforeStart+0x1bc>)
 800118e:	f004 fa47 	bl	8005620 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage =",CalibrationData.CalibrationValueForVoltage ,0);
 8001192:	4620      	mov	r0, r4
 8001194:	f004 fa06 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001198:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800119a:	2200      	movs	r2, #0
 800119c:	4857      	ldr	r0, [pc, #348]	; (80012fc <InfoToUARTBeforeStart+0x1c0>)
 800119e:	f004 fa3f 	bl	8005620 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage1 =",CalibrationData.CalibrationValueForVoltage1 ,0);
 80011a2:	4620      	mov	r0, r4
 80011a4:	f004 f9fe 	bl	80055a4 <printToBufferWithoutEndUART1>
 80011a8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80011aa:	2200      	movs	r2, #0
 80011ac:	4854      	ldr	r0, [pc, #336]	; (8001300 <InfoToUARTBeforeStart+0x1c4>)
 80011ae:	f004 fa37 	bl	8005620 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 80011b2:	4620      	mov	r0, r4
 80011b4:	f004 f9f6 	bl	80055a4 <printToBufferWithoutEndUART1>
 80011b8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80011ba:	2200      	movs	r2, #0
 80011bc:	4851      	ldr	r0, [pc, #324]	; (8001304 <InfoToUARTBeforeStart+0x1c8>)
 80011be:	f004 fa2f 	bl	8005620 <printToBufferUART1D>
	logInfoD("ResistanceComp_Ishunt_Wires =",CalibrationData.ResistanceComp_Ishunt_Wires ,0) ;
 80011c2:	4620      	mov	r0, r4
 80011c4:	f004 f9ee 	bl	80055a4 <printToBufferWithoutEndUART1>
 80011c8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80011ca:	2200      	movs	r2, #0
 80011cc:	484e      	ldr	r0, [pc, #312]	; (8001308 <InfoToUARTBeforeStart+0x1cc>)
 80011ce:	f004 fa27 	bl	8005620 <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 80011d2:	4620      	mov	r0, r4
 80011d4:	f004 f9e6 	bl	80055a4 <printToBufferWithoutEndUART1>
 80011d8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80011da:	2200      	movs	r2, #0
 80011dc:	484b      	ldr	r0, [pc, #300]	; (800130c <InfoToUARTBeforeStart+0x1d0>)
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 80011de:	4d4c      	ldr	r5, [pc, #304]	; (8001310 <InfoToUARTBeforeStart+0x1d4>)
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 80011e0:	f004 fa1e 	bl	8005620 <printToBufferUART1D>
	delay_ms(50);
 80011e4:	2032      	movs	r0, #50	; 0x32
 80011e6:	f7ff ff99 	bl	800111c <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 80011ea:	4620      	mov	r0, r4
 80011ec:	f004 f9da 	bl	80055a4 <printToBufferWithoutEndUART1>
 80011f0:	6829      	ldr	r1, [r5, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	4847      	ldr	r0, [pc, #284]	; (8001314 <InfoToUARTBeforeStart+0x1d8>)
 80011f6:	f004 fa13 	bl	8005620 <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f004 f9d2 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001200:	68a9      	ldr	r1, [r5, #8]
 8001202:	2200      	movs	r2, #0
 8001204:	4844      	ldr	r0, [pc, #272]	; (8001318 <InfoToUARTBeforeStart+0x1dc>)
 8001206:	f004 fa0b 	bl	8005620 <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 800120a:	4620      	mov	r0, r4
 800120c:	f004 f9ca 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001210:	6929      	ldr	r1, [r5, #16]
 8001212:	2200      	movs	r2, #0
 8001214:	4841      	ldr	r0, [pc, #260]	; (800131c <InfoToUARTBeforeStart+0x1e0>)
 8001216:	f004 fa03 	bl	8005620 <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 800121a:	4620      	mov	r0, r4
 800121c:	f004 f9c2 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001220:	69a9      	ldr	r1, [r5, #24]
 8001222:	2200      	movs	r2, #0
 8001224:	483e      	ldr	r0, [pc, #248]	; (8001320 <InfoToUARTBeforeStart+0x1e4>)
 8001226:	f004 f9fb 	bl	8005620 <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 800122a:	4620      	mov	r0, r4
 800122c:	f004 f9ba 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001230:	6a29      	ldr	r1, [r5, #32]
 8001232:	2200      	movs	r2, #0
 8001234:	483b      	ldr	r0, [pc, #236]	; (8001324 <InfoToUARTBeforeStart+0x1e8>)
 8001236:	f004 f9f3 	bl	8005620 <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 800123a:	4620      	mov	r0, r4
 800123c:	f004 f9b2 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001240:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001242:	2200      	movs	r2, #0
 8001244:	4838      	ldr	r0, [pc, #224]	; (8001328 <InfoToUARTBeforeStart+0x1ec>)
 8001246:	f004 f9eb 	bl	8005620 <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 800124a:	4620      	mov	r0, r4
 800124c:	f004 f9aa 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001250:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	4835      	ldr	r0, [pc, #212]	; (800132c <InfoToUARTBeforeStart+0x1f0>)
 8001256:	f004 f9e3 	bl	8005620 <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 800125a:	4620      	mov	r0, r4
 800125c:	f004 f9a2 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001260:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001262:	2200      	movs	r2, #0
 8001264:	4832      	ldr	r0, [pc, #200]	; (8001330 <InfoToUARTBeforeStart+0x1f4>)
 8001266:	f004 f9db 	bl	8005620 <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 800126a:	4620      	mov	r0, r4
 800126c:	f004 f99a 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001270:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001272:	2200      	movs	r2, #0
 8001274:	482f      	ldr	r0, [pc, #188]	; (8001334 <InfoToUARTBeforeStart+0x1f8>)
 8001276:	f004 f9d3 	bl	8005620 <printToBufferUART1D>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 800127a:	4d2f      	ldr	r5, [pc, #188]	; (8001338 <InfoToUARTBeforeStart+0x1fc>)
	delay_ms(50);
 800127c:	2032      	movs	r0, #50	; 0x32
 800127e:	f7ff ff4d 	bl	800111c <delay_ms>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8001282:	4620      	mov	r0, r4
 8001284:	f004 f98e 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001288:	6829      	ldr	r1, [r5, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	482b      	ldr	r0, [pc, #172]	; (800133c <InfoToUARTBeforeStart+0x200>)
 800128e:	f004 f9c7 	bl	8005620 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 8001292:	4620      	mov	r0, r4
 8001294:	f004 f986 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001298:	68a9      	ldr	r1, [r5, #8]
 800129a:	2200      	movs	r2, #0
 800129c:	4828      	ldr	r0, [pc, #160]	; (8001340 <InfoToUARTBeforeStart+0x204>)
 800129e:	f004 f9bf 	bl	8005620 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 80012a2:	4620      	mov	r0, r4
 80012a4:	f004 f97e 	bl	80055a4 <printToBufferWithoutEndUART1>
 80012a8:	6929      	ldr	r1, [r5, #16]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4825      	ldr	r0, [pc, #148]	; (8001344 <InfoToUARTBeforeStart+0x208>)
 80012ae:	f004 f9b7 	bl	8005620 <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 80012b2:	4620      	mov	r0, r4
 80012b4:	f004 f976 	bl	80055a4 <printToBufferWithoutEndUART1>
 80012b8:	69a9      	ldr	r1, [r5, #24]
 80012ba:	2200      	movs	r2, #0
 80012bc:	4822      	ldr	r0, [pc, #136]	; (8001348 <InfoToUARTBeforeStart+0x20c>)
 80012be:	f004 f9af 	bl	8005620 <printToBufferUART1D>
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 80012c2:	4620      	mov	r0, r4
 80012c4:	f004 f96e 	bl	80055a4 <printToBufferWithoutEndUART1>
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <InfoToUARTBeforeStart+0x210>)
 80012ca:	4821      	ldr	r0, [pc, #132]	; (8001350 <InfoToUARTBeforeStart+0x214>)
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f004 f9a6 	bl	8005620 <printToBufferUART1D>
}
 80012d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_ms(50);
 80012d8:	2032      	movs	r0, #50	; 0x32
 80012da:	f7ff bf1f 	b.w	800111c <delay_ms>
 80012de:	bf00      	nop
 80012e0:	08005fa3 	.word	0x08005fa3
 80012e4:	20000004 	.word	0x20000004
 80012e8:	08005faa 	.word	0x08005faa
 80012ec:	08005fbd 	.word	0x08005fbd
 80012f0:	08005fdb 	.word	0x08005fdb
 80012f4:	08005ffa 	.word	0x08005ffa
 80012f8:	08006017 	.word	0x08006017
 80012fc:	08006035 	.word	0x08006035
 8001300:	08006052 	.word	0x08006052
 8001304:	08006070 	.word	0x08006070
 8001308:	0800608e 	.word	0x0800608e
 800130c:	080060ac 	.word	0x080060ac
 8001310:	20000154 	.word	0x20000154
 8001314:	080060c4 	.word	0x080060c4
 8001318:	080060d8 	.word	0x080060d8
 800131c:	080060f1 	.word	0x080060f1
 8001320:	080060fe 	.word	0x080060fe
 8001324:	0800610b 	.word	0x0800610b
 8001328:	08006118 	.word	0x08006118
 800132c:	08006126 	.word	0x08006126
 8001330:	08006138 	.word	0x08006138
 8001334:	0800614b 	.word	0x0800614b
 8001338:	200000f4 	.word	0x200000f4
 800133c:	08006168 	.word	0x08006168
 8001340:	08006184 	.word	0x08006184
 8001344:	080061ac 	.word	0x080061ac
 8001348:	080061ce 	.word	0x080061ce
 800134c:	2000028c 	.word	0x2000028c
 8001350:	080061da 	.word	0x080061da

08001354 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	2300      	movs	r3, #0
	static char s1[16];
     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 8001358:	270a      	movs	r7, #10
 800135a:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
{
 800135e:	b085      	sub	sp, #20
 8001360:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
         s[i++] = n % 10 + '0';
 8001364:	461c      	mov	r4, r3
 8001366:	fbb1 f6f7 	udiv	r6, r1, r7
 800136a:	ad04      	add	r5, sp, #16
 800136c:	442c      	add	r4, r5
 800136e:	fb07 1516 	mls	r5, r7, r6, r1
 8001372:	3530      	adds	r5, #48	; 0x30
 8001374:	f804 5c10 	strb.w	r5, [r4, #-16]
 8001378:	460c      	mov	r4, r1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	1c53      	adds	r3, r2, #1
     } while ((n /= 10) > 0);
 800137e:	2c09      	cmp	r4, #9
 8001380:	4631      	mov	r1, r6
 8001382:	b25b      	sxtb	r3, r3
 8001384:	dcee      	bgt.n	8001364 <itoa+0x10>
     if (sign < 0)
 8001386:	2800      	cmp	r0, #0
 8001388:	da06      	bge.n	8001398 <itoa+0x44>
         s[i++] = '-';
 800138a:	a904      	add	r1, sp, #16
 800138c:	440b      	add	r3, r1
 800138e:	212d      	movs	r1, #45	; 0x2d
 8001390:	3202      	adds	r2, #2
 8001392:	f803 1c10 	strb.w	r1, [r3, #-16]
 8001396:	b253      	sxtb	r3, r2
     s[i] = '\0';
 8001398:	2100      	movs	r1, #0
 800139a:	aa04      	add	r2, sp, #16
 800139c:	441a      	add	r2, r3
 800139e:	f802 1c10 	strb.w	r1, [r2, #-16]

     k=0;
     while (i)
 80013a2:	461a      	mov	r2, r3
 80013a4:	4c08      	ldr	r4, [pc, #32]	; (80013c8 <itoa+0x74>)
 80013a6:	b2d0      	uxtb	r0, r2
 80013a8:	1a19      	subs	r1, r3, r0
 80013aa:	b249      	sxtb	r1, r1
 80013ac:	b91a      	cbnz	r2, 80013b6 <itoa+0x62>
    	i--;
    	k++;
     }
     s1[k] = '\0';
     return s1;
}
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <itoa+0x74>)
     s1[k] = '\0';
 80013b0:	5462      	strb	r2, [r4, r1]
}
 80013b2:	b005      	add	sp, #20
 80013b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 80013b6:	ad04      	add	r5, sp, #16
 80013b8:	442a      	add	r2, r5
 80013ba:	f812 2c11 	ldrb.w	r2, [r2, #-17]
 80013be:	5462      	strb	r2, [r4, r1]
    	i--;
 80013c0:	1e42      	subs	r2, r0, #1
 80013c2:	b252      	sxtb	r2, r2
    	k++;
 80013c4:	e7ef      	b.n	80013a6 <itoa+0x52>
 80013c6:	bf00      	nop
 80013c8:	20000750 	.word	0x20000750

080013cc <itoaP>:

char * itoaP(int32_t n,char *s1)
{
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4604      	mov	r4, r0
 80013d0:	2300      	movs	r3, #0

     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 80013d2:	f04f 0c0a 	mov.w	ip, #10
{
 80013d6:	4608      	mov	r0, r1
 80013d8:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 80013dc:	b085      	sub	sp, #20
 80013de:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
         s[i++] = n % 10 + '0';
 80013e2:	461d      	mov	r5, r3
 80013e4:	fbb1 f7fc 	udiv	r7, r1, ip
 80013e8:	ae04      	add	r6, sp, #16
 80013ea:	4435      	add	r5, r6
 80013ec:	fb0c 1617 	mls	r6, ip, r7, r1
 80013f0:	3630      	adds	r6, #48	; 0x30
 80013f2:	f805 6c10 	strb.w	r6, [r5, #-16]
 80013f6:	460d      	mov	r5, r1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	1c53      	adds	r3, r2, #1
     } while ((n /= 10) > 0);
 80013fc:	2d09      	cmp	r5, #9
 80013fe:	4639      	mov	r1, r7
 8001400:	b25b      	sxtb	r3, r3
 8001402:	dcee      	bgt.n	80013e2 <itoaP+0x16>
     if (sign < 0)
 8001404:	2c00      	cmp	r4, #0
 8001406:	da06      	bge.n	8001416 <itoaP+0x4a>
         s[i++] = '-';
 8001408:	a904      	add	r1, sp, #16
 800140a:	440b      	add	r3, r1
 800140c:	212d      	movs	r1, #45	; 0x2d
 800140e:	3202      	adds	r2, #2
 8001410:	f803 1c10 	strb.w	r1, [r3, #-16]
 8001414:	b253      	sxtb	r3, r2
     s[i] = '\0';
 8001416:	2100      	movs	r1, #0
 8001418:	aa04      	add	r2, sp, #16
 800141a:	441a      	add	r2, r3
 800141c:	f802 1c10 	strb.w	r1, [r2, #-16]

     k=0;
     while (i)
 8001420:	461a      	mov	r2, r3
 8001422:	b2d4      	uxtb	r4, r2
 8001424:	1b19      	subs	r1, r3, r4
 8001426:	b249      	sxtb	r1, r1
 8001428:	1845      	adds	r5, r0, r1
 800142a:	b912      	cbnz	r2, 8001432 <itoaP+0x66>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 800142c:	702a      	strb	r2, [r5, #0]
     return s1;
}
 800142e:	b005      	add	sp, #20
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 8001432:	ad04      	add	r5, sp, #16
 8001434:	442a      	add	r2, r5
 8001436:	f812 2c11 	ldrb.w	r2, [r2, #-17]
 800143a:	5442      	strb	r2, [r0, r1]
    	i--;
 800143c:	1e62      	subs	r2, r4, #1
 800143e:	b252      	sxtb	r2, r2
    	k++;
 8001440:	e7ef      	b.n	8001422 <itoaP+0x56>
	...

08001444 <itoa_koma>:

char * itoa_koma(int32_t n,uint8_t koma)
{
 8001444:	2200      	movs	r2, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 8001446:	f04f 0c0a 	mov.w	ip, #10
{
 800144a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144c:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8001450:	b08b      	sub	sp, #44	; 0x2c
 8001452:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 8001456:	4615      	mov	r5, r2
 8001458:	fbb4 f7fc 	udiv	r7, r4, ip
 800145c:	ae0a      	add	r6, sp, #40	; 0x28
 800145e:	4435      	add	r5, r6
 8001460:	fb0c 4617 	mls	r6, ip, r7, r4
 8001464:	3630      	adds	r6, #48	; 0x30
 8001466:	f805 6c28 	strb.w	r6, [r5, #-40]
 800146a:	4625      	mov	r5, r4
 800146c:	b2d3      	uxtb	r3, r2
 800146e:	1c5a      	adds	r2, r3, #1
     } while ((n /= 10) > 0);
 8001470:	2d09      	cmp	r5, #9
 8001472:	463c      	mov	r4, r7
 8001474:	b252      	sxtb	r2, r2
 8001476:	dcee      	bgt.n	8001456 <itoa_koma+0x12>
     s[i] = '\0';
     if (i<=1)
 8001478:	2a01      	cmp	r2, #1
 800147a:	ac0a      	add	r4, sp, #40	; 0x28
 800147c:	4414      	add	r4, r2
     {
       	 s[i] = '0';
 800147e:	bfd7      	itett	le
 8001480:	2230      	movle	r2, #48	; 0x30
     s[i] = '\0';
 8001482:	2300      	movgt	r3, #0
       	 s[i] = '0';
 8001484:	f804 2c28 	strble.w	r2, [r4, #-40]
       	 i++;
 8001488:	1c9a      	addle	r2, r3, #2
 800148a:	bfd4      	ite	le
 800148c:	b252      	sxtble	r2, r2
     s[i] = '\0';
 800148e:	f804 3c28 	strbgt.w	r3, [r4, #-40]
     }
     if (i<=2&&koma>1)
 8001492:	2a02      	cmp	r2, #2
 8001494:	dc08      	bgt.n	80014a8 <itoa_koma+0x64>
 8001496:	2901      	cmp	r1, #1
 8001498:	d906      	bls.n	80014a8 <itoa_koma+0x64>
     {
    	 s[i] = '0';
 800149a:	2430      	movs	r4, #48	; 0x30
 800149c:	ab0a      	add	r3, sp, #40	; 0x28
 800149e:	4413      	add	r3, r2
    	 i++;
 80014a0:	3201      	adds	r2, #1
    	 s[i] = '0';
 80014a2:	f803 4c28 	strb.w	r4, [r3, #-40]
    	 i++;
 80014a6:	b252      	sxtb	r2, r2
     }
     k=0;
     j=0;
     while (j<i)
 80014a8:	2400      	movs	r4, #0
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 80014aa:	262e      	movs	r6, #46	; 0x2e
     k=0;
 80014ac:	4623      	mov	r3, r4
     while (j<i)
 80014ae:	b265      	sxtb	r5, r4
 80014b0:	42aa      	cmp	r2, r5
 80014b2:	dc12      	bgt.n	80014da <itoa_koma+0x96>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 80014b4:	2800      	cmp	r0, #0
 80014b6:	da06      	bge.n	80014c6 <itoa_koma+0x82>
 80014b8:	a90a      	add	r1, sp, #40	; 0x28
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	440b      	add	r3, r1
 80014be:	212d      	movs	r1, #45	; 0x2d
 80014c0:	f803 1c14 	strb.w	r1, [r3, #-20]
 80014c4:	b253      	sxtb	r3, r2
 80014c6:	461a      	mov	r2, r3
 80014c8:	4c11      	ldr	r4, [pc, #68]	; (8001510 <itoa_koma+0xcc>)
 80014ca:	b2d0      	uxtb	r0, r2
     i=0;
     while (k)
 80014cc:	1a19      	subs	r1, r3, r0
 80014ce:	b249      	sxtb	r1, r1
 80014d0:	b9b2      	cbnz	r2, 8001500 <itoa_koma+0xbc>
    	k--;
    	i++;
     }
     s1[i] = '\0';
     return s1;
}
 80014d2:	480f      	ldr	r0, [pc, #60]	; (8001510 <itoa_koma+0xcc>)
     s1[i] = '\0';
 80014d4:	5462      	strb	r2, [r4, r1]
}
 80014d6:	b00b      	add	sp, #44	; 0x2c
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	 if (k==koma)
 80014da:	428b      	cmp	r3, r1
 80014dc:	461d      	mov	r5, r3
 80014de:	d105      	bne.n	80014ec <itoa_koma+0xa8>
         	 sKoma[k]='.';
 80014e0:	af0a      	add	r7, sp, #40	; 0x28
 80014e2:	3301      	adds	r3, #1
 80014e4:	443d      	add	r5, r7
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	f805 6c14 	strb.w	r6, [r5, #-20]
    	 sKoma[k]=s[j];
 80014ec:	f81d 7004 	ldrb.w	r7, [sp, r4]
 80014f0:	ad0a      	add	r5, sp, #40	; 0x28
 80014f2:	441d      	add	r5, r3
         k++;
 80014f4:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 80014f6:	f805 7c14 	strb.w	r7, [r5, #-20]
         k++;
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	3401      	adds	r4, #1
 80014fe:	e7d6      	b.n	80014ae <itoa_koma+0x6a>
    	s1[i]=sKoma[k-1];
 8001500:	ad0a      	add	r5, sp, #40	; 0x28
 8001502:	442a      	add	r2, r5
 8001504:	f812 2c15 	ldrb.w	r2, [r2, #-21]
 8001508:	5462      	strb	r2, [r4, r1]
    	k--;
 800150a:	1e42      	subs	r2, r0, #1
 800150c:	b252      	sxtb	r2, r2
    	i++;
 800150e:	e7dc      	b.n	80014ca <itoa_koma+0x86>
 8001510:	20000760 	.word	0x20000760

08001514 <itoa_komaP>:

char * itoa_komaP(int32_t n,char *s1, uint8_t koma)
{
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	4605      	mov	r5, r0
 8001518:	2400      	movs	r4, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 800151a:	f04f 0e0a 	mov.w	lr, #10
{
 800151e:	4608      	mov	r0, r1
 8001520:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 8001524:	b08b      	sub	sp, #44	; 0x2c
 8001526:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
         s[i++] = n % 10 + '0';
 800152a:	4626      	mov	r6, r4
 800152c:	fbb1 fcfe 	udiv	ip, r1, lr
 8001530:	af0a      	add	r7, sp, #40	; 0x28
 8001532:	443e      	add	r6, r7
 8001534:	fb0e 171c 	mls	r7, lr, ip, r1
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	f806 7c28 	strb.w	r7, [r6, #-40]
 800153e:	460e      	mov	r6, r1
 8001540:	b2e3      	uxtb	r3, r4
 8001542:	1c5c      	adds	r4, r3, #1
     } while ((n /= 10) > 0);
 8001544:	2e09      	cmp	r6, #9
 8001546:	4661      	mov	r1, ip
 8001548:	b264      	sxtb	r4, r4
 800154a:	dcee      	bgt.n	800152a <itoa_komaP+0x16>
     s[i] = '\0';
     if (i<=1)
 800154c:	2c01      	cmp	r4, #1
 800154e:	a90a      	add	r1, sp, #40	; 0x28
 8001550:	4421      	add	r1, r4
     {
       	 s[i] = '0';
 8001552:	bfd7      	itett	le
 8001554:	2430      	movle	r4, #48	; 0x30
     s[i] = '\0';
 8001556:	2300      	movgt	r3, #0
       	 s[i] = '0';
 8001558:	f801 4c28 	strble.w	r4, [r1, #-40]
       	 i++;
 800155c:	1c9c      	addle	r4, r3, #2
 800155e:	bfd4      	ite	le
 8001560:	b264      	sxtble	r4, r4
     s[i] = '\0';
 8001562:	f801 3c28 	strbgt.w	r3, [r1, #-40]
     }
     if (i<=2&&koma>1)
 8001566:	2c02      	cmp	r4, #2
 8001568:	dc08      	bgt.n	800157c <itoa_komaP+0x68>
 800156a:	2a01      	cmp	r2, #1
 800156c:	d906      	bls.n	800157c <itoa_komaP+0x68>
     {
    	 s[i] = '0';
 800156e:	2130      	movs	r1, #48	; 0x30
 8001570:	ab0a      	add	r3, sp, #40	; 0x28
 8001572:	4423      	add	r3, r4
    	 i++;
 8001574:	3401      	adds	r4, #1
    	 s[i] = '0';
 8001576:	f803 1c28 	strb.w	r1, [r3, #-40]
    	 i++;
 800157a:	b264      	sxtb	r4, r4
     }
     k=0;
     j=0;
     while (j<i)
 800157c:	2100      	movs	r1, #0
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 800157e:	272e      	movs	r7, #46	; 0x2e
     k=0;
 8001580:	460b      	mov	r3, r1
     while (j<i)
 8001582:	b24e      	sxtb	r6, r1
 8001584:	42a6      	cmp	r6, r4
 8001586:	db11      	blt.n	80015ac <itoa_komaP+0x98>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 8001588:	2d00      	cmp	r5, #0
 800158a:	da06      	bge.n	800159a <itoa_komaP+0x86>
 800158c:	a90a      	add	r1, sp, #40	; 0x28
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	440b      	add	r3, r1
 8001592:	212d      	movs	r1, #45	; 0x2d
 8001594:	f803 1c14 	strb.w	r1, [r3, #-20]
 8001598:	b253      	sxtb	r3, r2
 800159a:	461a      	mov	r2, r3
 800159c:	b2d4      	uxtb	r4, r2
     i=0;
     while (k)
 800159e:	1b19      	subs	r1, r3, r4
 80015a0:	b249      	sxtb	r1, r1
 80015a2:	1845      	adds	r5, r0, r1
 80015a4:	b9b2      	cbnz	r2, 80015d4 <itoa_komaP+0xc0>
     {
    	s1[i]=sKoma[k-1];
    	k--;
    	i++;
     }
     s1[i] = '\0';
 80015a6:	702a      	strb	r2, [r5, #0]
     return s1;
}
 80015a8:	b00b      	add	sp, #44	; 0x2c
 80015aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	 if (k==koma)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	461e      	mov	r6, r3
 80015b0:	d106      	bne.n	80015c0 <itoa_komaP+0xac>
         	 sKoma[k]='.';
 80015b2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80015b6:	3301      	adds	r3, #1
 80015b8:	4466      	add	r6, ip
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	f806 7c14 	strb.w	r7, [r6, #-20]
    	 sKoma[k]=s[j];
 80015c0:	f81d c001 	ldrb.w	ip, [sp, r1]
 80015c4:	ae0a      	add	r6, sp, #40	; 0x28
 80015c6:	441e      	add	r6, r3
         k++;
 80015c8:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 80015ca:	f806 cc14 	strb.w	ip, [r6, #-20]
         k++;
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	3101      	adds	r1, #1
 80015d2:	e7d6      	b.n	8001582 <itoa_komaP+0x6e>
    	s1[i]=sKoma[k-1];
 80015d4:	ad0a      	add	r5, sp, #40	; 0x28
 80015d6:	442a      	add	r2, r5
 80015d8:	f812 2c15 	ldrb.w	r2, [r2, #-21]
 80015dc:	5442      	strb	r2, [r0, r1]
    	k--;
 80015de:	1e62      	subs	r2, r4, #1
 80015e0:	b252      	sxtb	r2, r2
    	i++;
 80015e2:	e7db      	b.n	800159c <itoa_komaP+0x88>

080015e4 <Module16>:
int16_t Module16 (int16_t value)
{
	if (value == 0) return 0;
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d002      	beq.n	80015ee <Module16+0xa>
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
 80015e8:	bfdc      	itt	le
 80015ea:	4240      	negle	r0, r0
 80015ec:	b200      	sxthle	r0, r0
}
 80015ee:	4770      	bx	lr

080015f0 <strlen1>:
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
}

uint8_t strlen1(char string[])
{
 80015f0:	4602      	mov	r2, r0
	uint8_t i=0;
	while(string[i]!='\0')
 80015f2:	2300      	movs	r3, #0
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	5c11      	ldrb	r1, [r2, r0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	2900      	cmp	r1, #0
 80015fc:	d1fa      	bne.n	80015f4 <strlen1+0x4>
		i++;
	return i;
}
 80015fe:	4770      	bx	lr

08001600 <Merge2Strings>:

char * Merge2Strings(char * str1in, char * str2in, char * strout)
{
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	4605      	mov	r5, r0
	int8_t i, j;
	for (i=0; str1in[i]!='\0'; i++)
 8001604:	2400      	movs	r4, #0
{
 8001606:	4610      	mov	r0, r2
	for (i=0; str1in[i]!='\0'; i++)
 8001608:	b262      	sxtb	r2, r4
 800160a:	5cab      	ldrb	r3, [r5, r2]
 800160c:	1c66      	adds	r6, r4, #1
 800160e:	b943      	cbnz	r3, 8001622 <Merge2Strings+0x22>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 8001610:	b25a      	sxtb	r2, r3
 8001612:	5c8d      	ldrb	r5, [r1, r2]
 8001614:	18e2      	adds	r2, r4, r3
 8001616:	b252      	sxtb	r2, r2
 8001618:	1886      	adds	r6, r0, r2
 800161a:	3301      	adds	r3, #1
 800161c:	b925      	cbnz	r5, 8001628 <Merge2Strings+0x28>
	{
		strout[i] = str2in[j];
	}
	strout[i] = '\0';
 800161e:	7035      	strb	r5, [r6, #0]
	return strout;
}
 8001620:	bd70      	pop	{r4, r5, r6, pc}
		strout[i] = str1in[i];
 8001622:	4634      	mov	r4, r6
 8001624:	5483      	strb	r3, [r0, r2]
	for (i=0; str1in[i]!='\0'; i++)
 8001626:	e7ef      	b.n	8001608 <Merge2Strings+0x8>
		strout[i] = str2in[j];
 8001628:	5485      	strb	r5, [r0, r2]
	for (j=0; str2in[j]!='\0'; j++,i++)
 800162a:	e7f1      	b.n	8001610 <Merge2Strings+0x10>

0800162c <Merge3Strings>:
char * Merge3Strings(char * str1in, char * str2in,char * str3in, char * strout)
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	4604      	mov	r4, r0
 8001630:	460f      	mov	r7, r1
 8001632:	4618      	mov	r0, r3
	int8_t i, j,k;
	for (i=0; str1in[i]!='\0'; i++)
 8001634:	2500      	movs	r5, #0
 8001636:	b269      	sxtb	r1, r5
 8001638:	5c63      	ldrb	r3, [r4, r1]
 800163a:	1c6e      	adds	r6, r5, #1
 800163c:	b983      	cbnz	r3, 8001660 <Merge3Strings+0x34>
 800163e:	b2de      	uxtb	r6, r3
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 8001640:	5cf9      	ldrb	r1, [r7, r3]
 8001642:	1974      	adds	r4, r6, r5
 8001644:	fa5f fc84 	uxtb.w	ip, r4
 8001648:	b264      	sxtb	r4, r4
 800164a:	b961      	cbnz	r1, 8001666 <Merge3Strings+0x3a>
	{
		strout[i] = str2in[j];
	}
	for (k=0; str3in[k]!='\0'; k++,i++)
 800164c:	b24b      	sxtb	r3, r1
 800164e:	5cd4      	ldrb	r4, [r2, r3]
 8001650:	eb0c 0301 	add.w	r3, ip, r1
 8001654:	b25b      	sxtb	r3, r3
 8001656:	18c5      	adds	r5, r0, r3
 8001658:	3101      	adds	r1, #1
 800165a:	b944      	cbnz	r4, 800166e <Merge3Strings+0x42>
	{
		strout[i] = str3in[k];
	}
	strout[i] = '\0';
 800165c:	702c      	strb	r4, [r5, #0]
	return strout;
}
 800165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strout[i] = str1in[i];
 8001660:	4635      	mov	r5, r6
 8001662:	5443      	strb	r3, [r0, r1]
	for (i=0; str1in[i]!='\0'; i++)
 8001664:	e7e7      	b.n	8001636 <Merge3Strings+0xa>
		strout[i] = str2in[j];
 8001666:	1c73      	adds	r3, r6, #1
 8001668:	5501      	strb	r1, [r0, r4]
	for (j=0; str2in[j]!='\0'; j++,i++)
 800166a:	b25b      	sxtb	r3, r3
 800166c:	e7e7      	b.n	800163e <Merge3Strings+0x12>
		strout[i] = str3in[k];
 800166e:	54c4      	strb	r4, [r0, r3]
	for (k=0; str3in[k]!='\0'; k++,i++)
 8001670:	e7ec      	b.n	800164c <Merge3Strings+0x20>

08001672 <ClockStringWithSec>:

char *ClockStringWithSec(uint32_t time, char *OutStr)
{
 8001672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001676:	4607      	mov	r7, r0
	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 8001678:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 800167c:	b086      	sub	sp, #24
 800167e:	460c      	mov	r4, r1
	itoaP(time/3600,s);
 8001680:	fbb7 f0f0 	udiv	r0, r7, r0
 8001684:	a901      	add	r1, sp, #4
 8001686:	f7ff fea1 	bl	80013cc <itoaP>
	i=0;
	if (strlen1(s)<2)
 800168a:	a801      	add	r0, sp, #4
 800168c:	f7ff ffb0 	bl	80015f0 <strlen1>
 8001690:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 8001692:	bf96      	itet	ls
 8001694:	2201      	movls	r2, #1
	i=0;
 8001696:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 8001698:	2330      	movls	r3, #48	; 0x30
	i=0;
 800169a:	4615      	mov	r5, r2
		OutStr[i] = '0';
 800169c:	bf98      	it	ls
 800169e:	7023      	strbls	r3, [r4, #0]
		i++;
 80016a0:	b2ee      	uxtb	r6, r5
	}

	for (k=0; s[k]!='\0';k++, i++)
 80016a2:	1ab3      	subs	r3, r6, r2
 80016a4:	a906      	add	r1, sp, #24
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	440b      	add	r3, r1
 80016aa:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80016ae:	1963      	adds	r3, r4, r5
 80016b0:	1c75      	adds	r5, r6, #1
 80016b2:	b26d      	sxtb	r5, r5
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d149      	bne.n	800174c <ClockStringWithSec+0xda>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 80016b8:	223a      	movs	r2, #58	; 0x3a
 80016ba:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 80016bc:	233c      	movs	r3, #60	; 0x3c
 80016be:	fbb7 f2f3 	udiv	r2, r7, r3
 80016c2:	fbb2 f0f3 	udiv	r0, r2, r3
 80016c6:	a901      	add	r1, sp, #4
 80016c8:	fb03 2010 	mls	r0, r3, r0, r2
 80016cc:	f7ff fe7e 	bl	80013cc <itoaP>
	if (strlen1(s)<2)
 80016d0:	a801      	add	r0, sp, #4
 80016d2:	f7ff ff8d 	bl	80015f0 <strlen1>
 80016d6:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 80016d8:	bf9f      	itttt	ls
 80016da:	2330      	movls	r3, #48	; 0x30
 80016dc:	5563      	strbls	r3, [r4, r5]
		i++;
 80016de:	1cb5      	addls	r5, r6, #2
 80016e0:	b26d      	sxtbls	r5, r5
	i=0;
 80016e2:	462e      	mov	r6, r5
 80016e4:	fa5f f886 	uxtb.w	r8, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 80016e8:	eba8 0305 	sub.w	r3, r8, r5
 80016ec:	aa06      	add	r2, sp, #24
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80016f6:	19a3      	adds	r3, r4, r6
 80016f8:	f108 0601 	add.w	r6, r8, #1
 80016fc:	b276      	sxtb	r6, r6
 80016fe:	bb3a      	cbnz	r2, 8001750 <ClockStringWithSec+0xde>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = ':';
 8001700:	223a      	movs	r2, #58	; 0x3a
 8001702:	701a      	strb	r2, [r3, #0]
	i++;

	itoaP(time%60,s);
 8001704:	233c      	movs	r3, #60	; 0x3c
 8001706:	fbb7 f0f3 	udiv	r0, r7, r3
 800170a:	a901      	add	r1, sp, #4
 800170c:	fb03 7010 	mls	r0, r3, r0, r7
 8001710:	f7ff fe5c 	bl	80013cc <itoaP>
	if (strlen1(s)<2)
 8001714:	a801      	add	r0, sp, #4
 8001716:	f7ff ff6b 	bl	80015f0 <strlen1>
 800171a:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 800171c:	bf9c      	itt	ls
 800171e:	2330      	movls	r3, #48	; 0x30
 8001720:	55a3      	strbls	r3, [r4, r6]
	i=0;
 8001722:	f04f 0300 	mov.w	r3, #0
		i++;
 8001726:	bf9c      	itt	ls
 8001728:	f108 0602 	addls.w	r6, r8, #2
 800172c:	b276      	sxtbls	r6, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 800172e:	b25a      	sxtb	r2, r3
 8001730:	a906      	add	r1, sp, #24
 8001732:	440a      	add	r2, r1
 8001734:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001738:	199a      	adds	r2, r3, r6
 800173a:	b252      	sxtb	r2, r2
 800173c:	18a0      	adds	r0, r4, r2
 800173e:	3301      	adds	r3, #1
 8001740:	b941      	cbnz	r1, 8001754 <ClockStringWithSec+0xe2>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = '\0';
 8001742:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 8001744:	4620      	mov	r0, r4
 8001746:	b006      	add	sp, #24
 8001748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		OutStr[i] = s[k];
 800174c:	7019      	strb	r1, [r3, #0]
	for (k=0; s[k]!='\0';k++, i++)
 800174e:	e7a7      	b.n	80016a0 <ClockStringWithSec+0x2e>
		OutStr[i] = s[j];
 8001750:	701a      	strb	r2, [r3, #0]
	for (j=0; s[j]!='\0'; i++,j++)
 8001752:	e7c7      	b.n	80016e4 <ClockStringWithSec+0x72>
		OutStr[i] = s[j];
 8001754:	54a1      	strb	r1, [r4, r2]
	for (j=0; s[j]!='\0'; i++,j++)
 8001756:	e7ea      	b.n	800172e <ClockStringWithSec+0xbc>

08001758 <ClockStringNoSec>:

char *ClockStringNoSec(uint32_t time, char *OutStr)
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4606      	mov	r6, r0

	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 800175c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 8001760:	b087      	sub	sp, #28
 8001762:	460c      	mov	r4, r1
	itoaP(time/3600,s);
 8001764:	fbb6 f0f0 	udiv	r0, r6, r0
 8001768:	a901      	add	r1, sp, #4
 800176a:	f7ff fe2f 	bl	80013cc <itoaP>
	i=0;
	if (strlen1(s)<2)
 800176e:	a801      	add	r0, sp, #4
 8001770:	f7ff ff3e 	bl	80015f0 <strlen1>
 8001774:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 8001776:	bf96      	itet	ls
 8001778:	2201      	movls	r2, #1
	i=0;
 800177a:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 800177c:	2330      	movls	r3, #48	; 0x30
	i=0;
 800177e:	4615      	mov	r5, r2
		OutStr[i] = '0';
 8001780:	bf98      	it	ls
 8001782:	7023      	strbls	r3, [r4, #0]
		i++;
 8001784:	b2ef      	uxtb	r7, r5
	}

	for (k=0; s[k]!='\0';k++, i++)
 8001786:	1abb      	subs	r3, r7, r2
 8001788:	a906      	add	r1, sp, #24
 800178a:	b25b      	sxtb	r3, r3
 800178c:	440b      	add	r3, r1
 800178e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8001792:	1963      	adds	r3, r4, r5
 8001794:	1c7d      	adds	r5, r7, #1
 8001796:	b26d      	sxtb	r5, r5
 8001798:	bb29      	cbnz	r1, 80017e6 <ClockStringNoSec+0x8e>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 800179a:	223a      	movs	r2, #58	; 0x3a
 800179c:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 800179e:	233c      	movs	r3, #60	; 0x3c
 80017a0:	fbb6 f6f3 	udiv	r6, r6, r3
 80017a4:	fbb6 f0f3 	udiv	r0, r6, r3
 80017a8:	a901      	add	r1, sp, #4
 80017aa:	fb03 6010 	mls	r0, r3, r0, r6
 80017ae:	f7ff fe0d 	bl	80013cc <itoaP>
	if (strlen1(s)<2)
 80017b2:	a801      	add	r0, sp, #4
 80017b4:	f7ff ff1c 	bl	80015f0 <strlen1>
 80017b8:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 80017ba:	bf9c      	itt	ls
 80017bc:	2330      	movls	r3, #48	; 0x30
 80017be:	5563      	strbls	r3, [r4, r5]
	i=0;
 80017c0:	f04f 0300 	mov.w	r3, #0
		i++;
 80017c4:	bf9c      	itt	ls
 80017c6:	1cbd      	addls	r5, r7, #2
 80017c8:	b26d      	sxtbls	r5, r5
	}
	for (j=0; s[j]!='\0'; i++,j++)
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	a906      	add	r1, sp, #24
 80017ce:	440a      	add	r2, r1
 80017d0:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80017d4:	195a      	adds	r2, r3, r5
 80017d6:	b252      	sxtb	r2, r2
 80017d8:	18a0      	adds	r0, r4, r2
 80017da:	3301      	adds	r3, #1
 80017dc:	b929      	cbnz	r1, 80017ea <ClockStringNoSec+0x92>
	{
		OutStr[i] = s[j];
	}


	OutStr[i] = '\0';
 80017de:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 80017e0:	4620      	mov	r0, r4
 80017e2:	b007      	add	sp, #28
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		OutStr[i] = s[k];
 80017e6:	7019      	strb	r1, [r3, #0]
	for (k=0; s[k]!='\0';k++, i++)
 80017e8:	e7cc      	b.n	8001784 <ClockStringNoSec+0x2c>
		OutStr[i] = s[j];
 80017ea:	54a1      	strb	r1, [r4, r2]
	for (j=0; s[j]!='\0'; i++,j++)
 80017ec:	e7ed      	b.n	80017ca <ClockStringNoSec+0x72>
	...

080017f0 <middle_of_3Imax1>:

int32_t middle_of_3Imax1(int32_t value)
{
   static int32_t InputValueI1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI1[2] = InputValueI1[1];
 80017f0:	490c      	ldr	r1, [pc, #48]	; (8001824 <middle_of_3Imax1+0x34>)
 80017f2:	684b      	ldr	r3, [r1, #4]
   InputValueI1[1] = InputValueI1[0];
 80017f4:	680a      	ldr	r2, [r1, #0]
   InputValueI1[2] = InputValueI1[1];
 80017f6:	608b      	str	r3, [r1, #8]
   InputValueI1[0] = value;
   a = InputValueI1[2];
   b = InputValueI1[1];
   c = InputValueI1[0];
   if ((a <= b) && (a <= c)){
 80017f8:	4293      	cmp	r3, r2
   InputValueI1[0] = value;
 80017fa:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 80017fe:	dc05      	bgt.n	800180c <middle_of_3Imax1+0x1c>
 8001800:	4283      	cmp	r3, r0
 8001802:	dc09      	bgt.n	8001818 <middle_of_3Imax1+0x28>
      middle = (b <= c) ? b : c;
 8001804:	4290      	cmp	r0, r2
 8001806:	bfa8      	it	ge
 8001808:	4610      	movge	r0, r2
 800180a:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 800180c:	4282      	cmp	r2, r0
 800180e:	dc03      	bgt.n	8001818 <middle_of_3Imax1+0x28>
         middle = (a <= c) ? a : c;
 8001810:	4298      	cmp	r0, r3
 8001812:	bfa8      	it	ge
 8001814:	4618      	movge	r0, r3
 8001816:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001818:	4293      	cmp	r3, r2
 800181a:	bfa8      	it	ge
 800181c:	4613      	movge	r3, r2
 800181e:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000714 	.word	0x20000714

08001828 <middle_of_3Imax2>:

int32_t middle_of_3Imax2(int32_t value)
{
   static int32_t InputValueI2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI2[2] = InputValueI2[1];
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <middle_of_3Imax2+0x34>)
 800182a:	684b      	ldr	r3, [r1, #4]
   InputValueI2[1] = InputValueI2[0];
 800182c:	680a      	ldr	r2, [r1, #0]
   InputValueI2[2] = InputValueI2[1];
 800182e:	608b      	str	r3, [r1, #8]
   InputValueI2[0] = value;
   a = InputValueI2[2];
   b = InputValueI2[1];
   c = InputValueI2[0];
   if ((a <= b) && (a <= c)){
 8001830:	4293      	cmp	r3, r2
   InputValueI2[0] = value;
 8001832:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 8001836:	dc05      	bgt.n	8001844 <middle_of_3Imax2+0x1c>
 8001838:	4283      	cmp	r3, r0
 800183a:	dc09      	bgt.n	8001850 <middle_of_3Imax2+0x28>
      middle = (b <= c) ? b : c;
 800183c:	4290      	cmp	r0, r2
 800183e:	bfa8      	it	ge
 8001840:	4610      	movge	r0, r2
 8001842:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 8001844:	4282      	cmp	r2, r0
 8001846:	dc03      	bgt.n	8001850 <middle_of_3Imax2+0x28>
         middle = (a <= c) ? a : c;
 8001848:	4298      	cmp	r0, r3
 800184a:	bfa8      	it	ge
 800184c:	4618      	movge	r0, r3
 800184e:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001850:	4293      	cmp	r3, r2
 8001852:	bfa8      	it	ge
 8001854:	4613      	movge	r3, r2
 8001856:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000720 	.word	0x20000720

08001860 <middle_of_3Umax1>:

int32_t middle_of_3Umax1(int32_t value)
{
   static int32_t InputValueU1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU1[2] = InputValueU1[1];
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <middle_of_3Umax1+0x34>)
 8001862:	684b      	ldr	r3, [r1, #4]
   InputValueU1[1] = InputValueU1[0];
 8001864:	680a      	ldr	r2, [r1, #0]
   InputValueU1[2] = InputValueU1[1];
 8001866:	608b      	str	r3, [r1, #8]
   InputValueU1[0] = value;
   a = InputValueU1[2];
   b = InputValueU1[1];
   c = InputValueU1[0];
   if ((a <= b) && (a <= c)){
 8001868:	4293      	cmp	r3, r2
   InputValueU1[0] = value;
 800186a:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 800186e:	dc05      	bgt.n	800187c <middle_of_3Umax1+0x1c>
 8001870:	4283      	cmp	r3, r0
 8001872:	dc09      	bgt.n	8001888 <middle_of_3Umax1+0x28>
      middle = (b <= c) ? b : c;
 8001874:	4290      	cmp	r0, r2
 8001876:	bfa8      	it	ge
 8001878:	4610      	movge	r0, r2
 800187a:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 800187c:	4282      	cmp	r2, r0
 800187e:	dc03      	bgt.n	8001888 <middle_of_3Umax1+0x28>
         middle = (a <= c) ? a : c;
 8001880:	4298      	cmp	r0, r3
 8001882:	bfa8      	it	ge
 8001884:	4618      	movge	r0, r3
 8001886:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 8001888:	4293      	cmp	r3, r2
 800188a:	bfa8      	it	ge
 800188c:	4613      	movge	r3, r2
 800188e:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	2000072c 	.word	0x2000072c

08001898 <middle_of_3Umax2>:

int32_t middle_of_3Umax2(int32_t value)
{
   static int32_t InputValueU2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU2[2] = InputValueU2[1];
 8001898:	490c      	ldr	r1, [pc, #48]	; (80018cc <middle_of_3Umax2+0x34>)
 800189a:	684b      	ldr	r3, [r1, #4]
   InputValueU2[1] = InputValueU2[0];
 800189c:	680a      	ldr	r2, [r1, #0]
   InputValueU2[2] = InputValueU2[1];
 800189e:	608b      	str	r3, [r1, #8]
   InputValueU2[0] = value;
   a = InputValueU2[2];
   b = InputValueU2[1];
   c = InputValueU2[0];
   if ((a <= b) && (a <= c)){
 80018a0:	4293      	cmp	r3, r2
   InputValueU2[0] = value;
 80018a2:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 80018a6:	dc05      	bgt.n	80018b4 <middle_of_3Umax2+0x1c>
 80018a8:	4283      	cmp	r3, r0
 80018aa:	dc09      	bgt.n	80018c0 <middle_of_3Umax2+0x28>
      middle = (b <= c) ? b : c;
 80018ac:	4290      	cmp	r0, r2
 80018ae:	bfa8      	it	ge
 80018b0:	4610      	movge	r0, r2
 80018b2:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80018b4:	4282      	cmp	r2, r0
 80018b6:	dc03      	bgt.n	80018c0 <middle_of_3Umax2+0x28>
         middle = (a <= c) ? a : c;
 80018b8:	4298      	cmp	r0, r3
 80018ba:	bfa8      	it	ge
 80018bc:	4618      	movge	r0, r3
 80018be:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80018c0:	4293      	cmp	r3, r2
 80018c2:	bfa8      	it	ge
 80018c4:	4613      	movge	r3, r2
 80018c6:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000738 	.word	0x20000738

080018d0 <middle_of_3Umax3>:
int32_t middle_of_3Umax3(int32_t value)
{
   static int32_t InputValueU3[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU3[2] = InputValueU3[1];
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <middle_of_3Umax3+0x34>)
 80018d2:	684b      	ldr	r3, [r1, #4]
   InputValueU3[1] = InputValueU3[0];
 80018d4:	680a      	ldr	r2, [r1, #0]
   InputValueU3[2] = InputValueU3[1];
 80018d6:	608b      	str	r3, [r1, #8]
   InputValueU3[0] = value;
   a = InputValueU3[2];
   b = InputValueU3[1];
   c = InputValueU3[0];
   if ((a <= b) && (a <= c)){
 80018d8:	4293      	cmp	r3, r2
   InputValueU3[0] = value;
 80018da:	e9c1 0200 	strd	r0, r2, [r1]
   if ((a <= b) && (a <= c)){
 80018de:	dc05      	bgt.n	80018ec <middle_of_3Umax3+0x1c>
 80018e0:	4283      	cmp	r3, r0
 80018e2:	dc09      	bgt.n	80018f8 <middle_of_3Umax3+0x28>
      middle = (b <= c) ? b : c;
 80018e4:	4290      	cmp	r0, r2
 80018e6:	bfa8      	it	ge
 80018e8:	4610      	movge	r0, r2
 80018ea:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80018ec:	4282      	cmp	r2, r0
 80018ee:	dc03      	bgt.n	80018f8 <middle_of_3Umax3+0x28>
         middle = (a <= c) ? a : c;
 80018f0:	4298      	cmp	r0, r3
 80018f2:	bfa8      	it	ge
 80018f4:	4618      	movge	r0, r3
 80018f6:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bfa8      	it	ge
 80018fc:	4613      	movge	r3, r2
 80018fe:	4618      	mov	r0, r3
      }
   }

   return middle;
}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000744 	.word	0x20000744

08001908 <RunningAverageI1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
	return filteredlValueI1/10;
}
 8001908:	4770      	bx	lr

0800190a <RunningAverageI2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
	return filteredlValueI2/10;
}
 800190a:	4770      	bx	lr

0800190c <RunningAverageU1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
	return filteredlValueU1/10;
}
 800190c:	4770      	bx	lr

0800190e <RunningAverageU2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU2 = 0;
	filteredlValueU2 += (newValue - filteredlValueU2) * k;
	return filteredlValueU2/10;
}
 800190e:	4770      	bx	lr

08001910 <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
 return CurrentMenuItem;
}
 8001910:	4b01      	ldr	r3, [pc, #4]	; (8001918 <Menu_GetCurrentMenu+0x8>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000024c 	.word	0x2000024c

0800191c <Menu_Navigate>:

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <Menu_Navigate+0x28>)
{
 800191e:	b510      	push	{r4, lr}
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001920:	4298      	cmp	r0, r3
 8001922:	d00d      	beq.n	8001940 <Menu_Navigate+0x24>
 8001924:	b160      	cbz	r0, 8001940 <Menu_Navigate+0x24>
  return;

 CurrentMenuItem = NewMenu;

 if (MenuWriteFunc)
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <Menu_Navigate+0x2c>)
 CurrentMenuItem = NewMenu;
 8001928:	4c08      	ldr	r4, [pc, #32]	; (800194c <Menu_Navigate+0x30>)
 if (MenuWriteFunc)
 800192a:	6812      	ldr	r2, [r2, #0]
 CurrentMenuItem = NewMenu;
 800192c:	6020      	str	r0, [r4, #0]
 if (MenuWriteFunc)
 800192e:	b10a      	cbz	r2, 8001934 <Menu_Navigate+0x18>
  MenuWriteFunc(CurrentMenuItem->Text);
 8001930:	3018      	adds	r0, #24
 8001932:	4790      	blx	r2

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	691b      	ldr	r3, [r3, #16]

 if (EnterCallback)
 8001938:	b113      	cbz	r3, 8001940 <Menu_Navigate+0x24>
  EnterCallback();
}
 800193a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EnterCallback();
 800193e:	4718      	bx	r3
}
 8001940:	bd10      	pop	{r4, pc}
 8001942:	bf00      	nop
 8001944:	080061ec 	.word	0x080061ec
 8001948:	20000774 	.word	0x20000774
 800194c:	2000024c 	.word	0x2000024c

08001950 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)( char* Text))
{
 MenuWriteFunc = WriteFunc;
 8001950:	4b02      	ldr	r3, [pc, #8]	; (800195c <Menu_SetGenericWriteCallback+0xc>)
 8001952:	6018      	str	r0, [r3, #0]
 Menu_Navigate(CurrentMenuItem);
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <Menu_SetGenericWriteCallback+0x10>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	f7ff bfe0 	b.w	800191c <Menu_Navigate>
 800195c:	20000774 	.word	0x20000774
 8001960:	2000024c 	.word	0x2000024c

08001964 <Menu_SelectItem>:
}

void Menu_SelectItem(Key_Pressed_t key)
{
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <Menu_SelectItem+0x14>)
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <Menu_SelectItem+0x18>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4293      	cmp	r3, r2
 800196c:	d003      	beq.n	8001976 <Menu_SelectItem+0x12>
 800196e:	b113      	cbz	r3, 8001976 <Menu_SelectItem+0x12>
  return;

 void (*SelectCallback)(Key_Pressed_t) = CurrentMenuItem->SelectCallback;
 8001970:	695b      	ldr	r3, [r3, #20]

 if (SelectCallback)
 8001972:	b103      	cbz	r3, 8001976 <Menu_SelectItem+0x12>
  SelectCallback(key);
 8001974:	4718      	bx	r3
}
 8001976:	4770      	bx	lr
 8001978:	2000024c 	.word	0x2000024c
 800197c:	080061ec 	.word	0x080061ec

08001980 <strobe>:
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void strobe(void)
{
	LCD_PORT->BSRR=LCD_EN_BS;
 8001980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
{
 8001984:	b510      	push	{r4, lr}
	LCD_PORT->BSRR=LCD_EN_BS;
 8001986:	4c06      	ldr	r4, [pc, #24]	; (80019a0 <strobe+0x20>)
	delay_us(2);
 8001988:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BS;
 800198a:	6123      	str	r3, [r4, #16]
	delay_us(2);
 800198c:	f7ff fb8e 	bl	80010ac <delay_us>
	LCD_PORT->BSRR=LCD_EN_BC;
 8001990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	delay_us(2);
 8001994:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BC;
 8001996:	6123      	str	r3, [r4, #16]
}
 8001998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(2);
 800199c:	f7ff bb86 	b.w	80010ac <delay_us>
 80019a0:	40010c00 	.word	0x40010c00

080019a4 <lcd_set_4bit_mode>:
			}
		}
	}
}

void lcd_set_4bit_mode(void) {
 80019a4:	b570      	push	{r4, r5, r6, lr}


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80019a6:	f04f 457c 	mov.w	r5, #4227858432	; 0xfc000000
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80019aa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80019ae:	4c0d      	ldr	r4, [pc, #52]	; (80019e4 <lcd_set_4bit_mode+0x40>)
 80019b0:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80019b2:	6126      	str	r6, [r4, #16]

	//LCD_PORT->BSRR=LCD_EN_BS;
	//delay_ms(1);
	//LCD_PORT->BSRR=LCD_EN_BC;

	strobe();
 80019b4:	f7ff ffe4 	bl	8001980 <strobe>
	delay_ms(1);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fbaf 	bl	800111c <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80019be:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80019c0:	6126      	str	r6, [r4, #16]

	strobe();
 80019c2:	f7ff ffdd 	bl	8001980 <strobe>
	delay_ms(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff fba8 	bl	800111c <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
	LCD_PORT->BSRR=(LCD_DB7_BS);
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80019d0:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB7_BS);
 80019d2:	6123      	str	r3, [r4, #16]

	strobe();
 80019d4:	f7ff ffd4 	bl	8001980 <strobe>
	delay_ms(1);

}
 80019d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff bb9d 	b.w	800111c <delay_ms>
 80019e2:	bf00      	nop
 80019e4:	40010c00 	.word	0x40010c00

080019e8 <lcd_send>:

void lcd_send(uint8_t byte, dat_or_comm dc)  {

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80019e8:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <lcd_send+0x98>)
void lcd_send(uint8_t byte, dat_or_comm dc)  {
 80019ee:	b570      	push	{r4, r5, r6, lr}
 80019f0:	4604      	mov	r4, r0

	if (dc) {
 80019f2:	460d      	mov	r5, r1
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80019f4:	611a      	str	r2, [r3, #16]
	if (dc) {
 80019f6:	b111      	cbz	r1, 80019fe <lcd_send+0x16>
		LCD_PORT->BSRR=LCD_CD_BS;
 80019f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019fc:	611a      	str	r2, [r3, #16]
	}

	if (byte & 0x10) {
 80019fe:	06e2      	lsls	r2, r4, #27
		LCD_PORT->BSRR=LCD_DB4_BS;
 8001a00:	bf44      	itt	mi
 8001a02:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 8001a06:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x20) {
 8001a08:	f014 0f20 	tst.w	r4, #32
		LCD_PORT->BSRR=LCD_DB5_BS;
 8001a0c:	bf18      	it	ne
 8001a0e:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <lcd_send+0x98>)
 8001a14:	bf18      	it	ne
 8001a16:	611a      	strne	r2, [r3, #16]
	}
	if (byte & 0x40) {
 8001a18:	0666      	lsls	r6, r4, #25
		LCD_PORT->BSRR=LCD_DB6_BS;
 8001a1a:	bf44      	itt	mi
 8001a1c:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 8001a20:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x80) {
 8001a22:	f014 0f80 	tst.w	r4, #128	; 0x80
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001a26:	bf18      	it	ne
 8001a28:	f44f 6380 	movne.w	r3, #1024	; 0x400
 8001a2c:	4e14      	ldr	r6, [pc, #80]	; (8001a80 <lcd_send+0x98>)
 8001a2e:	bf18      	it	ne
 8001a30:	6133      	strne	r3, [r6, #16]
	}

	strobe();
 8001a32:	f7ff ffa5 	bl	8001980 <strobe>


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8001a36:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000

	if (byte & 0x01) {
 8001a3a:	07e0      	lsls	r0, r4, #31
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8001a3c:	6133      	str	r3, [r6, #16]
		LCD_PORT->BSRR=LCD_DB4_BS;
 8001a3e:	bf44      	itt	mi
 8001a40:	f44f 5300 	movmi.w	r3, #8192	; 0x2000
 8001a44:	6133      	strmi	r3, [r6, #16]
	}
	if (byte & 0x02) {
 8001a46:	07a1      	lsls	r1, r4, #30
		LCD_PORT->BSRR=LCD_DB5_BS;
 8001a48:	bf42      	ittt	mi
 8001a4a:	f44f 5280 	movmi.w	r2, #4096	; 0x1000
 8001a4e:	4b0c      	ldrmi	r3, [pc, #48]	; (8001a80 <lcd_send+0x98>)
 8001a50:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x04) {
 8001a52:	0762      	lsls	r2, r4, #29
		LCD_PORT->BSRR=LCD_DB6_BS;
 8001a54:	bf42      	ittt	mi
 8001a56:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 8001a5a:	4b09      	ldrmi	r3, [pc, #36]	; (8001a80 <lcd_send+0x98>)
 8001a5c:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x08) {
 8001a5e:	0723      	lsls	r3, r4, #28
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001a60:	bf42      	ittt	mi
 8001a62:	f44f 6280 	movmi.w	r2, #1024	; 0x400
 8001a66:	4b06      	ldrmi	r3, [pc, #24]	; (8001a80 <lcd_send+0x98>)
 8001a68:	611a      	strmi	r2, [r3, #16]
	}



	strobe();
 8001a6a:	f7ff ff89 	bl	8001980 <strobe>
	delay_ms(2);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7ff fb54 	bl	800111c <delay_ms>
	if (dc) {
 8001a74:	b11d      	cbz	r5, 8001a7e <lcd_send+0x96>
			LCD_PORT->BSRR=LCD_CD_BC;
 8001a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a7a:	4b01      	ldr	r3, [pc, #4]	; (8001a80 <lcd_send+0x98>)
 8001a7c:	611a      	str	r2, [r3, #16]
		}

}
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
 8001a80:	40010c00 	.word	0x40010c00

08001a84 <lcd_set_user_char>:
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001a84:	00c0      	lsls	r0, r0, #3
 8001a86:	f040 0040 	orr.w	r0, r0, #64	; 0x40
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 8001a8a:	b538      	push	{r3, r4, r5, lr}
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001a8c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 8001a90:	460c      	mov	r4, r1
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 8001a92:	2100      	movs	r1, #0
 8001a94:	f7ff ffa8 	bl	80019e8 <lcd_send>
	for (i=0;i<=7;i++) {
 8001a98:	1e65      	subs	r5, r4, #1
 8001a9a:	3407      	adds	r4, #7
		lcd_send(char_data[i],DATA);
 8001a9c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	f7ff ffa1 	bl	80019e8 <lcd_send>
	for (i=0;i<=7;i++) {
 8001aa6:	42a5      	cmp	r5, r4
 8001aa8:	d1f8      	bne.n	8001a9c <lcd_set_user_char+0x18>
}
 8001aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send((1<<7), COMMAND);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2080      	movs	r0, #128	; 0x80
 8001ab2:	f7ff bf99 	b.w	80019e8 <lcd_send>
	...

08001ab8 <SetSymbols>:
{
 8001ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sym[4]=0b00000;
 8001aba:	4c1f      	ldr	r4, [pc, #124]	; (8001b38 <SetSymbols+0x80>)
 8001abc:	4d1f      	ldr	r5, [pc, #124]	; (8001b3c <SetSymbols+0x84>)
	lcd_set_user_char(0,sym);//charge
 8001abe:	4669      	mov	r1, sp
 8001ac0:	2000      	movs	r0, #0
	sym[4]=0b00000;
 8001ac2:	e9cd 4500 	strd	r4, r5, [sp]
	sym[4]=0b00000;
 8001ac6:	4e1e      	ldr	r6, [pc, #120]	; (8001b40 <SetSymbols+0x88>)
	lcd_set_user_char(0,sym);//charge
 8001ac8:	f7ff ffdc 	bl	8001a84 <lcd_set_user_char>
	sym[4]=0b00000;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <SetSymbols+0x8c>)
	lcd_set_user_char(1,sym);//charge
 8001ace:	4669      	mov	r1, sp
 8001ad0:	2001      	movs	r0, #1
	sym[4]=0b00000;
 8001ad2:	e9cd 3600 	strd	r3, r6, [sp]
	lcd_set_user_char(1,sym);//charge
 8001ad6:	f7ff ffd5 	bl	8001a84 <lcd_set_user_char>
	sym[0]=0b00000;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <SetSymbols+0x90>)
	lcd_set_user_char(2,sym);//discharge
 8001adc:	4669      	mov	r1, sp
	sym[4]=0b00000;
 8001ade:	e9cd 3500 	strd	r3, r5, [sp]
	lcd_set_user_char(2,sym);//discharge
 8001ae2:	2002      	movs	r0, #2
	sym[0]=0b00100;
 8001ae4:	4d19      	ldr	r5, [pc, #100]	; (8001b4c <SetSymbols+0x94>)
	lcd_set_user_char(2,sym);//discharge
 8001ae6:	f7ff ffcd 	bl	8001a84 <lcd_set_user_char>
	lcd_set_user_char(3,sym);//discharge
 8001aea:	4669      	mov	r1, sp
 8001aec:	2003      	movs	r0, #3
	sym[4]=0b00000;
 8001aee:	e9cd 5600 	strd	r5, r6, [sp]
	lcd_set_user_char(3,sym);//discharge
 8001af2:	f7ff ffc7 	bl	8001a84 <lcd_set_user_char>
	lcd_set_user_char(4,sym);//training
 8001af6:	4669      	mov	r1, sp
 8001af8:	2004      	movs	r0, #4
	sym[4]=0b00100;
 8001afa:	e9cd 5400 	strd	r5, r4, [sp]
	lcd_set_user_char(4,sym);//training
 8001afe:	f7ff ffc1 	bl	8001a84 <lcd_set_user_char>
	sym[4]=0b01010;
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <SetSymbols+0x98>)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <SetSymbols+0x9c>)
	lcd_set_user_char(5,sym);//swing
 8001b06:	4669      	mov	r1, sp
 8001b08:	2005      	movs	r0, #5
	sym[4]=0b01010;
 8001b0a:	e9cd 2300 	strd	r2, r3, [sp]
	lcd_set_user_char(5,sym);//swing
 8001b0e:	f7ff ffb9 	bl	8001a84 <lcd_set_user_char>
	sym[4]=0b00101;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <SetSymbols+0xa0>)
 8001b14:	4911      	ldr	r1, [pc, #68]	; (8001b5c <SetSymbols+0xa4>)
	lcd_set_user_char(6,sym);//Л
 8001b16:	2006      	movs	r0, #6
	sym[4]=0b00101;
 8001b18:	e9cd 1300 	strd	r1, r3, [sp]
	lcd_set_user_char(6,sym);//Л
 8001b1c:	4669      	mov	r1, sp
 8001b1e:	f7ff ffb1 	bl	8001a84 <lcd_set_user_char>
	sym[4]=0b00001;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <SetSymbols+0xa8>)
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <SetSymbols+0xac>)
	lcd_set_user_char(7,sym);//Ч
 8001b26:	4669      	mov	r1, sp
	sym[4]=0b00001;
 8001b28:	e9cd 0300 	strd	r0, r3, [sp]
	lcd_set_user_char(7,sym);//Ч
 8001b2c:	2007      	movs	r0, #7
 8001b2e:	f7ff ffa9 	bl	8001a84 <lcd_set_user_char>
}
 8001b32:	b002      	add	sp, #8
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
 8001b36:	bf00      	nop
 8001b38:	040e1504 	.word	0x040e1504
 8001b3c:	1f1f0400 	.word	0x1f1f0400
 8001b40:	1f040000 	.word	0x1f040000
 8001b44:	00040e15 	.word	0x00040e15
 8001b48:	150e0400 	.word	0x150e0400
 8001b4c:	04150e04 	.word	0x04150e04
 8001b50:	0a070702 	.word	0x0a070702
 8001b54:	081c1c0a 	.word	0x081c1c0a
 8001b58:	00091505 	.word	0x00091505
 8001b5c:	0505050f 	.word	0x0505050f
 8001b60:	00010101 	.word	0x00010101
 8001b64:	1f111111 	.word	0x1f111111

08001b68 <lcd_set_xy>:
	pos_x = x;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <lcd_set_xy+0x1c>)
 8001b6a:	7010      	strb	r0, [r2, #0]
	pos_y = y;
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <lcd_set_xy+0x20>)
 8001b6e:	7011      	strb	r1, [r2, #0]
	if (y==0) {
 8001b70:	b919      	cbnz	r1, 8001b7a <lcd_set_xy+0x12>
		lcd_send( ((1<<7) | (x)),COMMAND);
 8001b72:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		lcd_send( ((3<<6) | (x)),COMMAND);
 8001b76:	f7ff bf37 	b.w	80019e8 <lcd_send>
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8001b80:	e7f9      	b.n	8001b76 <lcd_set_xy+0xe>
 8001b82:	bf00      	nop
 8001b84:	20000778 	.word	0x20000778
 8001b88:	20000779 	.word	0x20000779

08001b8c <lcd_out>:
void lcd_out(char * txt,uint8_t TypeOfLCD) {
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	4605      	mov	r5, r0
 8001b90:	460e      	mov	r6, r1
	while(*txt)
 8001b92:	4604      	mov	r4, r0
 8001b94:	7820      	ldrb	r0, [r4, #0]
 8001b96:	b900      	cbnz	r0, 8001b9a <lcd_out+0xe>
}
 8001b98:	bd70      	pop	{r4, r5, r6, pc}
		lcd_send(*txt,DATA);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	f7ff ff24 	bl	80019e8 <lcd_send>
		if ((TypeOfLCD ==1)&&(i==7) )
 8001ba0:	2e01      	cmp	r6, #1
 8001ba2:	d107      	bne.n	8001bb4 <lcd_out+0x28>
 8001ba4:	1b63      	subs	r3, r4, r5
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b07      	cmp	r3, #7
 8001baa:	d103      	bne.n	8001bb4 <lcd_out+0x28>
			lcd_set_xy(0,1);
 8001bac:	4631      	mov	r1, r6
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff ffda 	bl	8001b68 <lcd_set_xy>
		txt++;
 8001bb4:	3401      	adds	r4, #1
		i++;
 8001bb6:	e7ed      	b.n	8001b94 <lcd_out+0x8>

08001bb8 <LcdOutbyNumber>:
	lcd_send(num,DATA);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	b2c0      	uxtb	r0, r0
 8001bbc:	f7ff bf14 	b.w	80019e8 <lcd_send>

08001bc0 <LcdOut>:
{
 8001bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc4:	460d      	mov	r5, r1
			lcd_send(russ[*txt-192],DATA);
 8001bc6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001c40 <LcdOut+0x80>
		pos_x++;
 8001bca:	4e1b      	ldr	r6, [pc, #108]	; (8001c38 <LcdOut+0x78>)
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001bcc:	4f1b      	ldr	r7, [pc, #108]	; (8001c3c <LcdOut+0x7c>)
 8001bce:	1e44      	subs	r4, r0, #1
	while(*txt)
 8001bd0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001bd4:	b908      	cbnz	r0, 8001bda <LcdOut+0x1a>
}
 8001bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(*txt==178)//І
 8001bda:	28b2      	cmp	r0, #178	; 0xb2
 8001bdc:	d119      	bne.n	8001c12 <LcdOut+0x52>
			lcd_send(73,DATA);
 8001bde:	2101      	movs	r1, #1
 8001be0:	2049      	movs	r0, #73	; 0x49
			lcd_send(russ[*txt-192],DATA);
 8001be2:	f7ff ff01 	bl	80019e8 <lcd_send>
		pos_x++;
 8001be6:	7833      	ldrb	r3, [r6, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001be8:	f897 9000 	ldrb.w	r9, [r7]
		pos_x++;
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	7033      	strb	r3, [r6, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001bf2:	f1b9 0f00 	cmp.w	r9, #0
 8001bf6:	d1eb      	bne.n	8001bd0 <LcdOut+0x10>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d1e9      	bne.n	8001bd0 <LcdOut+0x10>
 8001bfc:	2d02      	cmp	r5, #2
 8001bfe:	d1e7      	bne.n	8001bd0 <LcdOut+0x10>
			lcd_set_xy(0,1);
 8001c00:	2101      	movs	r1, #1
 8001c02:	4648      	mov	r0, r9
 8001c04:	f7ff ffb0 	bl	8001b68 <lcd_set_xy>
			pos_y = 1;
 8001c08:	2301      	movs	r3, #1
			pos_x = 0;
 8001c0a:	f886 9000 	strb.w	r9, [r6]
			pos_y = 1;
 8001c0e:	703b      	strb	r3, [r7, #0]
 8001c10:	e7de      	b.n	8001bd0 <LcdOut+0x10>
		}else if(*txt==175)//Ї
 8001c12:	28af      	cmp	r0, #175	; 0xaf
 8001c14:	d102      	bne.n	8001c1c <LcdOut+0x5c>
			lcd_send(3,DATA);
 8001c16:	2101      	movs	r1, #1
 8001c18:	2003      	movs	r0, #3
 8001c1a:	e7e2      	b.n	8001be2 <LcdOut+0x22>
		}else if(*txt==170)//Є
 8001c1c:	28aa      	cmp	r0, #170	; 0xaa
 8001c1e:	d102      	bne.n	8001c26 <LcdOut+0x66>
			lcd_send(2,DATA);
 8001c20:	2101      	movs	r1, #1
 8001c22:	2002      	movs	r0, #2
 8001c24:	e7dd      	b.n	8001be2 <LcdOut+0x22>
		}else if(*txt<192)
 8001c26:	28bf      	cmp	r0, #191	; 0xbf
			lcd_send(russ[*txt-192],DATA);
 8001c28:	bf89      	itett	hi
 8001c2a:	4440      	addhi	r0, r8
			lcd_send(*txt,DATA);
 8001c2c:	2101      	movls	r1, #1
			lcd_send(russ[*txt-192],DATA);
 8001c2e:	2101      	movhi	r1, #1
 8001c30:	f810 0cc0 	ldrbhi.w	r0, [r0, #-192]
 8001c34:	e7d5      	b.n	8001be2 <LcdOut+0x22>
 8001c36:	bf00      	nop
 8001c38:	20000778 	.word	0x20000778
 8001c3c:	20000779 	.word	0x20000779
 8001c40:	20000250 	.word	0x20000250

08001c44 <lcd_clear>:
	lcd_send(0x01,COMMAND);
 8001c44:	2100      	movs	r1, #0
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff bece 	b.w	80019e8 <lcd_send>

08001c4c <lcd_init>:
void lcd_init() {
 8001c4c:	b508      	push	{r3, lr}
	delay_ms(100);
 8001c4e:	2064      	movs	r0, #100	; 0x64
 8001c50:	f7ff fa64 	bl	800111c <delay_ms>
	lcd_set_4bit_mode();
 8001c54:	f7ff fea6 	bl	80019a4 <lcd_set_4bit_mode>
				lcd_send(0x0E,COMMAND);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	200e      	movs	r0, #14
 8001c5c:	f7ff fec4 	bl	80019e8 <lcd_send>
}
 8001c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_clear();
 8001c64:	f7ff bfee 	b.w	8001c44 <lcd_clear>

08001c68 <PrintToLCD>:


void PrintToLCD(char* str )
{
	LcdOut(str,2);
 8001c68:	2102      	movs	r1, #2
 8001c6a:	f7ff bfa9 	b.w	8001bc0 <LcdOut>

08001c6e <PrintToLCD_xy>:
	//Send_String_to_UART(str);
}

void PrintToLCD_xy(char* str ,uint8_t x, uint8_t y)
{
 8001c6e:	b510      	push	{r4, lr}
 8001c70:	4604      	mov	r4, r0
 8001c72:	4608      	mov	r0, r1
	lcd_set_xy(x,y);
 8001c74:	4611      	mov	r1, r2
 8001c76:	f7ff ff77 	bl	8001b68 <lcd_set_xy>

	LcdOut(str,2);
 8001c7a:	4620      	mov	r0, r4
	//Send_String_to_UART(str);
}
 8001c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LcdOut(str,2);
 8001c80:	2102      	movs	r1, #2
 8001c82:	f7ff bf9d 	b.w	8001bc0 <LcdOut>

08001c86 <InitLCD>:

{
	PrintToLCD(itoa_koma(x,k));
}
void InitLCD()
{
 8001c86:	b508      	push	{r3, lr}



	lcd_init();
 8001c88:	f7ff ffe0 	bl	8001c4c <lcd_init>
	lcd_clear();
 8001c8c:	f7ff ffda 	bl	8001c44 <lcd_clear>
	lcd_set_state(LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
}
 8001c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				lcd_send(0x0C,COMMAND);
 8001c94:	2100      	movs	r1, #0
 8001c96:	200c      	movs	r0, #12
 8001c98:	f7ff bea6 	b.w	80019e8 <lcd_send>

08001c9c <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <LL_APB2_GRP1_EnableClock+0x18>)
{
 8001c9e:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	4302      	orrs	r2, r0
 8001ca4:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4018      	ands	r0, r3
 8001caa:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001cac:	9b01      	ldr	r3, [sp, #4]
}
 8001cae:	b002      	add	sp, #8
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <MenuLog_Enter>:
			ClockOnLCD_noSec(DischargeTimeSec);
		}
}
void MenuLog_Enter()
{
	i_LogItems = 0;
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4b01      	ldr	r3, [pc, #4]	; (8001cc0 <MenuLog_Enter+0x8>)
 8001cbc:	801a      	strh	r2, [r3, #0]
}
 8001cbe:	4770      	bx	lr
 8001cc0:	200007e2 	.word	0x200007e2

08001cc4 <MenuCalibrationWriteToFlash_Enter>:
			break;
	}
}

void MenuCalibrationWriteToFlash_Enter(Key_Pressed_t key)
{
 8001cc4:	b508      	push	{r3, lr}
	CalibrationWriteToFlash_CRC();
 8001cc6:	f7fe fe79 	bl	80009bc <CalibrationWriteToFlash_CRC>
	WriteInLOG("Calibration");
}
 8001cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	WriteInLOG("Calibration");
 8001cce:	4801      	ldr	r0, [pc, #4]	; (8001cd4 <MenuCalibrationWriteToFlash_Enter+0x10>)
 8001cd0:	f7ff b85e 	b.w	8000d90 <WriteInLOG>
 8001cd4:	08006204 	.word	0x08006204

08001cd8 <MenuSettingsBatteryType_Enter>:
{
 8001cd8:	b510      	push	{r4, lr}
	if(CountShowBT == 0)
 8001cda:	4c3b      	ldr	r4, [pc, #236]	; (8001dc8 <MenuSettingsBatteryType_Enter+0xf0>)
 8001cdc:	f994 1000 	ldrsb.w	r1, [r4]
 8001ce0:	b961      	cbnz	r1, 8001cfc <MenuSettingsBatteryType_Enter+0x24>
		lcd_set_xy(0,0);
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	f7ff ff40 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(" 10.8V  14.6V   ");
 8001ce8:	4838      	ldr	r0, [pc, #224]	; (8001dcc <MenuSettingsBatteryType_Enter+0xf4>)
 8001cea:	f7ff ffbd 	bl	8001c68 <PrintToLCD>
		SettingsData.LowVoltage = 1080;
 8001cee:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <MenuSettingsBatteryType_Enter+0xf8>)
 8001cf4:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1460;
 8001cf6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001cfa:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 1)
 8001cfc:	f994 3000 	ldrsb.w	r3, [r4]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10d      	bne.n	8001d20 <MenuSettingsBatteryType_Enter+0x48>
		lcd_set_xy(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	4608      	mov	r0, r1
 8001d08:	f7ff ff2e 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("  3.0V   4.2V   ");
 8001d0c:	4831      	ldr	r0, [pc, #196]	; (8001dd4 <MenuSettingsBatteryType_Enter+0xfc>)
 8001d0e:	f7ff ffab 	bl	8001c68 <PrintToLCD>
		SettingsData.LowVoltage = 300;
 8001d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d18:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 420;
 8001d1a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001d1e:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 2)
 8001d20:	f994 3000 	ldrsb.w	r3, [r4]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d10d      	bne.n	8001d44 <MenuSettingsBatteryType_Enter+0x6c>
		lcd_set_xy(0,0);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4608      	mov	r0, r1
 8001d2c:	f7ff ff1c 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("  2.8V   3.7V   ");
 8001d30:	4829      	ldr	r0, [pc, #164]	; (8001dd8 <MenuSettingsBatteryType_Enter+0x100>)
 8001d32:	f7ff ff99 	bl	8001c68 <PrintToLCD>
		SettingsData.LowVoltage = 280;
 8001d36:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d3c:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 370;
 8001d3e:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001d42:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 3)
 8001d44:	f994 3000 	ldrsb.w	r3, [r4]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d10c      	bne.n	8001d66 <MenuSettingsBatteryType_Enter+0x8e>
		lcd_set_xy(0,0);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4608      	mov	r0, r1
 8001d50:	f7ff ff0a 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("  1.6V   2.8V   ");
 8001d54:	4821      	ldr	r0, [pc, #132]	; (8001ddc <MenuSettingsBatteryType_Enter+0x104>)
 8001d56:	f7ff ff87 	bl	8001c68 <PrintToLCD>
		SettingsData.LowVoltage = 160;
 8001d5a:	22a0      	movs	r2, #160	; 0xa0
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d5e:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 280;
 8001d60:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d64:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 4)
 8001d66:	f994 3000 	ldrsb.w	r3, [r4]
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d10d      	bne.n	8001d8a <MenuSettingsBatteryType_Enter+0xb2>
		lcd_set_xy(0,0);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4608      	mov	r0, r1
 8001d72:	f7ff fef9 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("   8V  13.6V    ");
 8001d76:	481a      	ldr	r0, [pc, #104]	; (8001de0 <MenuSettingsBatteryType_Enter+0x108>)
 8001d78:	f7ff ff76 	bl	8001c68 <PrintToLCD>
		SettingsData.LowVoltage = 800;
 8001d7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MenuSettingsBatteryType_Enter+0xf8>)
 8001d82:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1360;
 8001d84:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8001d88:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 5)
 8001d8a:	f994 3000 	ldrsb.w	r3, [r4]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d10c      	bne.n	8001dac <MenuSettingsBatteryType_Enter+0xd4>
		lcd_set_xy(0,0);
 8001d92:	2100      	movs	r1, #0
 8001d94:	4608      	mov	r0, r1
 8001d96:	f7ff fee7 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("  1V    20V     ");
 8001d9a:	4812      	ldr	r0, [pc, #72]	; (8001de4 <MenuSettingsBatteryType_Enter+0x10c>)
 8001d9c:	f7ff ff64 	bl	8001c68 <PrintToLCD>
		SettingsData.LowVoltage = 100;
 8001da0:	2264      	movs	r2, #100	; 0x64
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MenuSettingsBatteryType_Enter+0xf8>)
 8001da4:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 2000;
 8001da6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001daa:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 6)
 8001dac:	f994 3000 	ldrsb.w	r3, [r4]
 8001db0:	2b06      	cmp	r3, #6
		CountShowBT = 0;
 8001db2:	bf04      	itt	eq
 8001db4:	2300      	moveq	r3, #0
 8001db6:	7023      	strbeq	r3, [r4, #0]
	SettingsWriteToFlash_CRC();
 8001db8:	f7fe fe36 	bl	8000a28 <SettingsWriteToFlash_CRC>
}
 8001dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(600);
 8001dc0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001dc4:	f7ff b9aa 	b.w	800111c <delay_ms>
 8001dc8:	20000793 	.word	0x20000793
 8001dcc:	08006210 	.word	0x08006210
 8001dd0:	20000154 	.word	0x20000154
 8001dd4:	08006221 	.word	0x08006221
 8001dd8:	08006232 	.word	0x08006232
 8001ddc:	08006243 	.word	0x08006243
 8001de0:	08006254 	.word	0x08006254
 8001de4:	08006265 	.word	0x08006265

08001de8 <MenuSettingsWriteToFlash_Enter>:

void MenuSettingsWriteToFlash_Enter(Key_Pressed_t key)
{
	SettingsWriteToFlash_CRC();
 8001de8:	f7fe be1e 	b.w	8000a28 <SettingsWriteToFlash_CRC>

08001dec <MenuOption_Enter>:
	}

}

void MenuOption_Enter(Key_Pressed_t key)
{
 8001dec:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001dee:	2101      	movs	r1, #1
 8001df0:	2007      	movs	r0, #7
 8001df2:	f7ff feb9 	bl	8001b68 <lcd_set_xy>
	lcd_send(255,DATA);
 8001df6:	2101      	movs	r1, #1
 8001df8:	20ff      	movs	r0, #255	; 0xff
 8001dfa:	f7ff fdf5 	bl	80019e8 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001dfe:	f7fe fe13 	bl	8000a28 <SettingsWriteToFlash_CRC>
	SelectedOptionValue = SettingsData.Option1;
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <MenuOption_Enter+0x28>)
	delay_ms(200);
 8001e04:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue = SettingsData.Option1;
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <MenuOption_Enter+0x2c>)
 8001e0a:	601a      	str	r2, [r3, #0]
}
 8001e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001e10:	f7ff b984 	b.w	800111c <delay_ms>
 8001e14:	20000154 	.word	0x20000154
 8001e18:	20000a1c 	.word	0x20000a1c

08001e1c <MenuOption_Enter1>:

void MenuOption_Enter1(Key_Pressed_t key)
{
 8001e1c:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2007      	movs	r0, #7
 8001e22:	f7ff fea1 	bl	8001b68 <lcd_set_xy>
	lcd_send(255,DATA);
 8001e26:	2101      	movs	r1, #1
 8001e28:	20ff      	movs	r0, #255	; 0xff
 8001e2a:	f7ff fddd 	bl	80019e8 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001e2e:	f7fe fdfb 	bl	8000a28 <SettingsWriteToFlash_CRC>
	SelectedOptionValue1 = SettingsData.Option2;
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <MenuOption_Enter1+0x28>)
	delay_ms(200);
 8001e34:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue1 = SettingsData.Option2;
 8001e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <MenuOption_Enter1+0x2c>)
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001e40:	f7ff b96c 	b.w	800111c <delay_ms>
 8001e44:	20000154 	.word	0x20000154
 8001e48:	20000a14 	.word	0x20000a14

08001e4c <Generic_Write>:
	if (Text) PrintToLCD_xy(Text,0,0);
 8001e4c:	b118      	cbz	r0, 8001e56 <Generic_Write+0xa>
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4611      	mov	r1, r2
 8001e52:	f7ff bf0c 	b.w	8001c6e <PrintToLCD_xy>
}
 8001e56:	4770      	bx	lr

08001e58 <MenuDischarge_Enter>:
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e58:	f649 23af 	movw	r3, #39599	; 0x9aaf
{
 8001e5c:	b510      	push	{r4, lr}
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e5e:	4c0e      	ldr	r4, [pc, #56]	; (8001e98 <MenuDischarge_Enter+0x40>)
{
 8001e60:	b090      	sub	sp, #64	; 0x40
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d915      	bls.n	8001e94 <MenuDischarge_Enter+0x3c>
		ClockStringNoSec(DischargeTimeSec,s_clock);
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MenuDischarge_Enter+0x44>)
 8001e6a:	a90b      	add	r1, sp, #44	; 0x2c
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	f7ff fc73 	bl	8001758 <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8001e72:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e76:	6820      	ldr	r0, [r4, #0]
 8001e78:	a901      	add	r1, sp, #4
 8001e7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e7e:	f7ff faa5 	bl	80013cc <itoaP>
 8001e82:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <MenuDischarge_Enter+0x48>)
 8001e84:	ab06      	add	r3, sp, #24
 8001e86:	aa0b      	add	r2, sp, #44	; 0x2c
 8001e88:	f7ff fbd0 	bl	800162c <Merge3Strings>
		WriteInLOGc(strout,DISCHARGE_l);
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	a806      	add	r0, sp, #24
 8001e90:	f7ff f844 	bl	8000f1c <WriteInLOGc>
}
 8001e94:	b010      	add	sp, #64	; 0x40
 8001e96:	bd10      	pop	{r4, pc}
 8001e98:	20000780 	.word	0x20000780
 8001e9c:	20000798 	.word	0x20000798
 8001ea0:	08006276 	.word	0x08006276

08001ea4 <MenuCharge_Enter>:
{
 8001ea4:	b510      	push	{r4, lr}
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001ea6:	4c16      	ldr	r4, [pc, #88]	; (8001f00 <MenuCharge_Enter+0x5c>)
 8001ea8:	4816      	ldr	r0, [pc, #88]	; (8001f04 <MenuCharge_Enter+0x60>)
{
 8001eaa:	b090      	sub	sp, #64	; 0x40
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001eac:	f003 fb7a 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6821      	ldr	r1, [r4, #0]
 8001eb4:	4814      	ldr	r0, [pc, #80]	; (8001f08 <MenuCharge_Enter+0x64>)
 8001eb6:	f003 fbb3 	bl	8005620 <printToBufferUART1D>
	if (BatteryCapacityCharge/3600>10)
 8001eba:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d91b      	bls.n	8001efc <MenuCharge_Enter+0x58>
		ClockStringNoSec(ChargeTimeSec,s_clock);
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <MenuCharge_Enter+0x68>)
 8001ec6:	a90b      	add	r1, sp, #44	; 0x2c
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f7ff fc45 	bl	8001758 <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityCharge/3600,str),"mAh",s_clock,strout);
 8001ece:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ed2:	6820      	ldr	r0, [r4, #0]
 8001ed4:	a901      	add	r1, sp, #4
 8001ed6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001eda:	f7ff fa77 	bl	80013cc <itoaP>
 8001ede:	ab06      	add	r3, sp, #24
 8001ee0:	aa0b      	add	r2, sp, #44	; 0x2c
 8001ee2:	490b      	ldr	r1, [pc, #44]	; (8001f10 <MenuCharge_Enter+0x6c>)
 8001ee4:	f7ff fba2 	bl	800162c <Merge3Strings>
		WriteInLOGc(strout,CHARGE_H);
 8001ee8:	2101      	movs	r1, #1
 8001eea:	a806      	add	r0, sp, #24
 8001eec:	f7ff f816 	bl	8000f1c <WriteInLOGc>
		logDebug(strout);
 8001ef0:	4804      	ldr	r0, [pc, #16]	; (8001f04 <MenuCharge_Enter+0x60>)
 8001ef2:	f003 fb57 	bl	80055a4 <printToBufferWithoutEndUART1>
 8001ef6:	a806      	add	r0, sp, #24
 8001ef8:	f003 faee 	bl	80054d8 <printToBufferUART1>
}
 8001efc:	b010      	add	sp, #64	; 0x40
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	2000077c 	.word	0x2000077c
 8001f04:	08005c58 	.word	0x08005c58
 8001f08:	0800627a 	.word	0x0800627a
 8001f0c:	2000078c 	.word	0x2000078c
 8001f10:	08006276 	.word	0x08006276

08001f14 <SelectedOption.part.0>:
void SelectedOption(void)
 8001f14:	b508      	push	{r3, lr}
		lcd_set_xy(7,1);
 8001f16:	2101      	movs	r1, #1
 8001f18:	2007      	movs	r0, #7
 8001f1a:	f7ff fe25 	bl	8001b68 <lcd_set_xy>
}
 8001f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_send(255,DATA);
 8001f22:	2101      	movs	r1, #1
 8001f24:	20ff      	movs	r0, #255	; 0xff
 8001f26:	f7ff bd5f 	b.w	80019e8 <lcd_send>
	...

08001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>:
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	fa91 f1a1 	rbit	r1, r1
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001f36:	fab1 f381 	clz	r3, r1
 8001f3a:	4c10      	ldr	r4, [pc, #64]	; (8001f7c <LL_ADC_SetChannelSamplingTime.constprop.0+0x50>)
 8001f3c:	f000 7100 	and.w	r1, r0, #33554432	; 0x2000000
 8001f40:	40d9      	lsrs	r1, r3
 8001f42:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
  
  MODIFY_REG(*preg,
 8001f46:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8001f4a:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8001f4e:	fa92 f3a2 	rbit	r3, r2
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	2607      	movs	r6, #7
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	fa20 f303 	lsr.w	r3, r0, r3
 8001f64:	fa06 f303 	lsl.w	r3, r6, r3
 8001f68:	40d0      	lsrs	r0, r2
 8001f6a:	ea25 0303 	bic.w	r3, r5, r3
 8001f6e:	fa06 f000 	lsl.w	r0, r6, r0
 8001f72:	4318      	orrs	r0, r3
 8001f74:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
 8001f7a:	bf00      	nop
 8001f7c:	4001240c 	.word	0x4001240c

08001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>:
 8001f80:	f44f 7340 	mov.w	r3, #768	; 0x300
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8001f84:	b530      	push	{r4, r5, lr}
 8001f86:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f8a:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8001f8e:	241f      	movs	r4, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001f90:	4d08      	ldr	r5, [pc, #32]	; (8001fb4 <LL_ADC_REG_SetSequencerRanks.constprop.0+0x34>)
 8001f92:	f400 7240 	and.w	r2, r0, #768	; 0x300
 8001f96:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8001f98:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001f9c:	f000 001f 	and.w	r0, r0, #31
 8001fa0:	4084      	lsls	r4, r0
 8001fa2:	f001 011f 	and.w	r1, r1, #31
 8001fa6:	ea23 0304 	bic.w	r3, r3, r4
 8001faa:	4081      	lsls	r1, r0
 8001fac:	4319      	orrs	r1, r3
 8001fae:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8001fb2:	bd30      	pop	{r4, r5, pc}
 8001fb4:	4001242c 	.word	0x4001242c

08001fb8 <NVIC_EncodePriority.constprop.0>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001fb8:	2000      	movs	r0, #0
 8001fba:	4770      	bx	lr

08001fbc <MenuTraining_WriteInLOG>:
	s[1] = '\0';
 8001fbc:	2300      	movs	r3, #0
{
 8001fbe:	b510      	push	{r4, lr}
 8001fc0:	b096      	sub	sp, #88	; 0x58
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	4608      	mov	r0, r1
	ClockStringNoSec(Time,s_clock);
 8001fc6:	a911      	add	r1, sp, #68	; 0x44
	s[0] = c;
 8001fc8:	f88d 2004 	strb.w	r2, [sp, #4]
	s[1] = '\0';
 8001fcc:	f88d 3005 	strb.w	r3, [sp, #5]
	ClockStringNoSec(Time,s_clock);
 8001fd0:	f7ff fbc2 	bl	8001758 <ClockStringNoSec>
	Merge3Strings(itoaP(Capacity/3600,str),"mAh",s_clock,strout);
 8001fd4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001fd8:	a902      	add	r1, sp, #8
 8001fda:	fbb4 f0f0 	udiv	r0, r4, r0
 8001fde:	f7ff f9f5 	bl	80013cc <itoaP>
 8001fe2:	ab07      	add	r3, sp, #28
 8001fe4:	aa11      	add	r2, sp, #68	; 0x44
 8001fe6:	4907      	ldr	r1, [pc, #28]	; (8002004 <MenuTraining_WriteInLOG+0x48>)
 8001fe8:	f7ff fb20 	bl	800162c <Merge3Strings>
	Merge2Strings(s,strout,strout1);
 8001fec:	aa0c      	add	r2, sp, #48	; 0x30
 8001fee:	a907      	add	r1, sp, #28
 8001ff0:	a801      	add	r0, sp, #4
 8001ff2:	f7ff fb05 	bl	8001600 <Merge2Strings>
	WriteInLOGc(strout1,TRAINING_);
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	a80c      	add	r0, sp, #48	; 0x30
 8001ffa:	f7fe ff8f 	bl	8000f1c <WriteInLOGc>
}
 8001ffe:	b016      	add	sp, #88	; 0x58
 8002000:	bd10      	pop	{r4, pc}
 8002002:	bf00      	nop
 8002004:	08006276 	.word	0x08006276

08002008 <MenuLog>:
	if (key == KEY_NEXT)
 8002008:	2802      	cmp	r0, #2
{
 800200a:	b538      	push	{r3, r4, r5, lr}
 800200c:	4c1e      	ldr	r4, [pc, #120]	; (8002088 <MenuLog+0x80>)
 800200e:	4d1f      	ldr	r5, [pc, #124]	; (800208c <MenuLog+0x84>)
	if (key == KEY_NEXT)
 8002010:	d12a      	bne.n	8002068 <MenuLog+0x60>
		i_LogItems++;
 8002012:	8823      	ldrh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8002014:	682a      	ldr	r2, [r5, #0]
		i_LogItems++;
 8002016:	3301      	adds	r3, #1
 8002018:	b21b      	sxth	r3, r3
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 800201a:	4293      	cmp	r3, r2
		i_LogItems++;
 800201c:	8023      	strh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 800201e:	d301      	bcc.n	8002024 <MenuLog+0x1c>
 8002020:	2300      	movs	r3, #0
 8002022:	8023      	strh	r3, [r4, #0]
	lcd_set_xy(0,0);
 8002024:	2100      	movs	r1, #0
 8002026:	4608      	mov	r0, r1
 8002028:	f7ff fd9e 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(LoggingData.Records[LoggingData.RecordsQuantity - i_LogItems-1]);
 800202c:	6828      	ldr	r0, [r5, #0]
 800202e:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002032:	3801      	subs	r0, #1
 8002034:	1ac0      	subs	r0, r0, r3
 8002036:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800203a:	3004      	adds	r0, #4
 800203c:	4428      	add	r0, r5
 800203e:	f7ff fe13 	bl	8001c68 <PrintToLCD>
	logDebugD("i_LogItems: ",i_LogItems,0);
 8002042:	4813      	ldr	r0, [pc, #76]	; (8002090 <MenuLog+0x88>)
 8002044:	f003 faae 	bl	80055a4 <printToBufferWithoutEndUART1>
 8002048:	f9b4 1000 	ldrsh.w	r1, [r4]
 800204c:	2200      	movs	r2, #0
 800204e:	4811      	ldr	r0, [pc, #68]	; (8002094 <MenuLog+0x8c>)
 8002050:	f003 fae6 	bl	8005620 <printToBufferUART1D>
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8002054:	480e      	ldr	r0, [pc, #56]	; (8002090 <MenuLog+0x88>)
 8002056:	f003 faa5 	bl	80055a4 <printToBufferWithoutEndUART1>
 800205a:	6829      	ldr	r1, [r5, #0]
 800205c:	2200      	movs	r2, #0
}
 800205e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 8002062:	480d      	ldr	r0, [pc, #52]	; (8002098 <MenuLog+0x90>)
 8002064:	f003 badc 	b.w	8005620 <printToBufferUART1D>
	if (key == KEY_BACK)
 8002068:	2801      	cmp	r0, #1
 800206a:	d1db      	bne.n	8002024 <MenuLog+0x1c>
		i_LogItems--;
 800206c:	8823      	ldrh	r3, [r4, #0]
 800206e:	3b01      	subs	r3, #1
 8002070:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8002072:	2b00      	cmp	r3, #0
		i_LogItems--;
 8002074:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8002076:	dad5      	bge.n	8002024 <MenuLog+0x1c>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	3b01      	subs	r3, #1
 800207c:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=0;
 800207e:	2b00      	cmp	r3, #0
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 8002080:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=0;
 8002082:	dbcd      	blt.n	8002020 <MenuLog+0x18>
 8002084:	e7ce      	b.n	8002024 <MenuLog+0x1c>
 8002086:	bf00      	nop
 8002088:	200007e2 	.word	0x200007e2
 800208c:	20000878 	.word	0x20000878
 8002090:	08005c58 	.word	0x08005c58
 8002094:	08006282 	.word	0x08006282
 8002098:	0800628f 	.word	0x0800628f

0800209c <MenuCalibration_CURRENT_Out_to_0>:
	lcd_set_xy(0,0);
 800209c:	2100      	movs	r1, #0
{
 800209e:	b510      	push	{r4, lr}
 80020a0:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80020a2:	4608      	mov	r0, r1
 80020a4:	f7ff fd60 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <MenuCalibration_CURRENT_Out_to_0+0x38>)
 80020aa:	8818      	ldrh	r0, [r3, #0]
 80020ac:	b200      	sxth	r0, r0
 80020ae:	f7ff f951 	bl	8001354 <itoa>
 80020b2:	f7ff fdd9 	bl	8001c68 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 80020b6:	4808      	ldr	r0, [pc, #32]	; (80020d8 <MenuCalibration_CURRENT_Out_to_0+0x3c>)
 80020b8:	f7ff fdd6 	bl	8001c68 <PrintToLCD>
	if (key == KEY_NEXT)
 80020bc:	2c02      	cmp	r4, #2
 80020be:	d108      	bne.n	80020d2 <MenuCalibration_CURRENT_Out_to_0+0x36>
}
 80020c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent = Current_Out;
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <MenuCalibration_CURRENT_Out_to_0+0x40>)
 80020c6:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <MenuCalibration_CURRENT_Out_to_0+0x44>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	6093      	str	r3, [r2, #8]
		CalibrationWriteToFlash_CRC();
 80020ce:	f7fe bc75 	b.w	80009bc <CalibrationWriteToFlash_CRC>
}
 80020d2:	bd10      	pop	{r4, pc}
 80020d4:	2000085a 	.word	0x2000085a
 80020d8:	080062a2 	.word	0x080062a2
 80020dc:	200002b2 	.word	0x200002b2
 80020e0:	20000004 	.word	0x20000004

080020e4 <MenuCalibration_CURRENT_Load_to_0>:
	lcd_set_xy(0,0);
 80020e4:	2100      	movs	r1, #0
{
 80020e6:	b510      	push	{r4, lr}
 80020e8:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80020ea:	4608      	mov	r0, r1
 80020ec:	f7ff fd3c 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(	itoa(Current));
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <MenuCalibration_CURRENT_Load_to_0+0x38>)
 80020f2:	8818      	ldrh	r0, [r3, #0]
 80020f4:	b200      	sxth	r0, r0
 80020f6:	f7ff f92d 	bl	8001354 <itoa>
 80020fa:	f7ff fdb5 	bl	8001c68 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 80020fe:	4808      	ldr	r0, [pc, #32]	; (8002120 <MenuCalibration_CURRENT_Load_to_0+0x3c>)
 8002100:	f7ff fdb2 	bl	8001c68 <PrintToLCD>
	if (key == KEY_NEXT)
 8002104:	2c02      	cmp	r4, #2
 8002106:	d108      	bne.n	800211a <MenuCalibration_CURRENT_Load_to_0+0x36>
}
 8002108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent1 = Current_load;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <MenuCalibration_CURRENT_Load_to_0+0x40>)
 800210e:	4a06      	ldr	r2, [pc, #24]	; (8002128 <MenuCalibration_CURRENT_Load_to_0+0x44>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b21b      	sxth	r3, r3
 8002114:	6113      	str	r3, [r2, #16]
		CalibrationWriteToFlash_CRC();
 8002116:	f7fe bc51 	b.w	80009bc <CalibrationWriteToFlash_CRC>
}
 800211a:	bd10      	pop	{r4, pc}
 800211c:	2000085a 	.word	0x2000085a
 8002120:	080062a2 	.word	0x080062a2
 8002124:	200002b4 	.word	0x200002b4
 8002128:	20000004 	.word	0x20000004

0800212c <MenuCalibration_BackToFactory>:
	lcd_set_xy(0,0);
 800212c:	2100      	movs	r1, #0
{
 800212e:	b510      	push	{r4, lr}
 8002130:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002132:	4608      	mov	r0, r1
 8002134:	f7ff fd18 	bl	8001b68 <lcd_set_xy>
	PrintToLCD("Factory-press >>");
 8002138:	481f      	ldr	r0, [pc, #124]	; (80021b8 <MenuCalibration_BackToFactory+0x8c>)
 800213a:	f7ff fd95 	bl	8001c68 <PrintToLCD>
	if (key == KEY_NEXT)
 800213e:	2c02      	cmp	r4, #2
 8002140:	d130      	bne.n	80021a4 <MenuCalibration_BackToFactory+0x78>
		FactoryWriteToFlash_CRC();
 8002142:	f7fe fd13 	bl	8000b6c <FactoryWriteToFlash_CRC>
		EEpromReadStatus = ReadFromFlash();
 8002146:	f7fe fbf7 	bl	8000938 <ReadFromFlash>
		lcd_set_xy(0,0);
 800214a:	2100      	movs	r1, #0
		EEpromReadStatus = ReadFromFlash();
 800214c:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 800214e:	4608      	mov	r0, r1
 8002150:	f7ff fd0a 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("In Proccess ....");
 8002154:	4819      	ldr	r0, [pc, #100]	; (80021bc <MenuCalibration_BackToFactory+0x90>)
 8002156:	f7ff fd87 	bl	8001c68 <PrintToLCD>
		delay_ms(2000);
 800215a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800215e:	f7fe ffdd 	bl	800111c <delay_ms>
		lcd_set_xy(0,0);
 8002162:	2100      	movs	r1, #0
 8002164:	4608      	mov	r0, r1
 8002166:	f7ff fcff 	bl	8001b68 <lcd_set_xy>
		if (EEpromReadStatus == 1)
 800216a:	2c01      	cmp	r4, #1
 800216c:	d11b      	bne.n	80021a6 <MenuCalibration_BackToFactory+0x7a>
			PrintToLCD("Factory are OK  ");
 800216e:	4814      	ldr	r0, [pc, #80]	; (80021c0 <MenuCalibration_BackToFactory+0x94>)
 8002170:	f7ff fd7a 	bl	8001c68 <PrintToLCD>
			WriteInLOG("Factory are OK");
 8002174:	4813      	ldr	r0, [pc, #76]	; (80021c4 <MenuCalibration_BackToFactory+0x98>)
 8002176:	f7fe fe0b 	bl	8000d90 <WriteInLOG>
			delay_ms(2000);
 800217a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800217e:	f7fe ffcd 	bl	800111c <delay_ms>
		    BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MenuCalibration_BackToFactory+0x9c>)
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <MenuCalibration_BackToFactory+0xa0>)
 8002188:	601a      	str	r2, [r3, #0]
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 800218a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <MenuCalibration_BackToFactory+0xa4>)
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	434a      	muls	r2, r1
 8002194:	490f      	ldr	r1, [pc, #60]	; (80021d4 <MenuCalibration_BackToFactory+0xa8>)
 8002196:	600a      	str	r2, [r1, #0]
		    SelectedOptionValue = SettingsData.Option1;
 8002198:	6899      	ldr	r1, [r3, #8]
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <MenuCalibration_BackToFactory+0xac>)
 800219c:	6011      	str	r1, [r2, #0]
		    SelectedOptionValue1 = SettingsData.Option2;
 800219e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MenuCalibration_BackToFactory+0xb0>)
 80021a2:	601a      	str	r2, [r3, #0]
}
 80021a4:	bd10      	pop	{r4, pc}
			PrintToLCD("EEprom read FAIL");
 80021a6:	480e      	ldr	r0, [pc, #56]	; (80021e0 <MenuCalibration_BackToFactory+0xb4>)
 80021a8:	f7ff fd5e 	bl	8001c68 <PrintToLCD>
}
 80021ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			delay_ms(4000);
 80021b0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80021b4:	f7fe bfb2 	b.w	800111c <delay_ms>
 80021b8:	080062b1 	.word	0x080062b1
 80021bc:	080062c2 	.word	0x080062c2
 80021c0:	080062d3 	.word	0x080062d3
 80021c4:	080062e4 	.word	0x080062e4
 80021c8:	200000f4 	.word	0x200000f4
 80021cc:	20000784 	.word	0x20000784
 80021d0:	20000154 	.word	0x20000154
 80021d4:	20000a18 	.word	0x20000a18
 80021d8:	20000a1c 	.word	0x20000a1c
 80021dc:	20000a14 	.word	0x20000a14
 80021e0:	080062f3 	.word	0x080062f3

080021e4 <MenuSettingsChargeTime>:
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 80021e4:	2802      	cmp	r0, #2
{
 80021e6:	b510      	push	{r4, lr}
 80021e8:	4c0e      	ldr	r4, [pc, #56]	; (8002224 <MenuSettingsChargeTime+0x40>)
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 80021ea:	d115      	bne.n	8002218 <MenuSettingsChargeTime+0x34>
 80021ec:	6923      	ldr	r3, [r4, #16]
 80021ee:	3301      	adds	r3, #1
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 80021f0:	6123      	str	r3, [r4, #16]
	lcd_set_xy(0,0);
 80021f2:	2100      	movs	r1, #0
 80021f4:	4608      	mov	r0, r1
 80021f6:	f7ff fcb7 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeTime));
 80021fa:	6920      	ldr	r0, [r4, #16]
 80021fc:	f7ff f8aa 	bl	8001354 <itoa>
 8002200:	f7ff fd32 	bl	8001c68 <PrintToLCD>
	PrintToLCD("h   ");
 8002204:	4808      	ldr	r0, [pc, #32]	; (8002228 <MenuSettingsChargeTime+0x44>)
 8002206:	f7ff fd2f 	bl	8001c68 <PrintToLCD>
    ChargeDurationSec = SettingsData.ChargeTime*3600;
 800220a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800220e:	6922      	ldr	r2, [r4, #16]
 8002210:	4353      	muls	r3, r2
 8002212:	4a06      	ldr	r2, [pc, #24]	; (800222c <MenuSettingsChargeTime+0x48>)
 8002214:	6013      	str	r3, [r2, #0]
}
 8002216:	bd10      	pop	{r4, pc}
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 8002218:	2801      	cmp	r0, #1
 800221a:	d1ea      	bne.n	80021f2 <MenuSettingsChargeTime+0xe>
 800221c:	6923      	ldr	r3, [r4, #16]
 800221e:	3b01      	subs	r3, #1
 8002220:	e7e6      	b.n	80021f0 <MenuSettingsChargeTime+0xc>
 8002222:	bf00      	nop
 8002224:	20000154 	.word	0x20000154
 8002228:	08006304 	.word	0x08006304
 800222c:	20000a18 	.word	0x20000a18

08002230 <MenuSettingsBatteryType>:
{
 8002230:	b510      	push	{r4, lr}
 8002232:	4c33      	ldr	r4, [pc, #204]	; (8002300 <MenuSettingsBatteryType+0xd0>)
	if (key == KEY_NEXT)
 8002234:	2802      	cmp	r0, #2
 8002236:	f994 3000 	ldrsb.w	r3, [r4]
 800223a:	d10d      	bne.n	8002258 <MenuSettingsBatteryType+0x28>
		CountShowBT++;
 800223c:	3301      	adds	r3, #1
 800223e:	b25b      	sxtb	r3, r3
		if (CountShowBT==MAXITEM_BT) CountShowBT=0;
 8002240:	2b07      	cmp	r3, #7
 8002242:	d10f      	bne.n	8002264 <MenuSettingsBatteryType+0x34>
 8002244:	2300      	movs	r3, #0
 8002246:	7023      	strb	r3, [r4, #0]
		lcd_set_xy(0,0);
 8002248:	2100      	movs	r1, #0
 800224a:	4608      	mov	r0, r1
 800224c:	f7ff fc8c 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("12V Pb Battery  ");
 8002250:	482c      	ldr	r0, [pc, #176]	; (8002304 <MenuSettingsBatteryType+0xd4>)
 8002252:	f7ff fd09 	bl	8001c68 <PrintToLCD>
 8002256:	e00a      	b.n	800226e <MenuSettingsBatteryType+0x3e>
	if (key == KEY_BACK)
 8002258:	2801      	cmp	r0, #1
 800225a:	d104      	bne.n	8002266 <MenuSettingsBatteryType+0x36>
		CountShowBT--;
 800225c:	3b01      	subs	r3, #1
 800225e:	b25b      	sxtb	r3, r3
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 8002260:	2b00      	cmp	r3, #0
 8002262:	db10      	blt.n	8002286 <MenuSettingsBatteryType+0x56>
		CountShowBT++;
 8002264:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 0)
 8002266:	f994 3000 	ldrsb.w	r3, [r4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0ec      	beq.n	8002248 <MenuSettingsBatteryType+0x18>
	if(CountShowBT == 1)
 800226e:	f994 3000 	ldrsb.w	r3, [r4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d109      	bne.n	800228a <MenuSettingsBatteryType+0x5a>
		lcd_set_xy(0,0);
 8002276:	2100      	movs	r1, #0
 8002278:	4608      	mov	r0, r1
 800227a:	f7ff fc75 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("Li ion  Battery  ");
 800227e:	4822      	ldr	r0, [pc, #136]	; (8002308 <MenuSettingsBatteryType+0xd8>)
 8002280:	f7ff fcf2 	bl	8001c68 <PrintToLCD>
 8002284:	e001      	b.n	800228a <MenuSettingsBatteryType+0x5a>
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 8002286:	2306      	movs	r3, #6
 8002288:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 2)
 800228a:	f994 3000 	ldrsb.w	r3, [r4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d106      	bne.n	80022a0 <MenuSettingsBatteryType+0x70>
		lcd_set_xy(0,0);
 8002292:	2100      	movs	r1, #0
 8002294:	4608      	mov	r0, r1
 8002296:	f7ff fc67 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("LiFePo4 Battery ");
 800229a:	481c      	ldr	r0, [pc, #112]	; (800230c <MenuSettingsBatteryType+0xdc>)
 800229c:	f7ff fce4 	bl	8001c68 <PrintToLCD>
	if(CountShowBT == 3)
 80022a0:	f994 3000 	ldrsb.w	r3, [r4]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d106      	bne.n	80022b6 <MenuSettingsBatteryType+0x86>
		lcd_set_xy(0,0);
 80022a8:	2100      	movs	r1, #0
 80022aa:	4608      	mov	r0, r1
 80022ac:	f7ff fc5c 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("LiTo Battery   ");
 80022b0:	4817      	ldr	r0, [pc, #92]	; (8002310 <MenuSettingsBatteryType+0xe0>)
 80022b2:	f7ff fcd9 	bl	8001c68 <PrintToLCD>
	if(CountShowBT == 4)
 80022b6:	f994 3000 	ldrsb.w	r3, [r4]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d106      	bne.n	80022cc <MenuSettingsBatteryType+0x9c>
		lcd_set_xy(0,0);
 80022be:	2100      	movs	r1, #0
 80022c0:	4608      	mov	r0, r1
 80022c2:	f7ff fc51 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("NIMh 9.6V Bat.  ");
 80022c6:	4813      	ldr	r0, [pc, #76]	; (8002314 <MenuSettingsBatteryType+0xe4>)
 80022c8:	f7ff fcce 	bl	8001c68 <PrintToLCD>
	if(CountShowBT == 5)
 80022cc:	f994 3000 	ldrsb.w	r3, [r4]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d106      	bne.n	80022e2 <MenuSettingsBatteryType+0xb2>
		lcd_set_xy(0,0);
 80022d4:	2100      	movs	r1, #0
 80022d6:	4608      	mov	r0, r1
 80022d8:	f7ff fc46 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("Min 1V  MAX 20V");
 80022dc:	480e      	ldr	r0, [pc, #56]	; (8002318 <MenuSettingsBatteryType+0xe8>)
 80022de:	f7ff fcc3 	bl	8001c68 <PrintToLCD>
	if(CountShowBT == 6)
 80022e2:	f994 3000 	ldrsb.w	r3, [r4]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d108      	bne.n	80022fc <MenuSettingsBatteryType+0xcc>
		lcd_set_xy(0,0);
 80022ea:	2100      	movs	r1, #0
 80022ec:	4608      	mov	r0, r1
 80022ee:	f7ff fc3b 	bl	8001b68 <lcd_set_xy>
}
 80022f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PrintToLCD("   OK to Exit  ");
 80022f6:	4809      	ldr	r0, [pc, #36]	; (800231c <MenuSettingsBatteryType+0xec>)
 80022f8:	f7ff bcb6 	b.w	8001c68 <PrintToLCD>
}
 80022fc:	bd10      	pop	{r4, pc}
 80022fe:	bf00      	nop
 8002300:	20000793 	.word	0x20000793
 8002304:	08006309 	.word	0x08006309
 8002308:	0800631a 	.word	0x0800631a
 800230c:	0800632c 	.word	0x0800632c
 8002310:	0800633d 	.word	0x0800633d
 8002314:	0800634d 	.word	0x0800634d
 8002318:	0800635e 	.word	0x0800635e
 800231c:	0800636e 	.word	0x0800636e

08002320 <MenuSettingsLowVolt>:
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 8002320:	2802      	cmp	r0, #2
{
 8002322:	b510      	push	{r4, lr}
 8002324:	4c0d      	ldr	r4, [pc, #52]	; (800235c <MenuSettingsLowVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 8002326:	d114      	bne.n	8002352 <MenuSettingsLowVolt+0x32>
 8002328:	69a3      	ldr	r3, [r4, #24]
 800232a:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 800232c:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 800232e:	2100      	movs	r1, #0
 8002330:	4608      	mov	r0, r1
 8002332:	f7ff fc19 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002336:	230a      	movs	r3, #10
 8002338:	69a0      	ldr	r0, [r4, #24]
 800233a:	2101      	movs	r1, #1
 800233c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002340:	f7ff f880 	bl	8001444 <itoa_koma>
 8002344:	f7ff fc90 	bl	8001c68 <PrintToLCD>
}
 8002348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <MenuSettingsLowVolt+0x40>)
 800234e:	f7ff bc8b 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 8002352:	2801      	cmp	r0, #1
 8002354:	d1eb      	bne.n	800232e <MenuSettingsLowVolt+0xe>
 8002356:	69a3      	ldr	r3, [r4, #24]
 8002358:	3b0a      	subs	r3, #10
 800235a:	e7e7      	b.n	800232c <MenuSettingsLowVolt+0xc>
 800235c:	20000154 	.word	0x20000154
 8002360:	0800622d 	.word	0x0800622d

08002364 <MenuSettingsMaxVolt>:
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 8002364:	2802      	cmp	r0, #2
{
 8002366:	b510      	push	{r4, lr}
 8002368:	4c0d      	ldr	r4, [pc, #52]	; (80023a0 <MenuSettingsMaxVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 800236a:	d114      	bne.n	8002396 <MenuSettingsMaxVolt+0x32>
 800236c:	6a23      	ldr	r3, [r4, #32]
 800236e:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 8002370:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 8002372:	2100      	movs	r1, #0
 8002374:	4608      	mov	r0, r1
 8002376:	f7ff fbf7 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800237a:	230a      	movs	r3, #10
 800237c:	6a20      	ldr	r0, [r4, #32]
 800237e:	2101      	movs	r1, #1
 8002380:	fbb0 f0f3 	udiv	r0, r0, r3
 8002384:	f7ff f85e 	bl	8001444 <itoa_koma>
 8002388:	f7ff fc6e 	bl	8001c68 <PrintToLCD>
}
 800238c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <MenuSettingsMaxVolt+0x40>)
 8002392:	f7ff bc69 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 8002396:	2801      	cmp	r0, #1
 8002398:	d1eb      	bne.n	8002372 <MenuSettingsMaxVolt+0xe>
 800239a:	6a23      	ldr	r3, [r4, #32]
 800239c:	3b0a      	subs	r3, #10
 800239e:	e7e7      	b.n	8002370 <MenuSettingsMaxVolt+0xc>
 80023a0:	20000154 	.word	0x20000154
 80023a4:	0800622d 	.word	0x0800622d

080023a8 <MenuSettingsSwngChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 80023a8:	2802      	cmp	r0, #2
{
 80023aa:	b510      	push	{r4, lr}
 80023ac:	4c0b      	ldr	r4, [pc, #44]	; (80023dc <MenuSettingsSwngChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 80023ae:	d110      	bne.n	80023d2 <MenuSettingsSwngChrgTime+0x2a>
 80023b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023b2:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 80023b4:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 80023b6:	2100      	movs	r1, #0
 80023b8:	4608      	mov	r0, r1
 80023ba:	f7ff fbd5 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 80023be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80023c0:	f7fe ffc8 	bl	8001354 <itoa>
 80023c4:	f7ff fc50 	bl	8001c68 <PrintToLCD>
}
 80023c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 80023cc:	4804      	ldr	r0, [pc, #16]	; (80023e0 <MenuSettingsSwngChrgTime+0x38>)
 80023ce:	f7ff bc4b 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 80023d2:	2801      	cmp	r0, #1
 80023d4:	d1ef      	bne.n	80023b6 <MenuSettingsSwngChrgTime+0xe>
 80023d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	e7eb      	b.n	80023b4 <MenuSettingsSwngChrgTime+0xc>
 80023dc:	20000154 	.word	0x20000154
 80023e0:	0800637e 	.word	0x0800637e

080023e4 <MenuSettingsSwngDChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 80023e4:	2802      	cmp	r0, #2
{
 80023e6:	b510      	push	{r4, lr}
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <MenuSettingsSwngDChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 80023ea:	d110      	bne.n	800240e <MenuSettingsSwngDChrgTime+0x2a>
 80023ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ee:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 80023f0:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 80023f2:	2100      	movs	r1, #0
 80023f4:	4608      	mov	r0, r1
 80023f6:	f7ff fbb7 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 80023fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80023fc:	f7fe ffaa 	bl	8001354 <itoa>
 8002400:	f7ff fc32 	bl	8001c68 <PrintToLCD>
}
 8002404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002408:	4804      	ldr	r0, [pc, #16]	; (800241c <MenuSettingsSwngDChrgTime+0x38>)
 800240a:	f7ff bc2d 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 800240e:	2801      	cmp	r0, #1
 8002410:	d1ef      	bne.n	80023f2 <MenuSettingsSwngDChrgTime+0xe>
 8002412:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002414:	3b01      	subs	r3, #1
 8002416:	e7eb      	b.n	80023f0 <MenuSettingsSwngDChrgTime+0xc>
 8002418:	20000154 	.word	0x20000154
 800241c:	0800637e 	.word	0x0800637e

08002420 <MenuSettingsChargeAddapt>:
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 8002420:	2802      	cmp	r0, #2
{
 8002422:	b538      	push	{r3, r4, r5, lr}
 8002424:	4c1a      	ldr	r4, [pc, #104]	; (8002490 <MenuSettingsChargeAddapt+0x70>)
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 8002426:	d12d      	bne.n	8002484 <MenuSettingsChargeAddapt+0x64>
 8002428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800242a:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 800242c:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 800242e:	2100      	movs	r1, #0
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002430:	250a      	movs	r5, #10
	lcd_set_xy(0,0);
 8002432:	4608      	mov	r0, r1
 8002434:	f7ff fb98 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8002438:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800243a:	f7fe ff8b 	bl	8001354 <itoa>
 800243e:	f7ff fc13 	bl	8001c68 <PrintToLCD>
	PrintToLCD("% ");
 8002442:	4814      	ldr	r0, [pc, #80]	; (8002494 <MenuSettingsChargeAddapt+0x74>)
 8002444:	f7ff fc10 	bl	8001c68 <PrintToLCD>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002448:	6a20      	ldr	r0, [r4, #32]
 800244a:	2101      	movs	r1, #1
 800244c:	fbb0 f0f5 	udiv	r0, r0, r5
 8002450:	f7fe fff8 	bl	8001444 <itoa_koma>
 8002454:	f7ff fc08 	bl	8001c68 <PrintToLCD>
	PrintToLCD("V ");
 8002458:	480f      	ldr	r0, [pc, #60]	; (8002498 <MenuSettingsChargeAddapt+0x78>)
 800245a:	f7ff fc05 	bl	8001c68 <PrintToLCD>
	PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage * SettingsData.ChargeAdapt/100))/10,1));
 800245e:	2264      	movs	r2, #100	; 0x64
 8002460:	6a23      	ldr	r3, [r4, #32]
 8002462:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002464:	2101      	movs	r1, #1
 8002466:	4358      	muls	r0, r3
 8002468:	fbb0 f0f2 	udiv	r0, r0, r2
 800246c:	1a18      	subs	r0, r3, r0
 800246e:	fbb0 f0f5 	udiv	r0, r0, r5
 8002472:	f7fe ffe7 	bl	8001444 <itoa_koma>
 8002476:	f7ff fbf7 	bl	8001c68 <PrintToLCD>
}
 800247a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("V   ");
 800247e:	4807      	ldr	r0, [pc, #28]	; (800249c <MenuSettingsChargeAddapt+0x7c>)
 8002480:	f7ff bbf2 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 8002484:	2801      	cmp	r0, #1
 8002486:	d1d2      	bne.n	800242e <MenuSettingsChargeAddapt+0xe>
 8002488:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800248a:	3b01      	subs	r3, #1
 800248c:	e7ce      	b.n	800242c <MenuSettingsChargeAddapt+0xc>
 800248e:	bf00      	nop
 8002490:	20000154 	.word	0x20000154
 8002494:	08006387 	.word	0x08006387
 8002498:	0800638a 	.word	0x0800638a
 800249c:	0800622d 	.word	0x0800622d

080024a0 <SelectedOption>:
	if (SelectedOptionValue == SettingsData.Option1)
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SelectedOption+0x14>)
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SelectedOption+0x18>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d101      	bne.n	80024b0 <SelectedOption+0x10>
 80024ac:	f7ff bd32 	b.w	8001f14 <SelectedOption.part.0>
}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000154 	.word	0x20000154
 80024b8:	20000a1c 	.word	0x20000a1c

080024bc <SelectedOption1>:
	if (SelectedOptionValue1 == SettingsData.Option2)
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SelectedOption1+0x14>)
 80024be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SelectedOption1+0x18>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d101      	bne.n	80024cc <SelectedOption1+0x10>
 80024c8:	f7ff bd24 	b.w	8001f14 <SelectedOption.part.0>
}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000154 	.word	0x20000154
 80024d4:	20000a14 	.word	0x20000a14

080024d8 <MenuSettingsSaveMenuPosWhenOFF>:
	lcd_set_xy(0,0);
 80024d8:	2100      	movs	r1, #0
{
 80024da:	b510      	push	{r4, lr}
 80024dc:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80024de:	4608      	mov	r0, r1
 80024e0:	f7ff fb42 	bl	8001b68 <lcd_set_xy>
	if (key == KEY_NEXT)
 80024e4:	2c02      	cmp	r4, #2
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <MenuSettingsSaveMenuPosWhenOFF+0x8c>)
 80024e8:	d10d      	bne.n	8002506 <MenuSettingsSaveMenuPosWhenOFF+0x2e>
		SettingsData.Option1++;
 80024ea:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 80024ec:	2a07      	cmp	r2, #7
		SettingsData.Option1++;
 80024ee:	f102 0101 	add.w	r1, r2, #1
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 80024f2:	d127      	bne.n	8002544 <MenuSettingsSaveMenuPosWhenOFF+0x6c>
 80024f4:	2201      	movs	r2, #1
 80024f6:	609a      	str	r2, [r3, #8]
			PrintToLCD("PowerSupply     ");
 80024f8:	481b      	ldr	r0, [pc, #108]	; (8002568 <MenuSettingsSaveMenuPosWhenOFF+0x90>)
			PrintToLCD("Swing           ");
 80024fa:	f7ff fbb5 	bl	8001c68 <PrintToLCD>
}
 80024fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption();
 8002502:	f7ff bfcd 	b.w	80024a0 <SelectedOption>
	if (key == KEY_BACK)
 8002506:	2c01      	cmp	r4, #1
 8002508:	d103      	bne.n	8002512 <MenuSettingsSaveMenuPosWhenOFF+0x3a>
		SettingsData.Option1--;
 800250a:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 800250c:	3a01      	subs	r2, #1
 800250e:	d015      	beq.n	800253c <MenuSettingsSaveMenuPosWhenOFF+0x64>
		SettingsData.Option1--;
 8002510:	609a      	str	r2, [r3, #8]
	switch (SettingsData.Option1)
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	3a01      	subs	r2, #1
 8002516:	2a06      	cmp	r2, #6
 8002518:	d820      	bhi.n	800255c <MenuSettingsSaveMenuPosWhenOFF+0x84>
 800251a:	a101      	add	r1, pc, #4	; (adr r1, 8002520 <MenuSettingsSaveMenuPosWhenOFF+0x48>)
 800251c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002520:	080024f9 	.word	0x080024f9
 8002524:	08002549 	.word	0x08002549
 8002528:	0800254d 	.word	0x0800254d
 800252c:	08002551 	.word	0x08002551
 8002530:	08002555 	.word	0x08002555
 8002534:	08002559 	.word	0x08002559
 8002538:	08002541 	.word	0x08002541
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 800253c:	2207      	movs	r2, #7
 800253e:	609a      	str	r2, [r3, #8]
			PrintToLCD("Swing           ");
 8002540:	480a      	ldr	r0, [pc, #40]	; (800256c <MenuSettingsSaveMenuPosWhenOFF+0x94>)
 8002542:	e7da      	b.n	80024fa <MenuSettingsSaveMenuPosWhenOFF+0x22>
		SettingsData.Option1++;
 8002544:	6099      	str	r1, [r3, #8]
 8002546:	e7e4      	b.n	8002512 <MenuSettingsSaveMenuPosWhenOFF+0x3a>
			PrintToLCD("Load Menu       ");
 8002548:	4809      	ldr	r0, [pc, #36]	; (8002570 <MenuSettingsSaveMenuPosWhenOFF+0x98>)
 800254a:	e7d6      	b.n	80024fa <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Charge CC CV    ");
 800254c:	4809      	ldr	r0, [pc, #36]	; (8002574 <MenuSettingsSaveMenuPosWhenOFF+0x9c>)
 800254e:	e7d4      	b.n	80024fa <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Charge addapt   ");
 8002550:	4809      	ldr	r0, [pc, #36]	; (8002578 <MenuSettingsSaveMenuPosWhenOFF+0xa0>)
 8002552:	e7d2      	b.n	80024fa <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("DisCharge       ");
 8002554:	4809      	ldr	r0, [pc, #36]	; (800257c <MenuSettingsSaveMenuPosWhenOFF+0xa4>)
 8002556:	e7d0      	b.n	80024fa <MenuSettingsSaveMenuPosWhenOFF+0x22>
			PrintToLCD("Training        ");
 8002558:	4809      	ldr	r0, [pc, #36]	; (8002580 <MenuSettingsSaveMenuPosWhenOFF+0xa8>)
 800255a:	e7ce      	b.n	80024fa <MenuSettingsSaveMenuPosWhenOFF+0x22>
			SettingsData.Option1 =1;
 800255c:	2201      	movs	r2, #1
 800255e:	609a      	str	r2, [r3, #8]
}
 8002560:	bd10      	pop	{r4, pc}
 8002562:	bf00      	nop
 8002564:	20000154 	.word	0x20000154
 8002568:	0800638d 	.word	0x0800638d
 800256c:	080063f3 	.word	0x080063f3
 8002570:	0800639e 	.word	0x0800639e
 8002574:	080063af 	.word	0x080063af
 8002578:	080063c0 	.word	0x080063c0
 800257c:	080063d1 	.word	0x080063d1
 8002580:	080063e2 	.word	0x080063e2

08002584 <MenuSettingsOutAfterPowerUp>:
	lcd_set_xy(0,0);
 8002584:	2100      	movs	r1, #0
{
 8002586:	b510      	push	{r4, lr}
 8002588:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800258a:	4608      	mov	r0, r1
 800258c:	f7ff faec 	bl	8001b68 <lcd_set_xy>
	if (key == KEY_NEXT)
 8002590:	2c02      	cmp	r4, #2
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MenuSettingsOutAfterPowerUp+0x60>)
 8002594:	d10d      	bne.n	80025b2 <MenuSettingsOutAfterPowerUp+0x2e>
		SettingsData.Option2++;
 8002596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 8002598:	2a03      	cmp	r2, #3
		SettingsData.Option2++;
 800259a:	f102 0101 	add.w	r1, r2, #1
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 800259e:	d11c      	bne.n	80025da <MenuSettingsOutAfterPowerUp+0x56>
 80025a0:	2201      	movs	r2, #1
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
			PrintToLCD("OFF             ");
 80025a4:	4810      	ldr	r0, [pc, #64]	; (80025e8 <MenuSettingsOutAfterPowerUp+0x64>)
			PrintToLCD("Previous        ");
 80025a6:	f7ff fb5f 	bl	8001c68 <PrintToLCD>
}
 80025aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption1();
 80025ae:	f7ff bf85 	b.w	80024bc <SelectedOption1>
	if (key == KEY_BACK)
 80025b2:	2c01      	cmp	r4, #1
 80025b4:	d103      	bne.n	80025be <MenuSettingsOutAfterPowerUp+0x3a>
		SettingsData.Option2--;
 80025b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 80025b8:	3a01      	subs	r2, #1
 80025ba:	d00a      	beq.n	80025d2 <MenuSettingsOutAfterPowerUp+0x4e>
		SettingsData.Option2--;
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
	switch (SettingsData.Option2)
 80025be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c0:	2a02      	cmp	r2, #2
 80025c2:	d00c      	beq.n	80025de <MenuSettingsOutAfterPowerUp+0x5a>
 80025c4:	2a03      	cmp	r2, #3
 80025c6:	d006      	beq.n	80025d6 <MenuSettingsOutAfterPowerUp+0x52>
 80025c8:	2a01      	cmp	r2, #1
 80025ca:	d0eb      	beq.n	80025a4 <MenuSettingsOutAfterPowerUp+0x20>
			SettingsData.Option2 =1;
 80025cc:	2201      	movs	r2, #1
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80025d0:	bd10      	pop	{r4, pc}
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 80025d2:	2203      	movs	r2, #3
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
			PrintToLCD("Previous        ");
 80025d6:	4805      	ldr	r0, [pc, #20]	; (80025ec <MenuSettingsOutAfterPowerUp+0x68>)
 80025d8:	e7e5      	b.n	80025a6 <MenuSettingsOutAfterPowerUp+0x22>
		SettingsData.Option2++;
 80025da:	6419      	str	r1, [r3, #64]	; 0x40
 80025dc:	e7ef      	b.n	80025be <MenuSettingsOutAfterPowerUp+0x3a>
			PrintToLCD("ON              ");
 80025de:	4804      	ldr	r0, [pc, #16]	; (80025f0 <MenuSettingsOutAfterPowerUp+0x6c>)
 80025e0:	e7e1      	b.n	80025a6 <MenuSettingsOutAfterPowerUp+0x22>
 80025e2:	bf00      	nop
 80025e4:	20000154 	.word	0x20000154
 80025e8:	08006404 	.word	0x08006404
 80025ec:	08006426 	.word	0x08006426
 80025f0:	08006415 	.word	0x08006415

080025f4 <BUT_Debrief>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <BUT_Debrief+0x58>)
 80025f6:	4916      	ldr	r1, [pc, #88]	; (8002650 <BUT_Debrief+0x5c>)
 80025f8:	689a      	ldr	r2, [r3, #8]
int16_t comp = 0;
void BUT_Debrief(void)
{
	Key_Pressed_t key;

	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4))
 80025fa:	f012 0f10 	tst.w	r2, #16
 80025fe:	d00c      	beq.n	800261a <BUT_Debrief+0x26>
 8002600:	689a      	ldr	r2, [r3, #8]
		key = KEY_OK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_5))
 8002602:	0690      	lsls	r0, r2, #26
 8002604:	d516      	bpl.n	8002634 <BUT_Debrief+0x40>
 8002606:	689a      	ldr	r2, [r3, #8]
		key = KEY_NEXT;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_6))
 8002608:	0652      	lsls	r2, r2, #25
 800260a:	d515      	bpl.n	8002638 <BUT_Debrief+0x44>
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	43db      	mvns	r3, r3
		key = KEY_BACK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_7))
 8002610:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002614:	d112      	bne.n	800263c <BUT_Debrief+0x48>
			{
			pressedKey = key;
			return;
		}
	}
	else comp=0;
 8002616:	800b      	strh	r3, [r1, #0]
 8002618:	4770      	bx	lr
		key = KEY_OK;
 800261a:	2203      	movs	r2, #3
		if (comp > THRESHOLD2)
 800261c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002620:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002624:	4283      	cmp	r3, r0
 8002626:	dd0b      	ble.n	8002640 <BUT_Debrief+0x4c>
			comp = THRESHOLD2 - 40;
 8002628:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800262c:	800b      	strh	r3, [r1, #0]
			pressedKey = key;
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <BUT_Debrief+0x60>)
 8002630:	701a      	strb	r2, [r3, #0]
			return;
 8002632:	e00a      	b.n	800264a <BUT_Debrief+0x56>
		key = KEY_NEXT;
 8002634:	2202      	movs	r2, #2
 8002636:	e7f1      	b.n	800261c <BUT_Debrief+0x28>
		key = KEY_BACK;
 8002638:	2201      	movs	r2, #1
 800263a:	e7ef      	b.n	800261c <BUT_Debrief+0x28>
		key = KEY_UP;
 800263c:	2204      	movs	r2, #4
 800263e:	e7ed      	b.n	800261c <BUT_Debrief+0x28>
		else comp++;
 8002640:	3301      	adds	r3, #1
 8002642:	b21b      	sxth	r3, r3
		if (comp == THRESHOLD)
 8002644:	2b14      	cmp	r3, #20
		else comp++;
 8002646:	800b      	strh	r3, [r1, #0]
		if (comp == THRESHOLD)
 8002648:	d0f1      	beq.n	800262e <BUT_Debrief+0x3a>
}
 800264a:	4770      	bx	lr
 800264c:	40010c00 	.word	0x40010c00
 8002650:	200007e0 	.word	0x200007e0
 8002654:	200007e4 	.word	0x200007e4

08002658 <BUT_GetKey>:

Key_Pressed_t BUT_GetKey(void)
{
	if (pressedKey) PowerOffTimesec=0;
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <BUT_GetKey+0x14>)
 800265a:	7818      	ldrb	r0, [r3, #0]
 800265c:	b110      	cbz	r0, 8002664 <BUT_GetKey+0xc>
 800265e:	2100      	movs	r1, #0
 8002660:	4a03      	ldr	r2, [pc, #12]	; (8002670 <BUT_GetKey+0x18>)
 8002662:	6011      	str	r1, [r2, #0]
	Key_Pressed_t key = pressedKey;
	pressedKey = 0;
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
	return key;
}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200007e4 	.word	0x200007e4
 8002670:	200007a4 	.word	0x200007a4

08002674 <Start_Timer_sec>:

void Start_Timer_sec()
{
	Timer_Sec = 0;
 8002674:	2200      	movs	r2, #0
 8002676:	4b03      	ldr	r3, [pc, #12]	; (8002684 <Start_Timer_sec+0x10>)
 8002678:	601a      	str	r2, [r3, #0]
	Status_Timer_Sec = 1;
 800267a:	2201      	movs	r2, #1
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <Start_Timer_sec+0x14>)
 800267e:	701a      	strb	r2, [r3, #0]
}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	200007d0 	.word	0x200007d0
 8002688:	200007aa 	.word	0x200007aa

0800268c <ClockOnLCD_noSec>:
	if (strlen1(string)<2) lcd_out("0",1);
	lcd_out(string,1);

}
void ClockOnLCD_noSec (uint32_t time)
{
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	4604      	mov	r4, r0
	char *string;
	//(" ",1);
	string = itoa(time/3600);
 8002690:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8002694:	fbb4 f0f0 	udiv	r0, r4, r0
 8002698:	f7fe fe5c 	bl	8001354 <itoa>
 800269c:	4605      	mov	r5, r0
	if (strlen1(string)<2) lcd_out("0",1);
 800269e:	f7fe ffa7 	bl	80015f0 <strlen1>
 80026a2:	2801      	cmp	r0, #1
 80026a4:	d803      	bhi.n	80026ae <ClockOnLCD_noSec+0x22>
 80026a6:	2101      	movs	r1, #1
 80026a8:	4811      	ldr	r0, [pc, #68]	; (80026f0 <ClockOnLCD_noSec+0x64>)
 80026aa:	f7ff fa6f 	bl	8001b8c <lcd_out>
	lcd_out(string,1);
 80026ae:	2101      	movs	r1, #1
 80026b0:	4628      	mov	r0, r5
 80026b2:	f7ff fa6b 	bl	8001b8c <lcd_out>

	lcd_out(":",1);
 80026b6:	2101      	movs	r1, #1
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <ClockOnLCD_noSec+0x68>)
 80026ba:	f7ff fa67 	bl	8001b8c <lcd_out>
	string = itoa((time/60)%60);
 80026be:	233c      	movs	r3, #60	; 0x3c
 80026c0:	fbb4 f4f3 	udiv	r4, r4, r3
 80026c4:	fbb4 f0f3 	udiv	r0, r4, r3
 80026c8:	fb03 4010 	mls	r0, r3, r0, r4
 80026cc:	f7fe fe42 	bl	8001354 <itoa>
 80026d0:	4604      	mov	r4, r0
	if (strlen1(string)<2) lcd_out("0",1);
 80026d2:	f7fe ff8d 	bl	80015f0 <strlen1>
 80026d6:	2801      	cmp	r0, #1
 80026d8:	d803      	bhi.n	80026e2 <ClockOnLCD_noSec+0x56>
 80026da:	2101      	movs	r1, #1
 80026dc:	4804      	ldr	r0, [pc, #16]	; (80026f0 <ClockOnLCD_noSec+0x64>)
 80026de:	f7ff fa55 	bl	8001b8c <lcd_out>
	lcd_out(string,1);
 80026e2:	4620      	mov	r0, r4


}
 80026e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_out(string,1);
 80026e8:	2101      	movs	r1, #1
 80026ea:	f7ff ba4f 	b.w	8001b8c <lcd_out>
 80026ee:	bf00      	nop
 80026f0:	08006437 	.word	0x08006437
 80026f4:	08006572 	.word	0x08006572

080026f8 <OUT_OFF>:
*/

void OUT_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
 80026f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <OUT_OFF+0x20>)
 80026fe:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	GPIOA->BSRR =  GPIO_BSRR_BR8;//led out on/off
 8002700:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002704:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002708:	611a      	str	r2, [r3, #16]
	On_off = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	4a03      	ldr	r2, [pc, #12]	; (800271c <OUT_OFF+0x24>)
 800270e:	7013      	strb	r3, [r2, #0]
	Status_Out = 0;
 8002710:	4a03      	ldr	r2, [pc, #12]	; (8002720 <OUT_OFF+0x28>)
 8002712:	7013      	strb	r3, [r2, #0]
}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40010c00 	.word	0x40010c00
 800271c:	200007a2 	.word	0x200007a2
 8002720:	200007a9 	.word	0x200007a9

08002724 <OUT_ON>:
void OUT_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BS0;//ON-OFF OUT
 8002724:	2301      	movs	r3, #1
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <OUT_ON+0x18>)
 8002728:	6113      	str	r3, [r2, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
	On_off = 1;
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <OUT_ON+0x1c>)
 800272c:	7013      	strb	r3, [r2, #0]
	Status_Out = 1;
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <OUT_ON+0x20>)
 8002730:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS8;//led out on/off
 8002732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <OUT_ON+0x24>)
 8002738:	611a      	str	r2, [r3, #16]
}
 800273a:	4770      	bx	lr
 800273c:	40010c00 	.word	0x40010c00
 8002740:	200007a2 	.word	0x200007a2
 8002744:	200007a9 	.word	0x200007a9
 8002748:	40010800 	.word	0x40010800

0800274c <OUTStateAfterPowerUpFunction>:
    if (OutStateAfterPowerUp ==2)
 800274c:	4908      	ldr	r1, [pc, #32]	; (8002770 <OUTStateAfterPowerUpFunction+0x24>)
{
 800274e:	b508      	push	{r3, lr}
    if (OutStateAfterPowerUp ==2)
 8002750:	680a      	ldr	r2, [r1, #0]
 8002752:	2a02      	cmp	r2, #2
 8002754:	d104      	bne.n	8002760 <OUTStateAfterPowerUpFunction+0x14>
    	OUT_ON();
 8002756:	f7ff ffe5 	bl	8002724 <OUT_ON>
    	OutStateAfterPowerUp = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	600b      	str	r3, [r1, #0]
}
 800275e:	bd08      	pop	{r3, pc}
    if (OutStateAfterPowerUp ==3)
 8002760:	2a03      	cmp	r2, #3
 8002762:	d1fc      	bne.n	800275e <OUTStateAfterPowerUpFunction+0x12>
    	if (SaveDataWhenPowerOff.OutState==1)
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <OUTStateAfterPowerUpFunction+0x28>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d1f8      	bne.n	800275e <OUTStateAfterPowerUpFunction+0x12>
 800276c:	e7f3      	b.n	8002756 <OUTStateAfterPowerUpFunction+0xa>
 800276e:	bf00      	nop
 8002770:	20000274 	.word	0x20000274
 8002774:	200000f4 	.word	0x200000f4

08002778 <MenuPowerSupply>:
	lcd_set_xy(0,0);
 8002778:	2100      	movs	r1, #0
{
 800277a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 800277e:	2701      	movs	r7, #1
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <MenuPowerSupply+0xb4>)
	if (On_off == 0)
 8002782:	4d2b      	ldr	r5, [pc, #172]	; (8002830 <MenuPowerSupply+0xb8>)
{
 8002784:	4606      	mov	r6, r0
	lcd_set_xy(0,0);
 8002786:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002788:	701f      	strb	r7, [r3, #0]
	lcd_set_xy(0,0);
 800278a:	f7ff f9ed 	bl	8001b68 <lcd_set_xy>
	if (On_off == 0)
 800278e:	782b      	ldrb	r3, [r5, #0]
 8002790:	4c28      	ldr	r4, [pc, #160]	; (8002834 <MenuPowerSupply+0xbc>)
 8002792:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002796:	bb43      	cbnz	r3, 80027ea <MenuPowerSupply+0x72>
		PrintToLCD(itoa_koma(U_PS,2));
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <MenuPowerSupply+0xc0>)
 800279a:	2102      	movs	r1, #2
 800279c:	8818      	ldrh	r0, [r3, #0]
 800279e:	b280      	uxth	r0, r0
 80027a0:	f7fe fe50 	bl	8001444 <itoa_koma>
 80027a4:	f7ff fa60 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V  ");
 80027a8:	4824      	ldr	r0, [pc, #144]	; (800283c <MenuPowerSupply+0xc4>)
 80027aa:	f7ff fa5d 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(7,0);
 80027ae:	4641      	mov	r1, r8
 80027b0:	2007      	movs	r0, #7
 80027b2:	f7ff f9d9 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 80027b6:	8820      	ldrh	r0, [r4, #0]
 80027b8:	b200      	sxth	r0, r0
 80027ba:	f7fe fdcb 	bl	8001354 <itoa>
 80027be:	f7ff fa53 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mA   ");
 80027c2:	481f      	ldr	r0, [pc, #124]	; (8002840 <MenuPowerSupply+0xc8>)
 80027c4:	f7ff fa50 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(5,1);
 80027c8:	2005      	movs	r0, #5
 80027ca:	4639      	mov	r1, r7
 80027cc:	f7ff f9cc 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("OFF ");
 80027d0:	481c      	ldr	r0, [pc, #112]	; (8002844 <MenuPowerSupply+0xcc>)
		PrintToLCD("ON ");
 80027d2:	f7ff fa49 	bl	8001c68 <PrintToLCD>
    if (key == KEY_NEXT)
 80027d6:	2e02      	cmp	r6, #2
 80027d8:	d103      	bne.n	80027e2 <MenuPowerSupply+0x6a>
    	if (On_off == 0)
 80027da:	782b      	ldrb	r3, [r5, #0]
 80027dc:	bb1b      	cbnz	r3, 8002826 <MenuPowerSupply+0xae>
    		OUT_ON();
 80027de:	f7ff ffa1 	bl	8002724 <OUT_ON>
}
 80027e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    OUTStateAfterPowerUpFunction();
 80027e6:	f7ff bfb1 	b.w	800274c <OUTStateAfterPowerUpFunction>
		PrintToLCD(itoa_koma(U_OUT,2));
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <MenuPowerSupply+0xd0>)
 80027ec:	2102      	movs	r1, #2
 80027ee:	8818      	ldrh	r0, [r3, #0]
 80027f0:	b280      	uxth	r0, r0
 80027f2:	f7fe fe27 	bl	8001444 <itoa_koma>
 80027f6:	f7ff fa37 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V  ");
 80027fa:	4810      	ldr	r0, [pc, #64]	; (800283c <MenuPowerSupply+0xc4>)
 80027fc:	f7ff fa34 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(7,0);
 8002800:	2100      	movs	r1, #0
 8002802:	2007      	movs	r0, #7
 8002804:	f7ff f9b0 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002808:	8820      	ldrh	r0, [r4, #0]
 800280a:	b200      	sxth	r0, r0
 800280c:	f7fe fda2 	bl	8001354 <itoa>
 8002810:	f7ff fa2a 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mA    ");
 8002814:	480d      	ldr	r0, [pc, #52]	; (800284c <MenuPowerSupply+0xd4>)
 8002816:	f7ff fa27 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(6,1);
 800281a:	2006      	movs	r0, #6
 800281c:	4639      	mov	r1, r7
 800281e:	f7ff f9a3 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("ON ");
 8002822:	480b      	ldr	r0, [pc, #44]	; (8002850 <MenuPowerSupply+0xd8>)
 8002824:	e7d5      	b.n	80027d2 <MenuPowerSupply+0x5a>
    		OUT_OFF();
 8002826:	f7ff ff67 	bl	80026f8 <OUT_OFF>
 800282a:	e7da      	b.n	80027e2 <MenuPowerSupply+0x6a>
 800282c:	200007a0 	.word	0x200007a0
 8002830:	200007a2 	.word	0x200007a2
 8002834:	2000085a 	.word	0x2000085a
 8002838:	20000874 	.word	0x20000874
 800283c:	08006439 	.word	0x08006439
 8002840:	0800643d 	.word	0x0800643d
 8002844:	080065b5 	.word	0x080065b5
 8002848:	2000086e 	.word	0x2000086e
 800284c:	08006443 	.word	0x08006443
 8002850:	0800644a 	.word	0x0800644a

08002854 <MenuCalibration_CURRENT_Out>:
	EnterInMenu_Status=1;
 8002854:	2201      	movs	r2, #1
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <MenuCalibration_CURRENT_Out+0x5c>)
{
 8002858:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800285a:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 800285c:	f7ff ff62 	bl	8002724 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent++;
 8002860:	2802      	cmp	r0, #2
 8002862:	4c14      	ldr	r4, [pc, #80]	; (80028b4 <MenuCalibration_CURRENT_Out+0x60>)
 8002864:	d11e      	bne.n	80028a4 <MenuCalibration_CURRENT_Out+0x50>
 8002866:	69a3      	ldr	r3, [r4, #24]
 8002868:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent--;
 800286a:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 800286c:	2100      	movs	r1, #0
 800286e:	4608      	mov	r0, r1
 8002870:	f7ff f97a 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent));
 8002874:	69a0      	ldr	r0, [r4, #24]
 8002876:	f7fe fd6d 	bl	8001354 <itoa>
 800287a:	f7ff f9f5 	bl	8001c68 <PrintToLCD>
	PrintToLCD("   ");
 800287e:	480e      	ldr	r0, [pc, #56]	; (80028b8 <MenuCalibration_CURRENT_Out+0x64>)
 8002880:	f7ff f9f2 	bl	8001c68 <PrintToLCD>
	lcd_set_xy(0,1);
 8002884:	2101      	movs	r1, #1
 8002886:	2000      	movs	r0, #0
 8002888:	f7ff f96e 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <MenuCalibration_CURRENT_Out+0x68>)
 800288e:	8818      	ldrh	r0, [r3, #0]
 8002890:	b200      	sxth	r0, r0
 8002892:	f7fe fd5f 	bl	8001354 <itoa>
 8002896:	f7ff f9e7 	bl	8001c68 <PrintToLCD>
}
 800289a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 800289e:	4808      	ldr	r0, [pc, #32]	; (80028c0 <MenuCalibration_CURRENT_Out+0x6c>)
 80028a0:	f7ff b9e2 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent--;
 80028a4:	2801      	cmp	r0, #1
 80028a6:	d1e1      	bne.n	800286c <MenuCalibration_CURRENT_Out+0x18>
 80028a8:	69a3      	ldr	r3, [r4, #24]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	e7dd      	b.n	800286a <MenuCalibration_CURRENT_Out+0x16>
 80028ae:	bf00      	nop
 80028b0:	200007a0 	.word	0x200007a0
 80028b4:	20000004 	.word	0x20000004
 80028b8:	08006422 	.word	0x08006422
 80028bc:	2000085a 	.word	0x2000085a
 80028c0:	0800644e 	.word	0x0800644e

080028c4 <MenuCalibration_VoltagePS>:
	EnterInMenu_Status=1;
 80028c4:	2201      	movs	r2, #1
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <MenuCalibration_VoltagePS+0x5c>)
{
 80028c8:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 80028ca:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80028cc:	f7ff ff2a 	bl	8002724 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage++;
 80028d0:	2802      	cmp	r0, #2
 80028d2:	4c14      	ldr	r4, [pc, #80]	; (8002924 <MenuCalibration_VoltagePS+0x60>)
 80028d4:	d11f      	bne.n	8002916 <MenuCalibration_VoltagePS+0x52>
 80028d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028d8:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 80028da:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 80028dc:	2100      	movs	r1, #0
 80028de:	4608      	mov	r0, r1
 80028e0:	f7ff f942 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage));
 80028e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028e6:	f7fe fd35 	bl	8001354 <itoa>
 80028ea:	f7ff f9bd 	bl	8001c68 <PrintToLCD>
	PrintToLCD("   ");
 80028ee:	480e      	ldr	r0, [pc, #56]	; (8002928 <MenuCalibration_VoltagePS+0x64>)
 80028f0:	f7ff f9ba 	bl	8001c68 <PrintToLCD>
	lcd_set_xy(0,1);
 80028f4:	2101      	movs	r1, #1
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7ff f936 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_PS,2));
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <MenuCalibration_VoltagePS+0x68>)
 80028fe:	2102      	movs	r1, #2
 8002900:	8818      	ldrh	r0, [r3, #0]
 8002902:	b280      	uxth	r0, r0
 8002904:	f7fe fd9e 	bl	8001444 <itoa_koma>
 8002908:	f7ff f9ae 	bl	8001c68 <PrintToLCD>
}
 800290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002910:	4807      	ldr	r0, [pc, #28]	; (8002930 <MenuCalibration_VoltagePS+0x6c>)
 8002912:	f7ff b9a9 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage--;
 8002916:	2801      	cmp	r0, #1
 8002918:	d1e0      	bne.n	80028dc <MenuCalibration_VoltagePS+0x18>
 800291a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	e7dc      	b.n	80028da <MenuCalibration_VoltagePS+0x16>
 8002920:	200007a0 	.word	0x200007a0
 8002924:	20000004 	.word	0x20000004
 8002928:	08006422 	.word	0x08006422
 800292c:	20000874 	.word	0x20000874
 8002930:	08006439 	.word	0x08006439

08002934 <MenuCalibration_VoltageOut>:
	EnterInMenu_Status=1;
 8002934:	2201      	movs	r2, #1
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <MenuCalibration_VoltageOut+0x5c>)
{
 8002938:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800293a:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 800293c:	f7ff fef2 	bl	8002724 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage1++;
 8002940:	2802      	cmp	r0, #2
 8002942:	4c14      	ldr	r4, [pc, #80]	; (8002994 <MenuCalibration_VoltageOut+0x60>)
 8002944:	d11f      	bne.n	8002986 <MenuCalibration_VoltageOut+0x52>
 8002946:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002948:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage1--;
 800294a:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 800294c:	2100      	movs	r1, #0
 800294e:	4608      	mov	r0, r1
 8002950:	f7ff f90a 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage1));
 8002954:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002956:	f7fe fcfd 	bl	8001354 <itoa>
 800295a:	f7ff f985 	bl	8001c68 <PrintToLCD>
	PrintToLCD("   ");
 800295e:	480e      	ldr	r0, [pc, #56]	; (8002998 <MenuCalibration_VoltageOut+0x64>)
 8002960:	f7ff f982 	bl	8001c68 <PrintToLCD>
	lcd_set_xy(0,1);
 8002964:	2101      	movs	r1, #1
 8002966:	2000      	movs	r0, #0
 8002968:	f7ff f8fe 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MenuCalibration_VoltageOut+0x68>)
 800296e:	2102      	movs	r1, #2
 8002970:	8818      	ldrh	r0, [r3, #0]
 8002972:	b280      	uxth	r0, r0
 8002974:	f7fe fd66 	bl	8001444 <itoa_koma>
 8002978:	f7ff f976 	bl	8001c68 <PrintToLCD>
}
 800297c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002980:	4807      	ldr	r0, [pc, #28]	; (80029a0 <MenuCalibration_VoltageOut+0x6c>)
 8002982:	f7ff b971 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage1--;
 8002986:	2801      	cmp	r0, #1
 8002988:	d1e0      	bne.n	800294c <MenuCalibration_VoltageOut+0x18>
 800298a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800298c:	3b01      	subs	r3, #1
 800298e:	e7dc      	b.n	800294a <MenuCalibration_VoltageOut+0x16>
 8002990:	200007a0 	.word	0x200007a0
 8002994:	20000004 	.word	0x20000004
 8002998:	08006422 	.word	0x08006422
 800299c:	2000086e 	.word	0x2000086e
 80029a0:	08006439 	.word	0x08006439

080029a4 <MenuCalibration_VoltageIn>:
	EnterInMenu_Status=1;
 80029a4:	2201      	movs	r2, #1
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MenuCalibration_VoltageIn+0x5c>)
{
 80029a8:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 80029aa:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80029ac:	f7ff feba 	bl	8002724 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage2++;
 80029b0:	2802      	cmp	r0, #2
 80029b2:	4c14      	ldr	r4, [pc, #80]	; (8002a04 <MenuCalibration_VoltageIn+0x60>)
 80029b4:	d11f      	bne.n	80029f6 <MenuCalibration_VoltageIn+0x52>
 80029b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029b8:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 80029ba:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 80029bc:	2100      	movs	r1, #0
 80029be:	4608      	mov	r0, r1
 80029c0:	f7ff f8d2 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage2));
 80029c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029c6:	f7fe fcc5 	bl	8001354 <itoa>
 80029ca:	f7ff f94d 	bl	8001c68 <PrintToLCD>
	PrintToLCD("   ");
 80029ce:	480e      	ldr	r0, [pc, #56]	; (8002a08 <MenuCalibration_VoltageIn+0x64>)
 80029d0:	f7ff f94a 	bl	8001c68 <PrintToLCD>
	lcd_set_xy(0,1);
 80029d4:	2101      	movs	r1, #1
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7ff f8c6 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_IN,2));
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MenuCalibration_VoltageIn+0x68>)
 80029de:	2102      	movs	r1, #2
 80029e0:	8818      	ldrh	r0, [r3, #0]
 80029e2:	b280      	uxth	r0, r0
 80029e4:	f7fe fd2e 	bl	8001444 <itoa_koma>
 80029e8:	f7ff f93e 	bl	8001c68 <PrintToLCD>
}
 80029ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 80029f0:	4807      	ldr	r0, [pc, #28]	; (8002a10 <MenuCalibration_VoltageIn+0x6c>)
 80029f2:	f7ff b939 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 80029f6:	2801      	cmp	r0, #1
 80029f8:	d1e0      	bne.n	80029bc <MenuCalibration_VoltageIn+0x18>
 80029fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029fc:	3b01      	subs	r3, #1
 80029fe:	e7dc      	b.n	80029ba <MenuCalibration_VoltageIn+0x16>
 8002a00:	200007a0 	.word	0x200007a0
 8002a04:	20000004 	.word	0x20000004
 8002a08:	08006422 	.word	0x08006422
 8002a0c:	20000858 	.word	0x20000858
 8002a10:	08006439 	.word	0x08006439

08002a14 <MenuCalibration_Resist_Comp_5V1A>:
		EnterInMenu_Status=1;
 8002a14:	2201      	movs	r2, #1
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <MenuCalibration_Resist_Comp_5V1A+0xac>)
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
		EnterInMenu_Status=1;
 8002a1a:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 8002a1c:	f7ff fe82 	bl	8002724 <OUT_ON>
		if (key == KEY_NEXT) ResistanceComp_Voltage++;
 8002a20:	2802      	cmp	r0, #2
 8002a22:	4e28      	ldr	r6, [pc, #160]	; (8002ac4 <MenuCalibration_Resist_Comp_5V1A+0xb0>)
 8002a24:	d142      	bne.n	8002aac <MenuCalibration_Resist_Comp_5V1A+0x98>
 8002a26:	8833      	ldrh	r3, [r6, #0]
 8002a28:	3301      	adds	r3, #1
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002a2a:	8033      	strh	r3, [r6, #0]
		lcd_set_xy(0,0);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4608      	mov	r0, r1
 8002a30:	f7ff f89a 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002a34:	2102      	movs	r1, #2
 8002a36:	8830      	ldrh	r0, [r6, #0]
 8002a38:	f7fe fd04 	bl	8001444 <itoa_koma>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a3c:	4d22      	ldr	r5, [pc, #136]	; (8002ac8 <MenuCalibration_Resist_Comp_5V1A+0xb4>)
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002a3e:	4c23      	ldr	r4, [pc, #140]	; (8002acc <MenuCalibration_Resist_Comp_5V1A+0xb8>)
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002a40:	f7ff f912 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V ");
 8002a44:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <MenuCalibration_Resist_Comp_5V1A+0xbc>)
 8002a46:	f7ff f90f 	bl	8001c68 <PrintToLCD>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a4a:	882b      	ldrh	r3, [r5, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002a4c:	8822      	ldrh	r2, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a4e:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002a50:	b212      	sxth	r2, r2
 8002a52:	2a00      	cmp	r2, #0
 8002a54:	dd2f      	ble.n	8002ab6 <MenuCalibration_Resist_Comp_5V1A+0xa2>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a56:	8832      	ldrh	r2, [r6, #0]
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a58:	8820      	ldrh	r0, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a5a:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a5c:	b202      	sxth	r2, r0
 8002a5e:	f242 7010 	movw	r0, #10000	; 0x2710
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002a62:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8002a64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a68:	4343      	muls	r3, r0
 8002a6a:	fb93 f0f2 	sdiv	r0, r3, r2
 8002a6e:	4e19      	ldr	r6, [pc, #100]	; (8002ad4 <MenuCalibration_Resist_Comp_5V1A+0xc0>)
 8002a70:	6430      	str	r0, [r6, #64]	; 0x40
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8002a72:	f7fe fc6f 	bl	8001354 <itoa>
 8002a76:	f7ff f8f7 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mOm       ");
 8002a7a:	4817      	ldr	r0, [pc, #92]	; (8002ad8 <MenuCalibration_Resist_Comp_5V1A+0xc4>)
 8002a7c:	f7ff f8f4 	bl	8001c68 <PrintToLCD>
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <MenuCalibration_Resist_Comp_5V1A+0xc8>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	882a      	ldrh	r2, [r5, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002a86:	8821      	ldrh	r1, [r4, #0]
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a88:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002a8a:	b209      	sxth	r1, r1
 8002a8c:	2900      	cmp	r1, #0
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a8e:	b292      	uxth	r2, r2
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002a90:	dd13      	ble.n	8002aba <MenuCalibration_Resist_Comp_5V1A+0xa6>
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a92:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a94:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_PS - U_OUT_ForSetResistance;
 8002a98:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8002a9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a9e:	4353      	muls	r3, r2
 8002aa0:	8821      	ldrh	r1, [r4, #0]
 8002aa2:	b209      	sxth	r1, r1
 8002aa4:	fb93 f3f1 	sdiv	r3, r3, r1
 8002aa8:	64b3      	str	r3, [r6, #72]	; 0x48
}
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8002aac:	2801      	cmp	r0, #1
 8002aae:	d1bd      	bne.n	8002a2c <MenuCalibration_Resist_Comp_5V1A+0x18>
 8002ab0:	8833      	ldrh	r3, [r6, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	e7b9      	b.n	8002a2a <MenuCalibration_Resist_Comp_5V1A+0x16>
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002ab6:	2046      	movs	r0, #70	; 0x46
 8002ab8:	e7d9      	b.n	8002a6e <MenuCalibration_Resist_Comp_5V1A+0x5a>
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8002aba:	230a      	movs	r3, #10
 8002abc:	e7f4      	b.n	8002aa8 <MenuCalibration_Resist_Comp_5V1A+0x94>
 8002abe:	bf00      	nop
 8002ac0:	200007a0 	.word	0x200007a0
 8002ac4:	20000278 	.word	0x20000278
 8002ac8:	200002b6 	.word	0x200002b6
 8002acc:	2000085a 	.word	0x2000085a
 8002ad0:	0800638a 	.word	0x0800638a
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	08006453 	.word	0x08006453
 8002adc:	20000874 	.word	0x20000874

08002ae0 <LOAD_ON>:

void LOAD_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	GPIOB->BSRR =  GPIO_BSRR_BS1; //load1
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <LOAD_ON+0x1c>)
 8002ae4:	611a      	str	r2, [r3, #16]
	On_off = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <LOAD_ON+0x20>)
 8002aea:	7013      	strb	r3, [r2, #0]
	Status_Load = 1;
 8002aec:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <LOAD_ON+0x24>)
 8002aee:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS11;//led load on/off
 8002af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <LOAD_ON+0x28>)
 8002af6:	611a      	str	r2, [r3, #16]
}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40010c00 	.word	0x40010c00
 8002b00:	200007a2 	.word	0x200007a2
 8002b04:	200007a8 	.word	0x200007a8
 8002b08:	40010800 	.word	0x40010800

08002b0c <discharge>:
{
 8002b0c:	b508      	push	{r3, lr}
	OUT_OFF();
 8002b0e:	f7ff fdf3 	bl	80026f8 <OUT_OFF>
	LOAD_ON();
 8002b12:	f7ff ffe5 	bl	8002ae0 <LOAD_ON>
}
 8002b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002b1a:	2032      	movs	r0, #50	; 0x32
 8002b1c:	f7fe bafe 	b.w	800111c <delay_ms>

08002b20 <MenuCalibration_CURRENT_Load>:
{
 8002b20:	b538      	push	{r3, r4, r5, lr}
	EnterInMenu_Status=1;
 8002b22:	2201      	movs	r2, #1
{
 8002b24:	4605      	mov	r5, r0
	EnterInMenu_Status=1;
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <MenuCalibration_CURRENT_Load+0x5c>)
 8002b28:	4c15      	ldr	r4, [pc, #84]	; (8002b80 <MenuCalibration_CURRENT_Load+0x60>)
 8002b2a:	701a      	strb	r2, [r3, #0]
	discharge();
 8002b2c:	f7ff ffee 	bl	8002b0c <discharge>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent1++;
 8002b30:	2d02      	cmp	r5, #2
 8002b32:	d11e      	bne.n	8002b72 <MenuCalibration_CURRENT_Load+0x52>
 8002b34:	6a23      	ldr	r3, [r4, #32]
 8002b36:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent1--;
 8002b38:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	f7ff f813 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent1));
 8002b42:	6a20      	ldr	r0, [r4, #32]
 8002b44:	f7fe fc06 	bl	8001354 <itoa>
 8002b48:	f7ff f88e 	bl	8001c68 <PrintToLCD>
	PrintToLCD("   ");
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <MenuCalibration_CURRENT_Load+0x64>)
 8002b4e:	f7ff f88b 	bl	8001c68 <PrintToLCD>
	lcd_set_xy(0,1);
 8002b52:	2101      	movs	r1, #1
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7ff f807 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <MenuCalibration_CURRENT_Load+0x68>)
 8002b5c:	8818      	ldrh	r0, [r3, #0]
 8002b5e:	b200      	sxth	r0, r0
 8002b60:	f7fe fbf8 	bl	8001354 <itoa>
 8002b64:	f7ff f880 	bl	8001c68 <PrintToLCD>
}
 8002b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("mA  ");
 8002b6c:	4807      	ldr	r0, [pc, #28]	; (8002b8c <MenuCalibration_CURRENT_Load+0x6c>)
 8002b6e:	f7ff b87b 	b.w	8001c68 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent1--;
 8002b72:	2d01      	cmp	r5, #1
 8002b74:	d1e1      	bne.n	8002b3a <MenuCalibration_CURRENT_Load+0x1a>
 8002b76:	6a23      	ldr	r3, [r4, #32]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	e7dd      	b.n	8002b38 <MenuCalibration_CURRENT_Load+0x18>
 8002b7c:	200007a0 	.word	0x200007a0
 8002b80:	20000004 	.word	0x20000004
 8002b84:	08006422 	.word	0x08006422
 8002b88:	2000085a 	.word	0x2000085a
 8002b8c:	0800644e 	.word	0x0800644e

08002b90 <discharge1>:
{
 8002b90:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=2)
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <discharge1+0x38>)
 8002b94:	f993 2000 	ldrsb.w	r2, [r3]
 8002b98:	2a02      	cmp	r2, #2
 8002b9a:	d013      	beq.n	8002bc4 <discharge1+0x34>
		ChargeDischargeState = 2;
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	701a      	strb	r2, [r3, #0]
		OUT_OFF();
 8002ba0:	f7ff fdaa 	bl	80026f8 <OUT_OFF>
		LOAD_ON();
 8002ba4:	f7ff ff9c 	bl	8002ae0 <LOAD_ON>
		TimerForReadyMeasurement_ms = 0;
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <discharge1+0x3c>)
		delay_ms(50);
 8002bac:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 8002bae:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 8002bb0:	f7fe fab4 	bl	800111c <delay_ms>
		logDebug("DIsCharge");
 8002bb4:	4806      	ldr	r0, [pc, #24]	; (8002bd0 <discharge1+0x40>)
 8002bb6:	f002 fcf5 	bl	80055a4 <printToBufferWithoutEndUART1>
}
 8002bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("DIsCharge");
 8002bbe:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <discharge1+0x44>)
 8002bc0:	f002 bc8a 	b.w	80054d8 <printToBufferUART1>
}
 8002bc4:	bd08      	pop	{r3, pc}
 8002bc6:	bf00      	nop
 8002bc8:	2000078a 	.word	0x2000078a
 8002bcc:	200007cc 	.word	0x200007cc
 8002bd0:	08005c58 	.word	0x08005c58
 8002bd4:	0800645e 	.word	0x0800645e

08002bd8 <LOAD_OFF>:

void LOAD_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
 8002bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bdc:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <LOAD_OFF+0x24>)
 8002bde:	611a      	str	r2, [r3, #16]
	On_off = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <LOAD_OFF+0x28>)
 8002be4:	7013      	strb	r3, [r2, #0]
	Status_Load = 0;
 8002be6:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <LOAD_OFF+0x2c>)
 8002be8:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BR11;//led load on/off
 8002bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bf2:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002bf6:	611a      	str	r2, [r3, #16]
}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40010c00 	.word	0x40010c00
 8002c00:	200007a2 	.word	0x200007a2
 8002c04:	200007a8 	.word	0x200007a8

08002c08 <MenuLoad>:
	EnterInMenu_Status = 1;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <MenuLoad+0x90>)
	if (key == KEY_NEXT)
 8002c0c:	2802      	cmp	r0, #2
{
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	4c22      	ldr	r4, [pc, #136]	; (8002c9c <MenuLoad+0x94>)
	EnterInMenu_Status = 1;
 8002c12:	701a      	strb	r2, [r3, #0]
	if (key == KEY_NEXT)
 8002c14:	d103      	bne.n	8002c1e <MenuLoad+0x16>
		if (On_off == 0)
 8002c16:	7823      	ldrb	r3, [r4, #0]
 8002c18:	bb7b      	cbnz	r3, 8002c7a <MenuLoad+0x72>
			LOAD_ON();
 8002c1a:	f7ff ff61 	bl	8002ae0 <LOAD_ON>
	lcd_set_xy(0,0);
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4608      	mov	r0, r1
 8002c22:	f7fe ffa1 	bl	8001b68 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <MenuLoad+0x98>)
 8002c28:	2102      	movs	r1, #2
 8002c2a:	8818      	ldrh	r0, [r3, #0]
 8002c2c:	b280      	uxth	r0, r0
 8002c2e:	f7fe fc09 	bl	8001444 <itoa_koma>
 8002c32:	f7ff f819 	bl	8001c68 <PrintToLCD>
	PrintToLCD("V ");
 8002c36:	481b      	ldr	r0, [pc, #108]	; (8002ca4 <MenuLoad+0x9c>)
 8002c38:	f7ff f816 	bl	8001c68 <PrintToLCD>
	PrintToLCD(itoa(Current));
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <MenuLoad+0xa0>)
 8002c3e:	8818      	ldrh	r0, [r3, #0]
 8002c40:	b200      	sxth	r0, r0
 8002c42:	f7fe fb87 	bl	8001354 <itoa>
 8002c46:	f7ff f80f 	bl	8001c68 <PrintToLCD>
	PrintToLCD("mA    ");
 8002c4a:	4818      	ldr	r0, [pc, #96]	; (8002cac <MenuLoad+0xa4>)
 8002c4c:	f7ff f80c 	bl	8001c68 <PrintToLCD>
	if (On_off ==0)
 8002c50:	7823      	ldrb	r3, [r4, #0]
			lcd_set_xy(6,1);
 8002c52:	2101      	movs	r1, #1
 8002c54:	2006      	movs	r0, #6
 8002c56:	4c16      	ldr	r4, [pc, #88]	; (8002cb0 <MenuLoad+0xa8>)
	if (On_off ==0)
 8002c58:	b993      	cbnz	r3, 8002c80 <MenuLoad+0x78>
			lcd_set_xy(6,1);
 8002c5a:	f7fe ff85 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(2,1);
 8002c5e:	2101      	movs	r1, #1
 8002c60:	2002      	movs	r0, #2
 8002c62:	f7fe ffa9 	bl	8001bb8 <LcdOutbyNumber>
			LcdOutbyNumber(2,1);
 8002c66:	2101      	movs	r1, #1
 8002c68:	2002      	movs	r0, #2
					LcdOutbyNumber(3,1);
 8002c6a:	f7fe ffa5 	bl	8001bb8 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8002c6e:	7823      	ldrb	r3, [r4, #0]
 8002c70:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8002c72:	bf84      	itt	hi
 8002c74:	2300      	movhi	r3, #0
 8002c76:	7023      	strbhi	r3, [r4, #0]
}
 8002c78:	bd10      	pop	{r4, pc}
			LOAD_OFF();
 8002c7a:	f7ff ffad 	bl	8002bd8 <LOAD_OFF>
 8002c7e:	e7ce      	b.n	8002c1e <MenuLoad+0x16>
			if (Blink_message_counter<=5)
 8002c80:	7823      	ldrb	r3, [r4, #0]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d9e9      	bls.n	8002c5a <MenuLoad+0x52>
					lcd_set_xy(6,1);
 8002c86:	f7fe ff6f 	bl	8001b68 <lcd_set_xy>
					LcdOutbyNumber(3,1);
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f7fe ff93 	bl	8001bb8 <LcdOutbyNumber>
					LcdOutbyNumber(3,1);
 8002c92:	2101      	movs	r1, #1
 8002c94:	2003      	movs	r0, #3
 8002c96:	e7e8      	b.n	8002c6a <MenuLoad+0x62>
 8002c98:	200007a0 	.word	0x200007a0
 8002c9c:	200007a2 	.word	0x200007a2
 8002ca0:	2000086e 	.word	0x2000086e
 8002ca4:	0800638a 	.word	0x0800638a
 8002ca8:	2000085a 	.word	0x2000085a
 8002cac:	08006443 	.word	0x08006443
 8002cb0:	20000789 	.word	0x20000789

08002cb4 <MenuBatterySimilation>:
	lcd_set_xy(0,0);
 8002cb4:	2100      	movs	r1, #0
{
 8002cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002cba:	2701      	movs	r7, #1
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <MenuBatterySimilation+0xc0>)
	if (On_off == 0)
 8002cbe:	4d2e      	ldr	r5, [pc, #184]	; (8002d78 <MenuBatterySimilation+0xc4>)
{
 8002cc0:	4606      	mov	r6, r0
	lcd_set_xy(0,0);
 8002cc2:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002cc4:	701f      	strb	r7, [r3, #0]
	lcd_set_xy(0,0);
 8002cc6:	f7fe ff4f 	bl	8001b68 <lcd_set_xy>
	if (On_off == 0)
 8002cca:	782b      	ldrb	r3, [r5, #0]
 8002ccc:	4c2b      	ldr	r4, [pc, #172]	; (8002d7c <MenuBatterySimilation+0xc8>)
 8002cce:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002cd2:	bb43      	cbnz	r3, 8002d26 <MenuBatterySimilation+0x72>
		PrintToLCD(itoa_koma(U_PS,2));
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <MenuBatterySimilation+0xcc>)
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	8818      	ldrh	r0, [r3, #0]
 8002cda:	b280      	uxth	r0, r0
 8002cdc:	f7fe fbb2 	bl	8001444 <itoa_koma>
 8002ce0:	f7fe ffc2 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V  ");
 8002ce4:	4827      	ldr	r0, [pc, #156]	; (8002d84 <MenuBatterySimilation+0xd0>)
 8002ce6:	f7fe ffbf 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(7,0);
 8002cea:	4641      	mov	r1, r8
 8002cec:	2007      	movs	r0, #7
 8002cee:	f7fe ff3b 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002cf2:	8820      	ldrh	r0, [r4, #0]
 8002cf4:	b200      	sxth	r0, r0
 8002cf6:	f7fe fb2d 	bl	8001354 <itoa>
 8002cfa:	f7fe ffb5 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mA   ");
 8002cfe:	4822      	ldr	r0, [pc, #136]	; (8002d88 <MenuBatterySimilation+0xd4>)
 8002d00:	f7fe ffb2 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(5,1);
 8002d04:	2005      	movs	r0, #5
 8002d06:	4639      	mov	r1, r7
 8002d08:	f7fe ff2e 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("OFF ");
 8002d0c:	481f      	ldr	r0, [pc, #124]	; (8002d8c <MenuBatterySimilation+0xd8>)
		PrintToLCD("ON ");
 8002d0e:	f7fe ffab 	bl	8001c68 <PrintToLCD>
    if (key == KEY_NEXT)
 8002d12:	2e02      	cmp	r6, #2
 8002d14:	d12b      	bne.n	8002d6e <MenuBatterySimilation+0xba>
    	if (On_off == 0)
 8002d16:	782b      	ldrb	r3, [r5, #0]
 8002d18:	bb1b      	cbnz	r3, 8002d62 <MenuBatterySimilation+0xae>
    		OUT_ON();
 8002d1a:	f7ff fd03 	bl	8002724 <OUT_ON>
}
 8002d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_ON();
 8002d22:	f7ff bedd 	b.w	8002ae0 <LOAD_ON>
		PrintToLCD(itoa_koma(U_OUT,2));
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <MenuBatterySimilation+0xdc>)
 8002d28:	2102      	movs	r1, #2
 8002d2a:	8818      	ldrh	r0, [r3, #0]
 8002d2c:	b280      	uxth	r0, r0
 8002d2e:	f7fe fb89 	bl	8001444 <itoa_koma>
 8002d32:	f7fe ff99 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V  ");
 8002d36:	4813      	ldr	r0, [pc, #76]	; (8002d84 <MenuBatterySimilation+0xd0>)
 8002d38:	f7fe ff96 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(7,0);
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2007      	movs	r0, #7
 8002d40:	f7fe ff12 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002d44:	8820      	ldrh	r0, [r4, #0]
 8002d46:	b200      	sxth	r0, r0
 8002d48:	f7fe fb04 	bl	8001354 <itoa>
 8002d4c:	f7fe ff8c 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mA    ");
 8002d50:	4810      	ldr	r0, [pc, #64]	; (8002d94 <MenuBatterySimilation+0xe0>)
 8002d52:	f7fe ff89 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(6,1);
 8002d56:	2006      	movs	r0, #6
 8002d58:	4639      	mov	r1, r7
 8002d5a:	f7fe ff05 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("ON ");
 8002d5e:	480e      	ldr	r0, [pc, #56]	; (8002d98 <MenuBatterySimilation+0xe4>)
 8002d60:	e7d5      	b.n	8002d0e <MenuBatterySimilation+0x5a>
    		OUT_OFF();
 8002d62:	f7ff fcc9 	bl	80026f8 <OUT_OFF>
}
 8002d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_OFF();
 8002d6a:	f7ff bf35 	b.w	8002bd8 <LOAD_OFF>
}
 8002d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d72:	bf00      	nop
 8002d74:	200007a0 	.word	0x200007a0
 8002d78:	200007a2 	.word	0x200007a2
 8002d7c:	2000085a 	.word	0x2000085a
 8002d80:	20000874 	.word	0x20000874
 8002d84:	08006439 	.word	0x08006439
 8002d88:	0800643d 	.word	0x0800643d
 8002d8c:	080065b5 	.word	0x080065b5
 8002d90:	2000086e 	.word	0x2000086e
 8002d94:	08006443 	.word	0x08006443
 8002d98:	0800644a 	.word	0x0800644a

08002d9c <charge>:
{
 8002d9c:	b508      	push	{r3, lr}
	LOAD_OFF();
 8002d9e:	f7ff ff1b 	bl	8002bd8 <LOAD_OFF>
	OUT_ON();
 8002da2:	f7ff fcbf 	bl	8002724 <OUT_ON>
}
 8002da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002daa:	2032      	movs	r0, #50	; 0x32
 8002dac:	f7fe b9b6 	b.w	800111c <delay_ms>

08002db0 <charge1>:
{
 8002db0:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=1)
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <charge1+0x38>)
 8002db4:	f993 2000 	ldrsb.w	r2, [r3]
 8002db8:	2a01      	cmp	r2, #1
 8002dba:	d013      	beq.n	8002de4 <charge1+0x34>
		ChargeDischargeState = 1;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
		LOAD_OFF();
 8002dc0:	f7ff ff0a 	bl	8002bd8 <LOAD_OFF>
		OUT_ON();
 8002dc4:	f7ff fcae 	bl	8002724 <OUT_ON>
		TimerForReadyMeasurement_ms = 0;
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <charge1+0x3c>)
		delay_ms(50);
 8002dcc:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 8002dce:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 8002dd0:	f7fe f9a4 	bl	800111c <delay_ms>
		logDebug("Charge");
 8002dd4:	4806      	ldr	r0, [pc, #24]	; (8002df0 <charge1+0x40>)
 8002dd6:	f002 fbe5 	bl	80055a4 <printToBufferWithoutEndUART1>
}
 8002dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("Charge");
 8002dde:	4805      	ldr	r0, [pc, #20]	; (8002df4 <charge1+0x44>)
 8002de0:	f002 bb7a 	b.w	80054d8 <printToBufferUART1>
}
 8002de4:	bd08      	pop	{r3, pc}
 8002de6:	bf00      	nop
 8002de8:	2000078a 	.word	0x2000078a
 8002dec:	200007cc 	.word	0x200007cc
 8002df0:	08005c58 	.word	0x08005c58
 8002df4:	08006461 	.word	0x08006461

08002df8 <MenuTraining_new>:
{
 8002df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8002dfc:	4a97      	ldr	r2, [pc, #604]	; (800305c <MenuTraining_new+0x264>)
{
 8002dfe:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8002e00:	7813      	ldrb	r3, [r2, #0]
 8002e02:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 80030b4 <MenuTraining_new+0x2bc>
 8002e06:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 80030b8 <MenuTraining_new+0x2c0>
 8002e0a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 80030bc <MenuTraining_new+0x2c4>
 8002e0e:	4f94      	ldr	r7, [pc, #592]	; (8003060 <MenuTraining_new+0x268>)
 8002e10:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 80030c0 <MenuTraining_new+0x2c8>
 8002e14:	4d93      	ldr	r5, [pc, #588]	; (8003064 <MenuTraining_new+0x26c>)
{
 8002e16:	9000      	str	r0, [sp, #0]
	if (EnterInMenu_Status == 0)
 8002e18:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002e1c:	9201      	str	r2, [sp, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d13e      	bne.n	8002ea0 <MenuTraining_new+0xa8>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8002e22:	4b91      	ldr	r3, [pc, #580]	; (8003068 <MenuTraining_new+0x270>)
 8002e24:	881a      	ldrh	r2, [r3, #0]
 8002e26:	4b91      	ldr	r3, [pc, #580]	; (800306c <MenuTraining_new+0x274>)
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	3305      	adds	r3, #5
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d215      	bcs.n	8002e5e <MenuTraining_new+0x66>
			lcd_set_xy(0,0);
 8002e32:	4621      	mov	r1, r4
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7fe fe97 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8002e3a:	488d      	ldr	r0, [pc, #564]	; (8003070 <MenuTraining_new+0x278>)
 8002e3c:	f7fe ff14 	bl	8001c68 <PrintToLCD>
			delay_ms(2000);
 8002e40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e44:	f7fe f96a 	bl	800111c <delay_ms>
			lcd_set_xy(0,0);
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7fe fe8c 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8002e50:	4888      	ldr	r0, [pc, #544]	; (8003074 <MenuTraining_new+0x27c>)
 8002e52:	f7fe ff09 	bl	8001c68 <PrintToLCD>
			delay_ms(3000);
 8002e56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e5a:	f7fe f95f 	bl	800111c <delay_ms>
		EnterInMenu_Status = 1;
 8002e5e:	2601      	movs	r6, #1
		ChargeStatusForTimer = 0;
 8002e60:	2400      	movs	r4, #0
		EnterInMenu_Status = 1;
 8002e62:	9b01      	ldr	r3, [sp, #4]
 8002e64:	701e      	strb	r6, [r3, #0]
		DischargeTimeSec_Previous = 0;
 8002e66:	4b84      	ldr	r3, [pc, #528]	; (8003078 <MenuTraining_new+0x280>)
		ChargeStatusForTimer = 0;
 8002e68:	f88a 4000 	strb.w	r4, [sl]
		DisChargeStatusForTimer = 0;
 8002e6c:	f88b 4000 	strb.w	r4, [fp]
		ChargeTimeSec = 0;
 8002e70:	f8c9 4000 	str.w	r4, [r9]
		DischargeTimeSec = 0;
 8002e74:	603c      	str	r4, [r7, #0]
		DischargeTimeSec_Previous = 0;
 8002e76:	601c      	str	r4, [r3, #0]
		BatteryCapacityCharge = 0;
 8002e78:	f8c8 4000 	str.w	r4, [r8]
		BatteryCapacityDischargeCurrent = 0;
 8002e7c:	602c      	str	r4, [r5, #0]
		ChargeStatusForTimer = 1;
 8002e7e:	f88a 6000 	strb.w	r6, [sl]
		charge1();
 8002e82:	f7ff ff95 	bl	8002db0 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8002e86:	4b7d      	ldr	r3, [pc, #500]	; (800307c <MenuTraining_new+0x284>)
		lcd_set_xy(0,0);
 8002e88:	4621      	mov	r1, r4
 8002e8a:	4620      	mov	r0, r4
		ChargeDischargeStatus = CHARGEs;
 8002e8c:	701e      	strb	r6, [r3, #0]
		lcd_set_xy(0,0);
 8002e8e:	f7fe fe6b 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8002e92:	487b      	ldr	r0, [pc, #492]	; (8003080 <MenuTraining_new+0x288>)
 8002e94:	f7fe fee8 	bl	8001c68 <PrintToLCD>
		delay_ms(1000);
 8002e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9c:	f7fe f93e 	bl	800111c <delay_ms>
	if (Module16(Current)>5)
 8002ea0:	4c78      	ldr	r4, [pc, #480]	; (8003084 <MenuTraining_new+0x28c>)
 8002ea2:	8820      	ldrh	r0, [r4, #0]
 8002ea4:	b200      	sxth	r0, r0
 8002ea6:	f7fe fb9d 	bl	80015e4 <Module16>
 8002eaa:	2805      	cmp	r0, #5
 8002eac:	9403      	str	r4, [sp, #12]
 8002eae:	f340 81c8 	ble.w	8003242 <MenuTraining_new+0x44a>
		if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8002eb2:	4a75      	ldr	r2, [pc, #468]	; (8003088 <MenuTraining_new+0x290>)
 8002eb4:	4e6d      	ldr	r6, [pc, #436]	; (800306c <MenuTraining_new+0x274>)
 8002eb6:	8813      	ldrh	r3, [r2, #0]
 8002eb8:	69b1      	ldr	r1, [r6, #24]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	9202      	str	r2, [sp, #8]
 8002ec0:	d21f      	bcs.n	8002f02 <MenuTraining_new+0x10a>
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	; (800307c <MenuTraining_new+0x284>)
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	2a02      	cmp	r2, #2
 8002ec8:	d11b      	bne.n	8002f02 <MenuTraining_new+0x10a>
 8002eca:	4b70      	ldr	r3, [pc, #448]	; (800308c <MenuTraining_new+0x294>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ed2:	d916      	bls.n	8002f02 <MenuTraining_new+0x10a>
			DisChargeStatusForTimer = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f88b 3000 	strb.w	r3, [fp]
			if (BatteryCapacityDischargeCurrent/3600 > 100)
 8002eda:	6829      	ldr	r1, [r5, #0]
 8002edc:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <MenuTraining_new+0x298>)
 8002ede:	4299      	cmp	r1, r3
 8002ee0:	d903      	bls.n	8002eea <MenuTraining_new+0xf2>
				MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8002ee2:	6828      	ldr	r0, [r5, #0]
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	f7ff f869 	bl	8001fbc <MenuTraining_WriteInLOG>
			ChargeTimeSec = 0;
 8002eea:	2300      	movs	r3, #0
			ChargeStatusForTimer = 1;
 8002eec:	2401      	movs	r4, #1
			ChargeTimeSec = 0;
 8002eee:	f8c9 3000 	str.w	r3, [r9]
			BatteryCapacityCharge = 0;
 8002ef2:	f8c8 3000 	str.w	r3, [r8]
			ChargeStatusForTimer = 1;
 8002ef6:	f88a 4000 	strb.w	r4, [sl]
			charge1();
 8002efa:	f7ff ff59 	bl	8002db0 <charge1>
			ChargeDischargeStatus = CHARGEs;
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <MenuTraining_new+0x284>)
 8002f00:	701c      	strb	r4, [r3, #0]
		if ((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))
 8002f02:	9b02      	ldr	r3, [sp, #8]
 8002f04:	6a32      	ldr	r2, [r6, #32]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d908      	bls.n	8002f20 <MenuTraining_new+0x128>
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <MenuTraining_new+0x284>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d104      	bne.n	8002f20 <MenuTraining_new+0x128>
 8002f16:	4b5d      	ldr	r3, [pc, #372]	; (800308c <MenuTraining_new+0x294>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f1e:	d809      	bhi.n	8002f34 <MenuTraining_new+0x13c>
 8002f20:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <MenuTraining_new+0x29c>)
 8002f22:	f8d9 2000 	ldr.w	r2, [r9]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d923      	bls.n	8002f74 <MenuTraining_new+0x17c>
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <MenuTraining_new+0x284>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d11f      	bne.n	8002f74 <MenuTraining_new+0x17c>
			ChargeStatusForTimer = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f88a 3000 	strb.w	r3, [sl]
			if (BatteryCapacityCharge/3600 > 100)
 8002f3a:	f8d8 2000 	ldr.w	r2, [r8]
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <MenuTraining_new+0x298>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d906      	bls.n	8002f52 <MenuTraining_new+0x15a>
				MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8002f44:	f8d8 0000 	ldr.w	r0, [r8]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f8d9 1000 	ldr.w	r1, [r9]
 8002f4e:	f7ff f835 	bl	8001fbc <MenuTraining_WriteInLOG>
			DischargeTimeSec_Previous = DischargeTimeSec;
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	4b48      	ldr	r3, [pc, #288]	; (8003078 <MenuTraining_new+0x280>)
 8002f56:	601a      	str	r2, [r3, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8002f58:	682a      	ldr	r2, [r5, #0]
 8002f5a:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <MenuTraining_new+0x2a0>)
 8002f5c:	609a      	str	r2, [r3, #8]
			DischargeTimeSec = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	603b      	str	r3, [r7, #0]
			BatteryCapacityDischargeCurrent = 0;
 8002f62:	602b      	str	r3, [r5, #0]
			DisChargeStatusForTimer = 1;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f88b 3000 	strb.w	r3, [fp]
			discharge1();
 8002f6a:	f7ff fe11 	bl	8002b90 <discharge1>
			ChargeDischargeStatus = DISCHARGEs;
 8002f6e:	2202      	movs	r2, #2
 8002f70:	4b42      	ldr	r3, [pc, #264]	; (800307c <MenuTraining_new+0x284>)
 8002f72:	701a      	strb	r2, [r3, #0]
		if (key == KEY_NEXT)
 8002f74:	9a00      	ldr	r2, [sp, #0]
 8002f76:	4c49      	ldr	r4, [pc, #292]	; (800309c <MenuTraining_new+0x2a4>)
 8002f78:	2a02      	cmp	r2, #2
 8002f7a:	f994 3000 	ldrsb.w	r3, [r4]
 8002f7e:	d134      	bne.n	8002fea <MenuTraining_new+0x1f2>
			CountShow++;
 8002f80:	3301      	adds	r3, #1
 8002f82:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_TRAINING) CountShow=0;
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d137      	bne.n	8002ff8 <MenuTraining_new+0x200>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	7023      	strb	r3, [r4, #0]
			lcd_set_xy(0,0);
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4608      	mov	r0, r1
 8002f90:	f7fe fdea 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	2102      	movs	r1, #2
 8002f98:	8818      	ldrh	r0, [r3, #0]
 8002f9a:	b280      	uxth	r0, r0
 8002f9c:	f7fe fa52 	bl	8001444 <itoa_koma>
 8002fa0:	f7fe fe62 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 8002fa4:	483e      	ldr	r0, [pc, #248]	; (80030a0 <MenuTraining_new+0x2a8>)
 8002fa6:	f7fe fe5f 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8002faa:	9b03      	ldr	r3, [sp, #12]
 8002fac:	8818      	ldrh	r0, [r3, #0]
 8002fae:	b200      	sxth	r0, r0
 8002fb0:	f7fe f9d0 	bl	8001354 <itoa>
 8002fb4:	f7fe fe58 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mA     ");
 8002fb8:	483a      	ldr	r0, [pc, #232]	; (80030a4 <MenuTraining_new+0x2ac>)
 8002fba:	f7fe fe55 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(6,1);
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2006      	movs	r0, #6
 8002fc2:	f7fe fdd1 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	2004      	movs	r0, #4
 8002fca:	f7fe fdf5 	bl	8001bb8 <LcdOutbyNumber>
			if (Status_Out ==1)
 8002fce:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <MenuTraining_new+0x2b0>)
 8002fd0:	7819      	ldrb	r1, [r3, #0]
 8002fd2:	2901      	cmp	r1, #1
 8002fd4:	f040 812e 	bne.w	8003234 <MenuTraining_new+0x43c>
				lcd_set_xy(7,1);
 8002fd8:	2007      	movs	r0, #7
 8002fda:	9100      	str	r1, [sp, #0]
 8002fdc:	f7fe fdc4 	bl	8001b68 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	9900      	ldr	r1, [sp, #0]
				LcdOutbyNumber(2,1);//discharge
 8002fe4:	f7fe fde8 	bl	8001bb8 <LcdOutbyNumber>
 8002fe8:	e00b      	b.n	8003002 <MenuTraining_new+0x20a>
		if (key == KEY_BACK)
 8002fea:	9a00      	ldr	r2, [sp, #0]
 8002fec:	2a01      	cmp	r2, #1
 8002fee:	d104      	bne.n	8002ffa <MenuTraining_new+0x202>
			CountShow--;
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db65      	blt.n	80030c4 <MenuTraining_new+0x2cc>
			CountShow++;
 8002ff8:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8002ffa:	f994 3000 	ldrsb.w	r3, [r4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0c4      	beq.n	8002f8c <MenuTraining_new+0x194>
		if(CountShow == 1)
 8003002:	f994 3000 	ldrsb.w	r3, [r4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d15e      	bne.n	80030c8 <MenuTraining_new+0x2d0>
			lcd_set_xy(0,0);
 800300a:	2100      	movs	r1, #0
 800300c:	4608      	mov	r0, r1
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	f7fe fdaa 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003014:	6930      	ldr	r0, [r6, #16]
 8003016:	f7fe f99d 	bl	8001354 <itoa>
 800301a:	f7fe fe25 	bl	8001c68 <PrintToLCD>
			PrintToLCD("h ");
 800301e:	4823      	ldr	r0, [pc, #140]	; (80030ac <MenuTraining_new+0x2b4>)
 8003020:	f7fe fe22 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003024:	220a      	movs	r2, #10
 8003026:	9b00      	ldr	r3, [sp, #0]
 8003028:	69b0      	ldr	r0, [r6, #24]
 800302a:	4619      	mov	r1, r3
 800302c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003030:	f7fe fa08 	bl	8001444 <itoa_koma>
 8003034:	f7fe fe18 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 8003038:	4819      	ldr	r0, [pc, #100]	; (80030a0 <MenuTraining_new+0x2a8>)
 800303a:	f7fe fe15 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800303e:	220a      	movs	r2, #10
 8003040:	9b00      	ldr	r3, [sp, #0]
 8003042:	6a30      	ldr	r0, [r6, #32]
 8003044:	4619      	mov	r1, r3
 8003046:	fbb0 f0f2 	udiv	r0, r0, r2
 800304a:	f7fe f9fb 	bl	8001444 <itoa_koma>
 800304e:	f7fe fe0b 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V     ");
 8003052:	4817      	ldr	r0, [pc, #92]	; (80030b0 <MenuTraining_new+0x2b8>)
 8003054:	f7fe fe08 	bl	8001c68 <PrintToLCD>
 8003058:	e036      	b.n	80030c8 <MenuTraining_new+0x2d0>
 800305a:	bf00      	nop
 800305c:	200007a0 	.word	0x200007a0
 8003060:	20000798 	.word	0x20000798
 8003064:	20000780 	.word	0x20000780
 8003068:	20000874 	.word	0x20000874
 800306c:	20000154 	.word	0x20000154
 8003070:	08006468 	.word	0x08006468
 8003074:	08006479 	.word	0x08006479
 8003078:	2000079c 	.word	0x2000079c
 800307c:	20000270 	.word	0x20000270
 8003080:	0800648a 	.word	0x0800648a
 8003084:	2000085a 	.word	0x2000085a
 8003088:	2000086e 	.word	0x2000086e
 800308c:	200007cc 	.word	0x200007cc
 8003090:	00058c4f 	.word	0x00058c4f
 8003094:	20000a18 	.word	0x20000a18
 8003098:	200000f4 	.word	0x200000f4
 800309c:	20000791 	.word	0x20000791
 80030a0:	0800638a 	.word	0x0800638a
 80030a4:	0800649b 	.word	0x0800649b
 80030a8:	200007a9 	.word	0x200007a9
 80030ac:	08005dfd 	.word	0x08005dfd
 80030b0:	0800626f 	.word	0x0800626f
 80030b4:	2000078b 	.word	0x2000078b
 80030b8:	20000794 	.word	0x20000794
 80030bc:	2000078c 	.word	0x2000078c
 80030c0:	2000077c 	.word	0x2000077c
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 80030c4:	2304      	movs	r3, #4
 80030c6:	7023      	strb	r3, [r4, #0]
		if(CountShow == 2)
 80030c8:	f994 6000 	ldrsb.w	r6, [r4]
 80030cc:	2e02      	cmp	r6, #2
 80030ce:	d121      	bne.n	8003114 <MenuTraining_new+0x31c>
			lcd_set_xy(0,0);
 80030d0:	2100      	movs	r1, #0
 80030d2:	4608      	mov	r0, r1
 80030d4:	f7fe fd48 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 80030d8:	2101      	movs	r1, #1
 80030da:	4630      	mov	r0, r6
 80030dc:	f7fe fd6c 	bl	8001bb8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80030e0:	2100      	movs	r1, #0
 80030e2:	2001      	movs	r0, #1
 80030e4:	f7fe fd40 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(" ");
 80030e8:	485c      	ldr	r0, [pc, #368]	; (800325c <MenuTraining_new+0x464>)
 80030ea:	f7fe fdbd 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 80030ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80030f2:	6828      	ldr	r0, [r5, #0]
 80030f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80030f8:	f7fe f92c 	bl	8001354 <itoa>
 80030fc:	f7fe fdb4 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mAH      ");
 8003100:	4857      	ldr	r0, [pc, #348]	; (8003260 <MenuTraining_new+0x468>)
 8003102:	f7fe fdb1 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(3,1);
 8003106:	2003      	movs	r0, #3
 8003108:	2101      	movs	r1, #1
 800310a:	f7fe fd2d 	bl	8001b68 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f7ff fabc 	bl	800268c <ClockOnLCD_noSec>
		if(CountShow == 3)
 8003114:	f994 6000 	ldrsb.w	r6, [r4]
 8003118:	2e03      	cmp	r6, #3
 800311a:	d123      	bne.n	8003164 <MenuTraining_new+0x36c>
			lcd_set_xy(0,0);
 800311c:	2100      	movs	r1, #0
 800311e:	4608      	mov	r0, r1
 8003120:	f7fe fd22 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 8003124:	2101      	movs	r1, #1
 8003126:	2000      	movs	r0, #0
 8003128:	f7fe fd46 	bl	8001bb8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800312c:	2100      	movs	r1, #0
 800312e:	2001      	movs	r0, #1
 8003130:	f7fe fd1a 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(" ");
 8003134:	4849      	ldr	r0, [pc, #292]	; (800325c <MenuTraining_new+0x464>)
 8003136:	f7fe fd97 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 800313a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800313e:	f8d8 0000 	ldr.w	r0, [r8]
 8003142:	fbb0 f0f3 	udiv	r0, r0, r3
 8003146:	f7fe f905 	bl	8001354 <itoa>
 800314a:	f7fe fd8d 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mAH      ");
 800314e:	4844      	ldr	r0, [pc, #272]	; (8003260 <MenuTraining_new+0x468>)
 8003150:	f7fe fd8a 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(3,1);
 8003154:	4630      	mov	r0, r6
 8003156:	2101      	movs	r1, #1
 8003158:	f7fe fd06 	bl	8001b68 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 800315c:	f8d9 0000 	ldr.w	r0, [r9]
 8003160:	f7ff fa94 	bl	800268c <ClockOnLCD_noSec>
		if(CountShow == 4)
 8003164:	f994 3000 	ldrsb.w	r3, [r4]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d123      	bne.n	80031b4 <MenuTraining_new+0x3bc>
			lcd_set_xy(0,0);
 800316c:	2100      	movs	r1, #0
 800316e:	4608      	mov	r0, r1
 8003170:	f7fe fcfa 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8003174:	2101      	movs	r1, #1
 8003176:	2002      	movs	r0, #2
 8003178:	f7fe fd1e 	bl	8001bb8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800317c:	2100      	movs	r1, #0
 800317e:	2001      	movs	r0, #1
 8003180:	f7fe fcf2 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("P ");
 8003184:	4837      	ldr	r0, [pc, #220]	; (8003264 <MenuTraining_new+0x46c>)
 8003186:	f7fe fd6f 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600));
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <MenuTraining_new+0x470>)
 800318c:	6898      	ldr	r0, [r3, #8]
 800318e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003192:	fbb0 f0f3 	udiv	r0, r0, r3
 8003196:	f7fe f8dd 	bl	8001354 <itoa>
 800319a:	f7fe fd65 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mAH     ");
 800319e:	4833      	ldr	r0, [pc, #204]	; (800326c <MenuTraining_new+0x474>)
 80031a0:	f7fe fd62 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(3,1);
 80031a4:	2003      	movs	r0, #3
 80031a6:	2101      	movs	r1, #1
 80031a8:	f7fe fcde 	bl	8001b68 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec_Previous);
 80031ac:	4b30      	ldr	r3, [pc, #192]	; (8003270 <MenuTraining_new+0x478>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	f7ff fa6c 	bl	800268c <ClockOnLCD_noSec>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80031b4:	482f      	ldr	r0, [pc, #188]	; (8003274 <MenuTraining_new+0x47c>)
 80031b6:	f002 f9f5 	bl	80055a4 <printToBufferWithoutEndUART1>
 80031ba:	9b01      	ldr	r3, [sp, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	7819      	ldrb	r1, [r3, #0]
 80031c0:	482d      	ldr	r0, [pc, #180]	; (8003278 <MenuTraining_new+0x480>)
 80031c2:	f002 fa2d 	bl	8005620 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 80031c6:	482b      	ldr	r0, [pc, #172]	; (8003274 <MenuTraining_new+0x47c>)
 80031c8:	f002 f9ec 	bl	80055a4 <printToBufferWithoutEndUART1>
 80031cc:	f89a 1000 	ldrb.w	r1, [sl]
 80031d0:	2200      	movs	r2, #0
 80031d2:	482a      	ldr	r0, [pc, #168]	; (800327c <MenuTraining_new+0x484>)
 80031d4:	f002 fa24 	bl	8005620 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80031d8:	4826      	ldr	r0, [pc, #152]	; (8003274 <MenuTraining_new+0x47c>)
 80031da:	f002 f9e3 	bl	80055a4 <printToBufferWithoutEndUART1>
 80031de:	f8d9 1000 	ldr.w	r1, [r9]
 80031e2:	2200      	movs	r2, #0
 80031e4:	4826      	ldr	r0, [pc, #152]	; (8003280 <MenuTraining_new+0x488>)
 80031e6:	f002 fa1b 	bl	8005620 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 80031ea:	4822      	ldr	r0, [pc, #136]	; (8003274 <MenuTraining_new+0x47c>)
 80031ec:	f002 f9da 	bl	80055a4 <printToBufferWithoutEndUART1>
 80031f0:	f8d8 1000 	ldr.w	r1, [r8]
 80031f4:	2200      	movs	r2, #0
 80031f6:	4823      	ldr	r0, [pc, #140]	; (8003284 <MenuTraining_new+0x48c>)
 80031f8:	f002 fa12 	bl	8005620 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80031fc:	481d      	ldr	r0, [pc, #116]	; (8003274 <MenuTraining_new+0x47c>)
 80031fe:	f002 f9d1 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003202:	f89b 1000 	ldrb.w	r1, [fp]
 8003206:	2200      	movs	r2, #0
 8003208:	481f      	ldr	r0, [pc, #124]	; (8003288 <MenuTraining_new+0x490>)
 800320a:	f002 fa09 	bl	8005620 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800320e:	4819      	ldr	r0, [pc, #100]	; (8003274 <MenuTraining_new+0x47c>)
 8003210:	f002 f9c8 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003214:	6839      	ldr	r1, [r7, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	481c      	ldr	r0, [pc, #112]	; (800328c <MenuTraining_new+0x494>)
 800321a:	f002 fa01 	bl	8005620 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 800321e:	4815      	ldr	r0, [pc, #84]	; (8003274 <MenuTraining_new+0x47c>)
 8003220:	f002 f9c0 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003224:	2200      	movs	r2, #0
 8003226:	6829      	ldr	r1, [r5, #0]
 8003228:	4819      	ldr	r0, [pc, #100]	; (8003290 <MenuTraining_new+0x498>)
}
 800322a:	b005      	add	sp, #20
 800322c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003230:	f002 b9f6 	b.w	8005620 <printToBufferUART1D>
				lcd_set_xy(7,1);
 8003234:	2101      	movs	r1, #1
 8003236:	2007      	movs	r0, #7
 8003238:	f7fe fc96 	bl	8001b68 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 800323c:	2101      	movs	r1, #1
 800323e:	2002      	movs	r0, #2
 8003240:	e6d0      	b.n	8002fe4 <MenuTraining_new+0x1ec>
		if (TimerForReadyMeasurement_ms>1000)
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <MenuTraining_new+0x49c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800324a:	d9b3      	bls.n	80031b4 <MenuTraining_new+0x3bc>
			lcd_set_xy(0,0);
 800324c:	2100      	movs	r1, #0
 800324e:	4608      	mov	r0, r1
 8003250:	f7fe fc8a 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("NO/BAD Battery  ");
 8003254:	4810      	ldr	r0, [pc, #64]	; (8003298 <MenuTraining_new+0x4a0>)
 8003256:	f7fe fd07 	bl	8001c68 <PrintToLCD>
 800325a:	e7ab      	b.n	80031b4 <MenuTraining_new+0x3bc>
 800325c:	08006424 	.word	0x08006424
 8003260:	080064a3 	.word	0x080064a3
 8003264:	080064ad 	.word	0x080064ad
 8003268:	200000f4 	.word	0x200000f4
 800326c:	080064b0 	.word	0x080064b0
 8003270:	2000079c 	.word	0x2000079c
 8003274:	08005c58 	.word	0x08005c58
 8003278:	080064ca 	.word	0x080064ca
 800327c:	080064df 	.word	0x080064df
 8003280:	080064f4 	.word	0x080064f4
 8003284:	08006504 	.word	0x08006504
 8003288:	0800651c 	.word	0x0800651c
 800328c:	08006534 	.word	0x08006534
 8003290:	08006547 	.word	0x08006547
 8003294:	200007cc 	.word	0x200007cc
 8003298:	080064b9 	.word	0x080064b9

0800329c <MenuSwing>:
   	lcd_set_xy(0,0);
 800329c:	2100      	movs	r1, #0
{
 800329e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a0:	4606      	mov	r6, r0
   	lcd_set_xy(0,0);
 80032a2:	4608      	mov	r0, r1
 80032a4:	f7fe fc60 	bl	8001b68 <lcd_set_xy>
       	EnterInMenu_Status = 1;
 80032a8:	2201      	movs	r2, #1
 80032aa:	4b6a      	ldr	r3, [pc, #424]	; (8003454 <MenuSwing+0x1b8>)
 80032ac:	701a      	strb	r2, [r3, #0]
       	if (InitiStatus==0)
 80032ae:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <MenuSwing+0x1bc>)
 80032b0:	7819      	ldrb	r1, [r3, #0]
 80032b2:	b911      	cbnz	r1, 80032ba <MenuSwing+0x1e>
       		InitiStatus=1;
 80032b4:	701a      	strb	r2, [r3, #0]
       		Start_Timer_sec();
 80032b6:	f7ff f9dd 	bl	8002674 <Start_Timer_sec>
       if (Timer_Sec<=SettingsData.Swing_Chrg_time)
 80032ba:	4d68      	ldr	r5, [pc, #416]	; (800345c <MenuSwing+0x1c0>)
 80032bc:	4c68      	ldr	r4, [pc, #416]	; (8003460 <MenuSwing+0x1c4>)
 80032be:	682b      	ldr	r3, [r5, #0]
 80032c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d312      	bcc.n	80032ec <MenuSwing+0x50>
    	   charge1();
 80032c6:	f7ff fd73 	bl	8002db0 <charge1>
           if (U_OUT>SettingsData.MaxVoltage && TimerForReadyMeasurement_ms>400)
 80032ca:	4b66      	ldr	r3, [pc, #408]	; (8003464 <MenuSwing+0x1c8>)
 80032cc:	6a22      	ldr	r2, [r4, #32]
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d90a      	bls.n	80032ec <MenuSwing+0x50>
 80032d6:	4b64      	ldr	r3, [pc, #400]	; (8003468 <MenuSwing+0x1cc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80032de:	d905      	bls.n	80032ec <MenuSwing+0x50>
        	   ReStart_Timer_sec();
 80032e0:	f7ff f9c8 	bl	8002674 <Start_Timer_sec>
               Timer_Sec  = Timer_Sec+ SettingsData.Swing_Chrg_time;
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032e8:	4413      	add	r3, r2
 80032ea:	602b      	str	r3, [r5, #0]
       if (Timer_Sec > SettingsData.Swing_Chrg_time)
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d20e      	bcs.n	8003312 <MenuSwing+0x76>
           discharge1();
 80032f4:	f7ff fc4c 	bl	8002b90 <discharge1>
           if (U_OUT<SettingsData.LowVoltage && TimerForReadyMeasurement_ms>400)
 80032f8:	4b5a      	ldr	r3, [pc, #360]	; (8003464 <MenuSwing+0x1c8>)
 80032fa:	69a2      	ldr	r2, [r4, #24]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	4293      	cmp	r3, r2
 8003302:	d206      	bcs.n	8003312 <MenuSwing+0x76>
 8003304:	4b58      	ldr	r3, [pc, #352]	; (8003468 <MenuSwing+0x1cc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800330c:	d901      	bls.n	8003312 <MenuSwing+0x76>
        	   ReStart_Timer_sec();
 800330e:	f7ff f9b1 	bl	8002674 <Start_Timer_sec>
       if (Timer_Sec > (SettingsData.Swing_Chrg_time+SettingsData.Swing_DChrg_time))
 8003312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003314:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003316:	682a      	ldr	r2, [r5, #0]
 8003318:	440b      	add	r3, r1
 800331a:	4293      	cmp	r3, r2
 800331c:	d201      	bcs.n	8003322 <MenuSwing+0x86>
    	   ReStart_Timer_sec();
 800331e:	f7ff f9a9 	bl	8002674 <Start_Timer_sec>
		if (key == KEY_NEXT)
 8003322:	4d52      	ldr	r5, [pc, #328]	; (800346c <MenuSwing+0x1d0>)
 8003324:	2e02      	cmp	r6, #2
 8003326:	f995 3000 	ldrsb.w	r3, [r5]
 800332a:	d133      	bne.n	8003394 <MenuSwing+0xf8>
			CountShow++;
 800332c:	3301      	adds	r3, #1
 800332e:	b25b      	sxtb	r3, r3
			if (CountShow==MAXITEM6) CountShow=0;
 8003330:	2b03      	cmp	r3, #3
 8003332:	d135      	bne.n	80033a0 <MenuSwing+0x104>
 8003334:	2300      	movs	r3, #0
 8003336:	702b      	strb	r3, [r5, #0]
			lcd_set_xy(0,0);
 8003338:	2100      	movs	r1, #0
 800333a:	4608      	mov	r0, r1
 800333c:	f7fe fc14 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <MenuSwing+0x1c8>)
 8003342:	2102      	movs	r1, #2
 8003344:	8818      	ldrh	r0, [r3, #0]
 8003346:	b280      	uxth	r0, r0
 8003348:	f7fe f87c 	bl	8001444 <itoa_koma>
 800334c:	f7fe fc8c 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 8003350:	4847      	ldr	r0, [pc, #284]	; (8003470 <MenuSwing+0x1d4>)
 8003352:	f7fe fc89 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <MenuSwing+0x1d8>)
 8003358:	8818      	ldrh	r0, [r3, #0]
 800335a:	b200      	sxth	r0, r0
 800335c:	f7fd fffa 	bl	8001354 <itoa>
 8003360:	f7fe fc82 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mA     ");
 8003364:	4844      	ldr	r0, [pc, #272]	; (8003478 <MenuSwing+0x1dc>)
 8003366:	f7fe fc7f 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(6,1);
 800336a:	2101      	movs	r1, #1
 800336c:	2006      	movs	r0, #6
 800336e:	f7fe fbfb 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(5,1);
 8003372:	2101      	movs	r1, #1
 8003374:	2005      	movs	r0, #5
 8003376:	f7fe fc1f 	bl	8001bb8 <LcdOutbyNumber>
			if (Status_Out ==1)
 800337a:	4b40      	ldr	r3, [pc, #256]	; (800347c <MenuSwing+0x1e0>)
 800337c:	781e      	ldrb	r6, [r3, #0]
 800337e:	2e01      	cmp	r6, #1
 8003380:	d15f      	bne.n	8003442 <MenuSwing+0x1a6>
				lcd_set_xy(7,1);
 8003382:	4631      	mov	r1, r6
 8003384:	2007      	movs	r0, #7
 8003386:	f7fe fbef 	bl	8001b68 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 800338a:	4631      	mov	r1, r6
 800338c:	2000      	movs	r0, #0
				LcdOutbyNumber(2,1);//discharge
 800338e:	f7fe fc13 	bl	8001bb8 <LcdOutbyNumber>
 8003392:	e00a      	b.n	80033aa <MenuSwing+0x10e>
		if (key == KEY_BACK)
 8003394:	2e01      	cmp	r6, #1
 8003396:	d104      	bne.n	80033a2 <MenuSwing+0x106>
			CountShow--;
 8003398:	3b01      	subs	r3, #1
 800339a:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAXITEM6-1;
 800339c:	2b00      	cmp	r3, #0
 800339e:	db2c      	blt.n	80033fa <MenuSwing+0x15e>
			CountShow++;
 80033a0:	702b      	strb	r3, [r5, #0]
		if(CountShow == 0)
 80033a2:	f995 3000 	ldrsb.w	r3, [r5]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0c6      	beq.n	8003338 <MenuSwing+0x9c>
		if(CountShow == 1)
 80033aa:	f995 6000 	ldrsb.w	r6, [r5]
 80033ae:	2e01      	cmp	r6, #1
 80033b0:	d125      	bne.n	80033fe <MenuSwing+0x162>
			lcd_set_xy(0,0);
 80033b2:	2100      	movs	r1, #0
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 80033b4:	270a      	movs	r7, #10
			lcd_set_xy(0,0);
 80033b6:	4608      	mov	r0, r1
 80033b8:	f7fe fbd6 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 80033bc:	6920      	ldr	r0, [r4, #16]
 80033be:	f7fd ffc9 	bl	8001354 <itoa>
 80033c2:	f7fe fc51 	bl	8001c68 <PrintToLCD>
			PrintToLCD("h ");
 80033c6:	482e      	ldr	r0, [pc, #184]	; (8003480 <MenuSwing+0x1e4>)
 80033c8:	f7fe fc4e 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 80033cc:	69a0      	ldr	r0, [r4, #24]
 80033ce:	4631      	mov	r1, r6
 80033d0:	fbb0 f0f7 	udiv	r0, r0, r7
 80033d4:	f7fe f836 	bl	8001444 <itoa_koma>
 80033d8:	f7fe fc46 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 80033dc:	4824      	ldr	r0, [pc, #144]	; (8003470 <MenuSwing+0x1d4>)
 80033de:	f7fe fc43 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80033e2:	6a20      	ldr	r0, [r4, #32]
 80033e4:	4631      	mov	r1, r6
 80033e6:	fbb0 f0f7 	udiv	r0, r0, r7
 80033ea:	f7fe f82b 	bl	8001444 <itoa_koma>
 80033ee:	f7fe fc3b 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V     ");
 80033f2:	4824      	ldr	r0, [pc, #144]	; (8003484 <MenuSwing+0x1e8>)
 80033f4:	f7fe fc38 	bl	8001c68 <PrintToLCD>
 80033f8:	e001      	b.n	80033fe <MenuSwing+0x162>
			if (CountShow<0) CountShow=MAXITEM6-1;
 80033fa:	2302      	movs	r3, #2
 80033fc:	702b      	strb	r3, [r5, #0]
		if(CountShow == 2)
 80033fe:	f995 3000 	ldrsb.w	r3, [r5]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d124      	bne.n	8003450 <MenuSwing+0x1b4>
			lcd_set_xy(0,0);
 8003406:	2100      	movs	r1, #0
 8003408:	4608      	mov	r0, r1
 800340a:	f7fe fbad 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 800340e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003410:	f7fd ffa0 	bl	8001354 <itoa>
 8003414:	f7fe fc28 	bl	8001c68 <PrintToLCD>
			PrintToLCD("s ");
 8003418:	481b      	ldr	r0, [pc, #108]	; (8003488 <MenuSwing+0x1ec>)
 800341a:	f7fe fc25 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 800341e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003420:	f7fd ff98 	bl	8001354 <itoa>
 8003424:	f7fe fc20 	bl	8001c68 <PrintToLCD>
			PrintToLCD("s      ");
 8003428:	4818      	ldr	r0, [pc, #96]	; (800348c <MenuSwing+0x1f0>)
 800342a:	f7fe fc1d 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(3,1);
 800342e:	2003      	movs	r0, #3
 8003430:	2101      	movs	r1, #1
 8003432:	f7fe fb99 	bl	8001b68 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8003436:	4b16      	ldr	r3, [pc, #88]	; (8003490 <MenuSwing+0x1f4>)
 8003438:	6818      	ldr	r0, [r3, #0]
}
 800343a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ClockOnLCD_noSec(DischargeTimeSec);
 800343e:	f7ff b925 	b.w	800268c <ClockOnLCD_noSec>
				lcd_set_xy(7,1);
 8003442:	2101      	movs	r1, #1
 8003444:	2007      	movs	r0, #7
 8003446:	f7fe fb8f 	bl	8001b68 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 800344a:	2101      	movs	r1, #1
 800344c:	2002      	movs	r0, #2
 800344e:	e79e      	b.n	800338e <MenuSwing+0xf2>
}
 8003450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003452:	bf00      	nop
 8003454:	200007a0 	.word	0x200007a0
 8003458:	200007a1 	.word	0x200007a1
 800345c:	200007d0 	.word	0x200007d0
 8003460:	20000154 	.word	0x20000154
 8003464:	2000086e 	.word	0x2000086e
 8003468:	200007cc 	.word	0x200007cc
 800346c:	20000791 	.word	0x20000791
 8003470:	0800638a 	.word	0x0800638a
 8003474:	2000085a 	.word	0x2000085a
 8003478:	0800649b 	.word	0x0800649b
 800347c:	200007a9 	.word	0x200007a9
 8003480:	08005dfd 	.word	0x08005dfd
 8003484:	0800626f 	.word	0x0800626f
 8003488:	080065d6 	.word	0x080065d6
 800348c:	08006569 	.word	0x08006569
 8003490:	20000798 	.word	0x20000798

08003494 <OFF>:
{
 8003494:	b508      	push	{r3, lr}
	LOAD_OFF();
 8003496:	f7ff fb9f 	bl	8002bd8 <LOAD_OFF>
}
 800349a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OUT_OFF();
 800349e:	f7ff b92b 	b.w	80026f8 <OUT_OFF>
	...

080034a4 <MenuChargeCC_CV>:
	EnterInMenu_Status = 1;
 80034a4:	2201      	movs	r2, #1
{
 80034a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 80034aa:	4e99      	ldr	r6, [pc, #612]	; (8003710 <MenuChargeCC_CV+0x26c>)
	EnterInMenu_Status = 1;
 80034ac:	4b99      	ldr	r3, [pc, #612]	; (8003714 <MenuChargeCC_CV+0x270>)
	if (InitiStatus==0)
 80034ae:	7834      	ldrb	r4, [r6, #0]
{
 80034b0:	4682      	mov	sl, r0
 80034b2:	4698      	mov	r8, r3
 80034b4:	4d98      	ldr	r5, [pc, #608]	; (8003718 <MenuChargeCC_CV+0x274>)
 80034b6:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8003788 <MenuChargeCC_CV+0x2e4>
 80034ba:	4f98      	ldr	r7, [pc, #608]	; (800371c <MenuChargeCC_CV+0x278>)
	EnterInMenu_Status = 1;
 80034bc:	701a      	strb	r2, [r3, #0]
	if (InitiStatus==0)
 80034be:	bb34      	cbnz	r4, 800350e <MenuChargeCC_CV+0x6a>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 80034c0:	4b97      	ldr	r3, [pc, #604]	; (8003720 <MenuChargeCC_CV+0x27c>)
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	4b97      	ldr	r3, [pc, #604]	; (8003724 <MenuChargeCC_CV+0x280>)
 80034c6:	b292      	uxth	r2, r2
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	3305      	adds	r3, #5
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d215      	bcs.n	80034fc <MenuChargeCC_CV+0x58>
			lcd_set_xy(0,0);
 80034d0:	4621      	mov	r1, r4
 80034d2:	4620      	mov	r0, r4
 80034d4:	f7fe fb48 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 80034d8:	4893      	ldr	r0, [pc, #588]	; (8003728 <MenuChargeCC_CV+0x284>)
 80034da:	f7fe fbc5 	bl	8001c68 <PrintToLCD>
			delay_ms(2000);
 80034de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034e2:	f7fd fe1b 	bl	800111c <delay_ms>
			lcd_set_xy(0,0);
 80034e6:	4621      	mov	r1, r4
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7fe fb3d 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 80034ee:	488f      	ldr	r0, [pc, #572]	; (800372c <MenuChargeCC_CV+0x288>)
 80034f0:	f7fe fbba 	bl	8001c68 <PrintToLCD>
			delay_ms(3000);
 80034f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80034f8:	f7fd fe10 	bl	800111c <delay_ms>
		ChargeStatusForTimer = 0;
 80034fc:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 80034fe:	4a8c      	ldr	r2, [pc, #560]	; (8003730 <MenuChargeCC_CV+0x28c>)
		ChargeStatusForTimer = 0;
 8003500:	702b      	strb	r3, [r5, #0]
		DisChargeStatusForTimer = 0;
 8003502:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 8003506:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 8003508:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 800350a:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 800350c:	7032      	strb	r2, [r6, #0]
	if ((ChargeTimeSec > ChargeDurationSec)|| (U_OUT> SettingsData.MaxVoltage))
 800350e:	4b89      	ldr	r3, [pc, #548]	; (8003734 <MenuChargeCC_CV+0x290>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d806      	bhi.n	8003526 <MenuChargeCC_CV+0x82>
 8003518:	4b87      	ldr	r3, [pc, #540]	; (8003738 <MenuChargeCC_CV+0x294>)
 800351a:	4a82      	ldr	r2, [pc, #520]	; (8003724 <MenuChargeCC_CV+0x280>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	6a12      	ldr	r2, [r2, #32]
 8003520:	b29b      	uxth	r3, r3
 8003522:	4293      	cmp	r3, r2
 8003524:	d903      	bls.n	800352e <MenuChargeCC_CV+0x8a>
		OFF();
 8003526:	f7ff ffb5 	bl	8003494 <OFF>
		ChargeStatusForTimer = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	702b      	strb	r3, [r5, #0]
    OUTStateAfterPowerUpFunction();
 800352e:	f7ff f90d 	bl	800274c <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 8003532:	f1ba 0f02 	cmp.w	sl, #2
 8003536:	4c81      	ldr	r4, [pc, #516]	; (800373c <MenuChargeCC_CV+0x298>)
 8003538:	d16b      	bne.n	8003612 <MenuChargeCC_CV+0x16e>
		if (On_off == 0)
 800353a:	4b81      	ldr	r3, [pc, #516]	; (8003740 <MenuChargeCC_CV+0x29c>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d163      	bne.n	800360a <MenuChargeCC_CV+0x166>
			charge();
 8003542:	f7ff fc2b 	bl	8002d9c <charge>
			ChargeStatusForTimer = 1;
 8003546:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 8003548:	702b      	strb	r3, [r5, #0]
	if(CountShow == 0)
 800354a:	f994 1000 	ldrsb.w	r1, [r4]
 800354e:	2900      	cmp	r1, #0
 8003550:	d136      	bne.n	80035c0 <MenuChargeCC_CV+0x11c>
		lcd_set_xy(0,0);
 8003552:	4608      	mov	r0, r1
 8003554:	f7fe fb08 	bl	8001b68 <lcd_set_xy>
		if (On_off ==0)
 8003558:	4b79      	ldr	r3, [pc, #484]	; (8003740 <MenuChargeCC_CV+0x29c>)
 800355a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8003738 <MenuChargeCC_CV+0x294>
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	469b      	mov	fp, r3
 8003562:	2a00      	cmp	r2, #0
 8003564:	f040 80b5 	bne.w	80036d2 <MenuChargeCC_CV+0x22e>
			PrintToLCD(itoa_koma(U_PS,2));
 8003568:	4b6d      	ldr	r3, [pc, #436]	; (8003720 <MenuChargeCC_CV+0x27c>)
 800356a:	2102      	movs	r1, #2
 800356c:	8818      	ldrh	r0, [r3, #0]
 800356e:	b280      	uxth	r0, r0
 8003570:	f7fd ff68 	bl	8001444 <itoa_koma>
 8003574:	f7fe fb78 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 8003578:	4872      	ldr	r0, [pc, #456]	; (8003744 <MenuChargeCC_CV+0x2a0>)
 800357a:	f7fe fb75 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 800357e:	f8ba 0000 	ldrh.w	r0, [sl]
 8003582:	2102      	movs	r1, #2
 8003584:	b280      	uxth	r0, r0
 8003586:	f7fd ff5d 	bl	8001444 <itoa_koma>
 800358a:	f7fe fb6d 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V     ");
 800358e:	486e      	ldr	r0, [pc, #440]	; (8003748 <MenuChargeCC_CV+0x2a4>)
			PrintToLCD("mA     ");
 8003590:	f7fe fb6a 	bl	8001c68 <PrintToLCD>
		if (On_off ==0)
 8003594:	f89b 3000 	ldrb.w	r3, [fp]
			lcd_set_xy(7,1);
 8003598:	2101      	movs	r1, #1
 800359a:	2007      	movs	r0, #7
 800359c:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 800378c <MenuChargeCC_CV+0x2e8>
		if (On_off ==0)
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 80aa 	bne.w	80036fa <MenuChargeCC_CV+0x256>
			lcd_set_xy(7,1);
 80035a6:	f7fe fadf 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 80035aa:	2101      	movs	r1, #1
 80035ac:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 80035ae:	f7fe fb03 	bl	8001bb8 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 80035b2:	f89a 3000 	ldrb.w	r3, [sl]
 80035b6:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 80035b8:	bf84      	itt	hi
 80035ba:	2300      	movhi	r3, #0
 80035bc:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 80035c0:	f994 a000 	ldrsb.w	sl, [r4]
 80035c4:	f1ba 0f01 	cmp.w	sl, #1
 80035c8:	d12f      	bne.n	800362a <MenuChargeCC_CV+0x186>
		lcd_set_xy(0,0);
 80035ca:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 80035cc:	f8df b154 	ldr.w	fp, [pc, #340]	; 8003724 <MenuChargeCC_CV+0x280>
		lcd_set_xy(0,0);
 80035d0:	4608      	mov	r0, r1
 80035d2:	f7fe fac9 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("T:");
 80035d6:	485d      	ldr	r0, [pc, #372]	; (800374c <MenuChargeCC_CV+0x2a8>)
 80035d8:	f7fe fb46 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 80035dc:	f8db 0010 	ldr.w	r0, [fp, #16]
 80035e0:	f7fd feb8 	bl	8001354 <itoa>
 80035e4:	f7fe fb40 	bl	8001c68 <PrintToLCD>
		PrintToLCD("h MaxV:");
 80035e8:	4859      	ldr	r0, [pc, #356]	; (8003750 <MenuChargeCC_CV+0x2ac>)
 80035ea:	f7fe fb3d 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80035ee:	230a      	movs	r3, #10
 80035f0:	f8db 0020 	ldr.w	r0, [fp, #32]
 80035f4:	4651      	mov	r1, sl
 80035f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80035fa:	f7fd ff23 	bl	8001444 <itoa_koma>
 80035fe:	f7fe fb33 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V   ");
 8003602:	4854      	ldr	r0, [pc, #336]	; (8003754 <MenuChargeCC_CV+0x2b0>)
 8003604:	f7fe fb30 	bl	8001c68 <PrintToLCD>
 8003608:	e00f      	b.n	800362a <MenuChargeCC_CV+0x186>
			OFF();
 800360a:	f7ff ff43 	bl	8003494 <OFF>
			ChargeStatusForTimer = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	e79a      	b.n	8003548 <MenuChargeCC_CV+0xa4>
	if (key == KEY_BACK)
 8003612:	f1ba 0f01 	cmp.w	sl, #1
 8003616:	d198      	bne.n	800354a <MenuChargeCC_CV+0xa6>
		CountShow--;
 8003618:	7823      	ldrb	r3, [r4, #0]
 800361a:	3b01      	subs	r3, #1
 800361c:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM0-1;
 800361e:	2b00      	cmp	r3, #0
 8003620:	db01      	blt.n	8003626 <MenuChargeCC_CV+0x182>
		CountShow--;
 8003622:	7023      	strb	r3, [r4, #0]
 8003624:	e791      	b.n	800354a <MenuChargeCC_CV+0xa6>
		if (CountShow<0) CountShow=MAXITEM0-1;
 8003626:	2302      	movs	r3, #2
 8003628:	7023      	strb	r3, [r4, #0]
	if(CountShow == 2)
 800362a:	f994 3000 	ldrsb.w	r3, [r4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d11a      	bne.n	8003668 <MenuChargeCC_CV+0x1c4>
		lcd_set_xy(0,0);
 8003632:	2100      	movs	r1, #0
 8003634:	4608      	mov	r0, r1
 8003636:	f7fe fa97 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("C ");
 800363a:	4847      	ldr	r0, [pc, #284]	; (8003758 <MenuChargeCC_CV+0x2b4>)
 800363c:	f7fe fb14 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <MenuChargeCC_CV+0x28c>)
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003648:	fbb0 f0f3 	udiv	r0, r0, r3
 800364c:	f7fd fe82 	bl	8001354 <itoa>
 8003650:	f7fe fb0a 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mAh     ");
 8003654:	4841      	ldr	r0, [pc, #260]	; (800375c <MenuChargeCC_CV+0x2b8>)
 8003656:	f7fe fb07 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(3,1);
 800365a:	2003      	movs	r0, #3
 800365c:	2101      	movs	r1, #1
 800365e:	f7fe fa83 	bl	8001b68 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 8003662:	6838      	ldr	r0, [r7, #0]
 8003664:	f7ff f812 	bl	800268c <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8003668:	483d      	ldr	r0, [pc, #244]	; (8003760 <MenuChargeCC_CV+0x2bc>)
 800366a:	f001 ff9b 	bl	80055a4 <printToBufferWithoutEndUART1>
 800366e:	7831      	ldrb	r1, [r6, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	483c      	ldr	r0, [pc, #240]	; (8003764 <MenuChargeCC_CV+0x2c0>)
 8003674:	f001 ffd4 	bl	8005620 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003678:	4839      	ldr	r0, [pc, #228]	; (8003760 <MenuChargeCC_CV+0x2bc>)
 800367a:	f001 ff93 	bl	80055a4 <printToBufferWithoutEndUART1>
 800367e:	f898 1000 	ldrb.w	r1, [r8]
 8003682:	2200      	movs	r2, #0
 8003684:	4838      	ldr	r0, [pc, #224]	; (8003768 <MenuChargeCC_CV+0x2c4>)
 8003686:	f001 ffcb 	bl	8005620 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 800368a:	4835      	ldr	r0, [pc, #212]	; (8003760 <MenuChargeCC_CV+0x2bc>)
 800368c:	f001 ff8a 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003690:	7829      	ldrb	r1, [r5, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	4835      	ldr	r0, [pc, #212]	; (800376c <MenuChargeCC_CV+0x2c8>)
 8003696:	f001 ffc3 	bl	8005620 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 800369a:	4831      	ldr	r0, [pc, #196]	; (8003760 <MenuChargeCC_CV+0x2bc>)
 800369c:	f001 ff82 	bl	80055a4 <printToBufferWithoutEndUART1>
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	4832      	ldr	r0, [pc, #200]	; (8003770 <MenuChargeCC_CV+0x2cc>)
 80036a6:	f001 ffbb 	bl	8005620 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 80036aa:	482d      	ldr	r0, [pc, #180]	; (8003760 <MenuChargeCC_CV+0x2bc>)
 80036ac:	f001 ff7a 	bl	80055a4 <printToBufferWithoutEndUART1>
 80036b0:	f899 1000 	ldrb.w	r1, [r9]
 80036b4:	2200      	movs	r2, #0
 80036b6:	482f      	ldr	r0, [pc, #188]	; (8003774 <MenuChargeCC_CV+0x2d0>)
 80036b8:	f001 ffb2 	bl	8005620 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80036bc:	4828      	ldr	r0, [pc, #160]	; (8003760 <MenuChargeCC_CV+0x2bc>)
 80036be:	f001 ff71 	bl	80055a4 <printToBufferWithoutEndUART1>
 80036c2:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <MenuChargeCC_CV+0x2d4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	482c      	ldr	r0, [pc, #176]	; (800377c <MenuChargeCC_CV+0x2d8>)
}
 80036ca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 80036ce:	f001 bfa7 	b.w	8005620 <printToBufferUART1D>
			PrintToLCD(itoa_koma(U_OUT,2));
 80036d2:	f8ba 0000 	ldrh.w	r0, [sl]
 80036d6:	2102      	movs	r1, #2
 80036d8:	b280      	uxth	r0, r0
 80036da:	f7fd feb3 	bl	8001444 <itoa_koma>
 80036de:	f7fe fac3 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 80036e2:	4818      	ldr	r0, [pc, #96]	; (8003744 <MenuChargeCC_CV+0x2a0>)
 80036e4:	f7fe fac0 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <MenuChargeCC_CV+0x2dc>)
 80036ea:	8818      	ldrh	r0, [r3, #0]
 80036ec:	b200      	sxth	r0, r0
 80036ee:	f7fd fe31 	bl	8001354 <itoa>
 80036f2:	f7fe fab9 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mA     ");
 80036f6:	4823      	ldr	r0, [pc, #140]	; (8003784 <MenuChargeCC_CV+0x2e0>)
 80036f8:	e74a      	b.n	8003590 <MenuChargeCC_CV+0xec>
			if (Blink_message_counter<=5)
 80036fa:	f89a 3000 	ldrb.w	r3, [sl]
 80036fe:	2b05      	cmp	r3, #5
 8003700:	f67f af51 	bls.w	80035a6 <MenuChargeCC_CV+0x102>
					lcd_set_xy(7,1);
 8003704:	f7fe fa30 	bl	8001b68 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 8003708:	2101      	movs	r1, #1
 800370a:	4608      	mov	r0, r1
 800370c:	e74f      	b.n	80035ae <MenuChargeCC_CV+0x10a>
 800370e:	bf00      	nop
 8003710:	200007a1 	.word	0x200007a1
 8003714:	200007a0 	.word	0x200007a0
 8003718:	2000078b 	.word	0x2000078b
 800371c:	2000078c 	.word	0x2000078c
 8003720:	20000874 	.word	0x20000874
 8003724:	20000154 	.word	0x20000154
 8003728:	08006468 	.word	0x08006468
 800372c:	08006479 	.word	0x08006479
 8003730:	2000077c 	.word	0x2000077c
 8003734:	20000a18 	.word	0x20000a18
 8003738:	2000086e 	.word	0x2000086e
 800373c:	20000791 	.word	0x20000791
 8003740:	200007a2 	.word	0x200007a2
 8003744:	0800638a 	.word	0x0800638a
 8003748:	0800626f 	.word	0x0800626f
 800374c:	08006571 	.word	0x08006571
 8003750:	08006574 	.word	0x08006574
 8003754:	0800622d 	.word	0x0800622d
 8003758:	0800657c 	.word	0x0800657c
 800375c:	0800657f 	.word	0x0800657f
 8003760:	08005c58 	.word	0x08005c58
 8003764:	08006588 	.word	0x08006588
 8003768:	080064ca 	.word	0x080064ca
 800376c:	080064df 	.word	0x080064df
 8003770:	080064f4 	.word	0x080064f4
 8003774:	0800651c 	.word	0x0800651c
 8003778:	20000798 	.word	0x20000798
 800377c:	08006534 	.word	0x08006534
 8003780:	2000085a 	.word	0x2000085a
 8003784:	0800649b 	.word	0x0800649b
 8003788:	20000794 	.word	0x20000794
 800378c:	20000789 	.word	0x20000789

08003790 <MenuChargeAdapt>:
	EnterInMenu_Status = 1;
 8003790:	2201      	movs	r2, #1
{
 8003792:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 8003796:	4ebc      	ldr	r6, [pc, #752]	; (8003a88 <MenuChargeAdapt+0x2f8>)
	EnterInMenu_Status = 1;
 8003798:	4bbc      	ldr	r3, [pc, #752]	; (8003a8c <MenuChargeAdapt+0x2fc>)
	if (InitiStatus==0)
 800379a:	7835      	ldrb	r5, [r6, #0]
{
 800379c:	4682      	mov	sl, r0
 800379e:	4698      	mov	r8, r3
 80037a0:	4cbb      	ldr	r4, [pc, #748]	; (8003a90 <MenuChargeAdapt+0x300>)
 80037a2:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8003b00 <MenuChargeAdapt+0x370>
 80037a6:	4fbb      	ldr	r7, [pc, #748]	; (8003a94 <MenuChargeAdapt+0x304>)
	EnterInMenu_Status = 1;
 80037a8:	701a      	strb	r2, [r3, #0]
	if (InitiStatus==0)
 80037aa:	bb35      	cbnz	r5, 80037fa <MenuChargeAdapt+0x6a>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 80037ac:	4bba      	ldr	r3, [pc, #744]	; (8003a98 <MenuChargeAdapt+0x308>)
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	4bba      	ldr	r3, [pc, #744]	; (8003a9c <MenuChargeAdapt+0x30c>)
 80037b2:	b292      	uxth	r2, r2
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	3305      	adds	r3, #5
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d215      	bcs.n	80037e8 <MenuChargeAdapt+0x58>
			lcd_set_xy(0,0);
 80037bc:	4629      	mov	r1, r5
 80037be:	4628      	mov	r0, r5
 80037c0:	f7fe f9d2 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 80037c4:	48b6      	ldr	r0, [pc, #728]	; (8003aa0 <MenuChargeAdapt+0x310>)
 80037c6:	f7fe fa4f 	bl	8001c68 <PrintToLCD>
			delay_ms(2000);
 80037ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80037ce:	f7fd fca5 	bl	800111c <delay_ms>
			lcd_set_xy(0,0);
 80037d2:	4629      	mov	r1, r5
 80037d4:	4628      	mov	r0, r5
 80037d6:	f7fe f9c7 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 80037da:	48b2      	ldr	r0, [pc, #712]	; (8003aa4 <MenuChargeAdapt+0x314>)
 80037dc:	f7fe fa44 	bl	8001c68 <PrintToLCD>
			delay_ms(3000);
 80037e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037e4:	f7fd fc9a 	bl	800111c <delay_ms>
		ChargeStatusForTimer = 0;
 80037e8:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 80037ea:	4aaf      	ldr	r2, [pc, #700]	; (8003aa8 <MenuChargeAdapt+0x318>)
		ChargeStatusForTimer = 0;
 80037ec:	7023      	strb	r3, [r4, #0]
		DisChargeStatusForTimer = 0;
 80037ee:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 80037f2:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 80037f4:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 80037f6:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 80037f8:	7032      	strb	r2, [r6, #0]
	if (ChargeTimeSec > ChargeDurationSec)
 80037fa:	4bac      	ldr	r3, [pc, #688]	; (8003aac <MenuChargeAdapt+0x31c>)
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d972      	bls.n	80038ea <MenuChargeAdapt+0x15a>
			OFF();
 8003804:	f7ff fe46 	bl	8003494 <OFF>
			ChargeStatusForTimer = 0;
 8003808:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 800380a:	7023      	strb	r3, [r4, #0]
    OUTStateAfterPowerUpFunction();
 800380c:	f7fe ff9e 	bl	800274c <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 8003810:	f1ba 0f02 	cmp.w	sl, #2
 8003814:	4da6      	ldr	r5, [pc, #664]	; (8003ab0 <MenuChargeAdapt+0x320>)
 8003816:	f040 8082 	bne.w	800391e <MenuChargeAdapt+0x18e>
		if (On_off == 0)
 800381a:	4ba6      	ldr	r3, [pc, #664]	; (8003ab4 <MenuChargeAdapt+0x324>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d179      	bne.n	8003916 <MenuChargeAdapt+0x186>
			charge();
 8003822:	f7ff fabb 	bl	8002d9c <charge>
			ChargeStatusForTimer = 1;
 8003826:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 8003828:	7023      	strb	r3, [r4, #0]
	if(CountShow == 0)
 800382a:	f995 1000 	ldrsb.w	r1, [r5]
 800382e:	2900      	cmp	r1, #0
 8003830:	d136      	bne.n	80038a0 <MenuChargeAdapt+0x110>
		lcd_set_xy(0,0);
 8003832:	4608      	mov	r0, r1
 8003834:	f7fe f998 	bl	8001b68 <lcd_set_xy>
		if (On_off ==0)
 8003838:	4b9e      	ldr	r3, [pc, #632]	; (8003ab4 <MenuChargeAdapt+0x324>)
 800383a:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8003ac8 <MenuChargeAdapt+0x338>
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	469b      	mov	fp, r3
 8003842:	2a00      	cmp	r2, #0
 8003844:	f040 8102 	bne.w	8003a4c <MenuChargeAdapt+0x2bc>
			PrintToLCD(itoa_koma(U_PS,2));
 8003848:	4b93      	ldr	r3, [pc, #588]	; (8003a98 <MenuChargeAdapt+0x308>)
 800384a:	2102      	movs	r1, #2
 800384c:	8818      	ldrh	r0, [r3, #0]
 800384e:	b280      	uxth	r0, r0
 8003850:	f7fd fdf8 	bl	8001444 <itoa_koma>
 8003854:	f7fe fa08 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 8003858:	4897      	ldr	r0, [pc, #604]	; (8003ab8 <MenuChargeAdapt+0x328>)
 800385a:	f7fe fa05 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 800385e:	f8ba 0000 	ldrh.w	r0, [sl]
 8003862:	2102      	movs	r1, #2
 8003864:	b280      	uxth	r0, r0
 8003866:	f7fd fded 	bl	8001444 <itoa_koma>
 800386a:	f7fe f9fd 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V   ");
 800386e:	4893      	ldr	r0, [pc, #588]	; (8003abc <MenuChargeAdapt+0x32c>)
			PrintToLCD("mA      ");
 8003870:	f7fe f9fa 	bl	8001c68 <PrintToLCD>
		if (On_off ==0)
 8003874:	f89b 3000 	ldrb.w	r3, [fp]
			lcd_set_xy(7,1);
 8003878:	2101      	movs	r1, #1
 800387a:	2007      	movs	r0, #7
 800387c:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003b04 <MenuChargeAdapt+0x374>
		if (On_off ==0)
 8003880:	2b00      	cmp	r3, #0
 8003882:	f040 80f7 	bne.w	8003a74 <MenuChargeAdapt+0x2e4>
			lcd_set_xy(7,1);
 8003886:	f7fe f96f 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 800388a:	2101      	movs	r1, #1
 800388c:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 800388e:	f7fe f993 	bl	8001bb8 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 8003892:	f89a 3000 	ldrb.w	r3, [sl]
 8003896:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8003898:	bf84      	itt	hi
 800389a:	2300      	movhi	r3, #0
 800389c:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 80038a0:	f995 a000 	ldrsb.w	sl, [r5]
 80038a4:	f1ba 0f01 	cmp.w	sl, #1
 80038a8:	d145      	bne.n	8003936 <MenuChargeAdapt+0x1a6>
		lcd_set_xy(0,0);
 80038aa:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 80038ac:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8003a9c <MenuChargeAdapt+0x30c>
		lcd_set_xy(0,0);
 80038b0:	4608      	mov	r0, r1
 80038b2:	f7fe f959 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("T:");
 80038b6:	4882      	ldr	r0, [pc, #520]	; (8003ac0 <MenuChargeAdapt+0x330>)
 80038b8:	f7fe f9d6 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 80038bc:	f8db 0010 	ldr.w	r0, [fp, #16]
 80038c0:	f7fd fd48 	bl	8001354 <itoa>
 80038c4:	f7fe f9d0 	bl	8001c68 <PrintToLCD>
		PrintToLCD("h MaxV:");
 80038c8:	487e      	ldr	r0, [pc, #504]	; (8003ac4 <MenuChargeAdapt+0x334>)
 80038ca:	f7fe f9cd 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80038ce:	230a      	movs	r3, #10
 80038d0:	f8db 0020 	ldr.w	r0, [fp, #32]
 80038d4:	4651      	mov	r1, sl
 80038d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80038da:	f7fd fdb3 	bl	8001444 <itoa_koma>
 80038de:	f7fe f9c3 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V   ");
 80038e2:	4876      	ldr	r0, [pc, #472]	; (8003abc <MenuChargeAdapt+0x32c>)
 80038e4:	f7fe f9c0 	bl	8001c68 <PrintToLCD>
 80038e8:	e025      	b.n	8003936 <MenuChargeAdapt+0x1a6>
		if (U_OUT> SettingsData.MaxVoltage)
 80038ea:	4977      	ldr	r1, [pc, #476]	; (8003ac8 <MenuChargeAdapt+0x338>)
 80038ec:	486b      	ldr	r0, [pc, #428]	; (8003a9c <MenuChargeAdapt+0x30c>)
 80038ee:	880a      	ldrh	r2, [r1, #0]
 80038f0:	6a03      	ldr	r3, [r0, #32]
 80038f2:	b292      	uxth	r2, r2
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d885      	bhi.n	8003804 <MenuChargeAdapt+0x74>
			if (U_OUT< (SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))   )
 80038f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80038fa:	2064      	movs	r0, #100	; 0x64
 80038fc:	435a      	muls	r2, r3
 80038fe:	fbb2 f2f0 	udiv	r2, r2, r0
 8003902:	8809      	ldrh	r1, [r1, #0]
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	b289      	uxth	r1, r1
 8003908:	4299      	cmp	r1, r3
 800390a:	f4bf af7f 	bcs.w	800380c <MenuChargeAdapt+0x7c>
				charge();
 800390e:	f7ff fa45 	bl	8002d9c <charge>
				ChargeStatusForTimer = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	e779      	b.n	800380a <MenuChargeAdapt+0x7a>
			OFF();
 8003916:	f7ff fdbd 	bl	8003494 <OFF>
			ChargeStatusForTimer = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	e784      	b.n	8003828 <MenuChargeAdapt+0x98>
	if (key == KEY_BACK)
 800391e:	f1ba 0f01 	cmp.w	sl, #1
 8003922:	d182      	bne.n	800382a <MenuChargeAdapt+0x9a>
		CountShow--;
 8003924:	782b      	ldrb	r3, [r5, #0]
 8003926:	3b01      	subs	r3, #1
 8003928:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM1-1;
 800392a:	2b00      	cmp	r3, #0
 800392c:	db01      	blt.n	8003932 <MenuChargeAdapt+0x1a2>
		CountShow--;
 800392e:	702b      	strb	r3, [r5, #0]
 8003930:	e77b      	b.n	800382a <MenuChargeAdapt+0x9a>
		if (CountShow<0) CountShow=MAXITEM1-1;
 8003932:	2303      	movs	r3, #3
 8003934:	702b      	strb	r3, [r5, #0]
	if(CountShow == 2)
 8003936:	f995 3000 	ldrsb.w	r3, [r5]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d12f      	bne.n	800399e <MenuChargeAdapt+0x20e>
		lcd_set_xy(0,0);
 800393e:	2100      	movs	r1, #0
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003940:	f04f 0a0a 	mov.w	sl, #10
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8003944:	f8df b154 	ldr.w	fp, [pc, #340]	; 8003a9c <MenuChargeAdapt+0x30c>
		lcd_set_xy(0,0);
 8003948:	4608      	mov	r0, r1
 800394a:	f7fe f90d 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 800394e:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 8003952:	f7fd fcff 	bl	8001354 <itoa>
 8003956:	f7fe f987 	bl	8001c68 <PrintToLCD>
		PrintToLCD("% ");
 800395a:	485c      	ldr	r0, [pc, #368]	; (8003acc <MenuChargeAdapt+0x33c>)
 800395c:	f7fe f984 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003960:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003964:	2101      	movs	r1, #1
 8003966:	fbb0 f0fa 	udiv	r0, r0, sl
 800396a:	f7fd fd6b 	bl	8001444 <itoa_koma>
 800396e:	f7fe f97b 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V ");
 8003972:	4851      	ldr	r0, [pc, #324]	; (8003ab8 <MenuChargeAdapt+0x328>)
 8003974:	f7fe f978 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))/10,1));
 8003978:	2264      	movs	r2, #100	; 0x64
 800397a:	f8db 3020 	ldr.w	r3, [fp, #32]
 800397e:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 8003982:	2101      	movs	r1, #1
 8003984:	4358      	muls	r0, r3
 8003986:	fbb0 f0f2 	udiv	r0, r0, r2
 800398a:	1a18      	subs	r0, r3, r0
 800398c:	fbb0 f0fa 	udiv	r0, r0, sl
 8003990:	f7fd fd58 	bl	8001444 <itoa_koma>
 8003994:	f7fe f968 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V   ");
 8003998:	4848      	ldr	r0, [pc, #288]	; (8003abc <MenuChargeAdapt+0x32c>)
 800399a:	f7fe f965 	bl	8001c68 <PrintToLCD>
	if(CountShow == 3)
 800399e:	f995 5000 	ldrsb.w	r5, [r5]
 80039a2:	2d03      	cmp	r5, #3
 80039a4:	d11a      	bne.n	80039dc <MenuChargeAdapt+0x24c>
		lcd_set_xy(0,0);
 80039a6:	2100      	movs	r1, #0
 80039a8:	4608      	mov	r0, r1
 80039aa:	f7fe f8dd 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("C ");
 80039ae:	4848      	ldr	r0, [pc, #288]	; (8003ad0 <MenuChargeAdapt+0x340>)
 80039b0:	f7fe f95a 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80039b4:	4b3c      	ldr	r3, [pc, #240]	; (8003aa8 <MenuChargeAdapt+0x318>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80039bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80039c0:	f7fd fcc8 	bl	8001354 <itoa>
 80039c4:	f7fe f950 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mAH     ");
 80039c8:	4842      	ldr	r0, [pc, #264]	; (8003ad4 <MenuChargeAdapt+0x344>)
 80039ca:	f7fe f94d 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(3,1);
 80039ce:	4628      	mov	r0, r5
 80039d0:	2101      	movs	r1, #1
 80039d2:	f7fe f8c9 	bl	8001b68 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	f7fe fe58 	bl	800268c <ClockOnLCD_noSec>
	delay_ms(MENUDELAY);
 80039dc:	2064      	movs	r0, #100	; 0x64
 80039de:	f7fd fb9d 	bl	800111c <delay_ms>
	logDebugD("Init status: ",InitiStatus,0);
 80039e2:	483d      	ldr	r0, [pc, #244]	; (8003ad8 <MenuChargeAdapt+0x348>)
 80039e4:	f001 fdde 	bl	80055a4 <printToBufferWithoutEndUART1>
 80039e8:	7831      	ldrb	r1, [r6, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	483b      	ldr	r0, [pc, #236]	; (8003adc <MenuChargeAdapt+0x34c>)
 80039ee:	f001 fe17 	bl	8005620 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80039f2:	4839      	ldr	r0, [pc, #228]	; (8003ad8 <MenuChargeAdapt+0x348>)
 80039f4:	f001 fdd6 	bl	80055a4 <printToBufferWithoutEndUART1>
 80039f8:	f898 1000 	ldrb.w	r1, [r8]
 80039fc:	2200      	movs	r2, #0
 80039fe:	4838      	ldr	r0, [pc, #224]	; (8003ae0 <MenuChargeAdapt+0x350>)
 8003a00:	f001 fe0e 	bl	8005620 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003a04:	4834      	ldr	r0, [pc, #208]	; (8003ad8 <MenuChargeAdapt+0x348>)
 8003a06:	f001 fdcd 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003a0a:	7821      	ldrb	r1, [r4, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4835      	ldr	r0, [pc, #212]	; (8003ae4 <MenuChargeAdapt+0x354>)
 8003a10:	f001 fe06 	bl	8005620 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003a14:	4830      	ldr	r0, [pc, #192]	; (8003ad8 <MenuChargeAdapt+0x348>)
 8003a16:	f001 fdc5 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003a1a:	6839      	ldr	r1, [r7, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4832      	ldr	r0, [pc, #200]	; (8003ae8 <MenuChargeAdapt+0x358>)
 8003a20:	f001 fdfe 	bl	8005620 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003a24:	482c      	ldr	r0, [pc, #176]	; (8003ad8 <MenuChargeAdapt+0x348>)
 8003a26:	f001 fdbd 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003a2a:	f899 1000 	ldrb.w	r1, [r9]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	482e      	ldr	r0, [pc, #184]	; (8003aec <MenuChargeAdapt+0x35c>)
 8003a32:	f001 fdf5 	bl	8005620 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003a36:	4828      	ldr	r0, [pc, #160]	; (8003ad8 <MenuChargeAdapt+0x348>)
 8003a38:	f001 fdb4 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <MenuChargeAdapt+0x360>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	482c      	ldr	r0, [pc, #176]	; (8003af4 <MenuChargeAdapt+0x364>)
}
 8003a44:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003a48:	f001 bdea 	b.w	8005620 <printToBufferUART1D>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003a4c:	f8ba 0000 	ldrh.w	r0, [sl]
 8003a50:	2102      	movs	r1, #2
 8003a52:	b280      	uxth	r0, r0
 8003a54:	f7fd fcf6 	bl	8001444 <itoa_koma>
 8003a58:	f7fe f906 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 8003a5c:	4816      	ldr	r0, [pc, #88]	; (8003ab8 <MenuChargeAdapt+0x328>)
 8003a5e:	f7fe f903 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003a62:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <MenuChargeAdapt+0x368>)
 8003a64:	8818      	ldrh	r0, [r3, #0]
 8003a66:	b200      	sxth	r0, r0
 8003a68:	f7fd fc74 	bl	8001354 <itoa>
 8003a6c:	f7fe f8fc 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mA      ");
 8003a70:	4822      	ldr	r0, [pc, #136]	; (8003afc <MenuChargeAdapt+0x36c>)
 8003a72:	e6fd      	b.n	8003870 <MenuChargeAdapt+0xe0>
			if (Blink_message_counter<=5)
 8003a74:	f89a 3000 	ldrb.w	r3, [sl]
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	f67f af04 	bls.w	8003886 <MenuChargeAdapt+0xf6>
					lcd_set_xy(7,1);
 8003a7e:	f7fe f873 	bl	8001b68 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 8003a82:	2101      	movs	r1, #1
 8003a84:	4608      	mov	r0, r1
 8003a86:	e702      	b.n	800388e <MenuChargeAdapt+0xfe>
 8003a88:	200007a1 	.word	0x200007a1
 8003a8c:	200007a0 	.word	0x200007a0
 8003a90:	2000078b 	.word	0x2000078b
 8003a94:	2000078c 	.word	0x2000078c
 8003a98:	20000874 	.word	0x20000874
 8003a9c:	20000154 	.word	0x20000154
 8003aa0:	08006468 	.word	0x08006468
 8003aa4:	08006479 	.word	0x08006479
 8003aa8:	2000077c 	.word	0x2000077c
 8003aac:	20000a18 	.word	0x20000a18
 8003ab0:	20000791 	.word	0x20000791
 8003ab4:	200007a2 	.word	0x200007a2
 8003ab8:	0800638a 	.word	0x0800638a
 8003abc:	0800622d 	.word	0x0800622d
 8003ac0:	08006571 	.word	0x08006571
 8003ac4:	08006574 	.word	0x08006574
 8003ac8:	2000086e 	.word	0x2000086e
 8003acc:	08006387 	.word	0x08006387
 8003ad0:	0800657c 	.word	0x0800657c
 8003ad4:	080064b0 	.word	0x080064b0
 8003ad8:	08005c58 	.word	0x08005c58
 8003adc:	08006588 	.word	0x08006588
 8003ae0:	080064ca 	.word	0x080064ca
 8003ae4:	080064df 	.word	0x080064df
 8003ae8:	080064f4 	.word	0x080064f4
 8003aec:	0800651c 	.word	0x0800651c
 8003af0:	20000798 	.word	0x20000798
 8003af4:	08006534 	.word	0x08006534
 8003af8:	2000085a 	.word	0x2000085a
 8003afc:	08006596 	.word	0x08006596
 8003b00:	20000794 	.word	0x20000794
 8003b04:	20000789 	.word	0x20000789

08003b08 <MenuDisCharge>:
	EnterInMenu_Status = 1;
 8003b08:	2101      	movs	r1, #1
{
 8003b0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (InitiStatus==0)
 8003b0e:	4d8a      	ldr	r5, [pc, #552]	; (8003d38 <MenuDisCharge+0x230>)
	EnterInMenu_Status = 1;
 8003b10:	4e8a      	ldr	r6, [pc, #552]	; (8003d3c <MenuDisCharge+0x234>)
	if (InitiStatus==0)
 8003b12:	782b      	ldrb	r3, [r5, #0]
 8003b14:	4a8a      	ldr	r2, [pc, #552]	; (8003d40 <MenuDisCharge+0x238>)
	EnterInMenu_Status = 1;
 8003b16:	7031      	strb	r1, [r6, #0]
	if (InitiStatus==0)
 8003b18:	b94b      	cbnz	r3, 8003b2e <MenuDisCharge+0x26>
		InitiStatus = 1;
 8003b1a:	7029      	strb	r1, [r5, #0]
		ChargeStatusForTimer = 0;
 8003b1c:	4989      	ldr	r1, [pc, #548]	; (8003d44 <MenuDisCharge+0x23c>)
		BatteryLow=0;
 8003b1e:	7013      	strb	r3, [r2, #0]
		ChargeStatusForTimer = 0;
 8003b20:	700b      	strb	r3, [r1, #0]
		DisChargeStatusForTimer = 0;
 8003b22:	4989      	ldr	r1, [pc, #548]	; (8003d48 <MenuDisCharge+0x240>)
 8003b24:	700b      	strb	r3, [r1, #0]
		BatteryCapacityDischargeCurrent = 0;
 8003b26:	4989      	ldr	r1, [pc, #548]	; (8003d4c <MenuDisCharge+0x244>)
 8003b28:	600b      	str	r3, [r1, #0]
		DischargeTimeSec = 0;
 8003b2a:	4989      	ldr	r1, [pc, #548]	; (8003d50 <MenuDisCharge+0x248>)
 8003b2c:	600b      	str	r3, [r1, #0]
	U_BatteryTmp = U_OUT;
 8003b2e:	4f89      	ldr	r7, [pc, #548]	; (8003d54 <MenuDisCharge+0x24c>)
 8003b30:	4989      	ldr	r1, [pc, #548]	; (8003d58 <MenuDisCharge+0x250>)
 8003b32:	883b      	ldrh	r3, [r7, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	800b      	strh	r3, [r1, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 8003b38:	4988      	ldr	r1, [pc, #544]	; (8003d5c <MenuDisCharge+0x254>)
 8003b3a:	698c      	ldr	r4, [r1, #24]
 8003b3c:	4688      	mov	r8, r1
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	f0c0 80f1 	bcc.w	8003d26 <MenuDisCharge+0x21e>
 8003b44:	2300      	movs	r3, #0
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8003b46:	4986      	ldr	r1, [pc, #536]	; (8003d60 <MenuDisCharge+0x258>)
		BatteryLow = 1;
 8003b48:	7013      	strb	r3, [r2, #0]
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8003b4a:	4b86      	ldr	r3, [pc, #536]	; (8003d64 <MenuDisCharge+0x25c>)
 8003b4c:	6809      	ldr	r1, [r1, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8003d48 <MenuDisCharge+0x240>
 8003b54:	1a5b      	subs	r3, r3, r1
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d906      	bls.n	8003b68 <MenuDisCharge+0x60>
 8003b5a:	7813      	ldrb	r3, [r2, #0]
 8003b5c:	b123      	cbz	r3, 8003b68 <MenuDisCharge+0x60>
		OFF();
 8003b5e:	f7ff fc99 	bl	8003494 <OFF>
		DisChargeStatusForTimer = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f889 3000 	strb.w	r3, [r9]
	if (key == KEY_NEXT)
 8003b68:	2802      	cmp	r0, #2
 8003b6a:	4c7f      	ldr	r4, [pc, #508]	; (8003d68 <MenuDisCharge+0x260>)
 8003b6c:	d152      	bne.n	8003c14 <MenuDisCharge+0x10c>
    	if (On_off == 0)
 8003b6e:	4b7f      	ldr	r3, [pc, #508]	; (8003d6c <MenuDisCharge+0x264>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d14a      	bne.n	8003c0c <MenuDisCharge+0x104>
    		discharge();
 8003b76:	f7fe ffc9 	bl	8002b0c <discharge>
    		DisChargeStatusForTimer = 1;
 8003b7a:	2301      	movs	r3, #1
    		DisChargeStatusForTimer = 0;
 8003b7c:	f889 3000 	strb.w	r3, [r9]
	if(CountShow == 0)
 8003b80:	f994 1000 	ldrsb.w	r1, [r4]
 8003b84:	bb49      	cbnz	r1, 8003bda <MenuDisCharge+0xd2>
		lcd_set_xy(0,0);
 8003b86:	4608      	mov	r0, r1
 8003b88:	f7fd ffee 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(itoa_koma(U_OUT ,2));
 8003b8c:	8838      	ldrh	r0, [r7, #0]
 8003b8e:	2102      	movs	r1, #2
 8003b90:	b280      	uxth	r0, r0
 8003b92:	f7fd fc57 	bl	8001444 <itoa_koma>
 8003b96:	f7fe f867 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V ");
 8003b9a:	4875      	ldr	r0, [pc, #468]	; (8003d70 <MenuDisCharge+0x268>)
 8003b9c:	f7fe f864 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(Current ));
 8003ba0:	4b74      	ldr	r3, [pc, #464]	; (8003d74 <MenuDisCharge+0x26c>)
 8003ba2:	4f75      	ldr	r7, [pc, #468]	; (8003d78 <MenuDisCharge+0x270>)
 8003ba4:	8818      	ldrh	r0, [r3, #0]
 8003ba6:	b200      	sxth	r0, r0
 8003ba8:	f7fd fbd4 	bl	8001354 <itoa>
 8003bac:	f7fe f85c 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mA      ");
 8003bb0:	4872      	ldr	r0, [pc, #456]	; (8003d7c <MenuDisCharge+0x274>)
 8003bb2:	f7fe f859 	bl	8001c68 <PrintToLCD>
		if (On_off ==0)
 8003bb6:	4b6d      	ldr	r3, [pc, #436]	; (8003d6c <MenuDisCharge+0x264>)
				lcd_set_xy(7,1);
 8003bb8:	2101      	movs	r1, #1
		if (On_off ==0)
 8003bba:	781b      	ldrb	r3, [r3, #0]
				lcd_set_xy(7,1);
 8003bbc:	2007      	movs	r0, #7
		if (On_off ==0)
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 80a8 	bne.w	8003d14 <MenuDisCharge+0x20c>
				lcd_set_xy(7,1);
 8003bc4:	f7fd ffd0 	bl	8001b68 <lcd_set_xy>
				LcdOutbyNumber(2,1);
 8003bc8:	2101      	movs	r1, #1
 8003bca:	2002      	movs	r0, #2
						LcdOutbyNumber(3,1);
 8003bcc:	f7fd fff4 	bl	8001bb8 <LcdOutbyNumber>
			if (Blink_message_counter>10)
 8003bd0:	783b      	ldrb	r3, [r7, #0]
 8003bd2:	2b0a      	cmp	r3, #10
				Blink_message_counter = 0;
 8003bd4:	bf84      	itt	hi
 8003bd6:	2300      	movhi	r3, #0
 8003bd8:	703b      	strbhi	r3, [r7, #0]
	if(CountShow == 1)
 8003bda:	f994 7000 	ldrsb.w	r7, [r4]
 8003bde:	2f01      	cmp	r7, #1
 8003be0:	d123      	bne.n	8003c2a <MenuDisCharge+0x122>
		lcd_set_xy(0,0);
 8003be2:	2100      	movs	r1, #0
 8003be4:	4608      	mov	r0, r1
 8003be6:	f7fd ffbf 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("OffWhen Vb<");
 8003bea:	4865      	ldr	r0, [pc, #404]	; (8003d80 <MenuDisCharge+0x278>)
 8003bec:	f7fe f83c 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.LowVoltage/10 ,1));
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bfc:	f7fd fc22 	bl	8001444 <itoa_koma>
 8003c00:	f7fe f832 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V   ");
 8003c04:	485f      	ldr	r0, [pc, #380]	; (8003d84 <MenuDisCharge+0x27c>)
 8003c06:	f7fe f82f 	bl	8001c68 <PrintToLCD>
 8003c0a:	e00e      	b.n	8003c2a <MenuDisCharge+0x122>
    		OFF();
 8003c0c:	f7ff fc42 	bl	8003494 <OFF>
    		DisChargeStatusForTimer = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e7b3      	b.n	8003b7c <MenuDisCharge+0x74>
	if (key == KEY_BACK)
 8003c14:	2801      	cmp	r0, #1
 8003c16:	d1b3      	bne.n	8003b80 <MenuDisCharge+0x78>
		CountShow--;
 8003c18:	7823      	ldrb	r3, [r4, #0]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM2-1;
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	db01      	blt.n	8003c26 <MenuDisCharge+0x11e>
		CountShow--;
 8003c22:	7023      	strb	r3, [r4, #0]
 8003c24:	e7ac      	b.n	8003b80 <MenuDisCharge+0x78>
		if (CountShow<0) CountShow=MAXITEM2-1;
 8003c26:	2303      	movs	r3, #3
 8003c28:	7023      	strb	r3, [r4, #0]
	if(CountShow == 2)
 8003c2a:	f994 3000 	ldrsb.w	r3, [r4]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d11b      	bne.n	8003c6a <MenuDisCharge+0x162>
		lcd_set_xy(0,0);
 8003c32:	2100      	movs	r1, #0
 8003c34:	4608      	mov	r0, r1
 8003c36:	f7fd ff97 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("P ");
 8003c3a:	4853      	ldr	r0, [pc, #332]	; (8003d88 <MenuDisCharge+0x280>)
 8003c3c:	f7fe f814 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600 ));
 8003c40:	4b52      	ldr	r3, [pc, #328]	; (8003d8c <MenuDisCharge+0x284>)
 8003c42:	6898      	ldr	r0, [r3, #8]
 8003c44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003c48:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c4c:	f7fd fb82 	bl	8001354 <itoa>
 8003c50:	f7fe f80a 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mAh     ");
 8003c54:	484e      	ldr	r0, [pc, #312]	; (8003d90 <MenuDisCharge+0x288>)
 8003c56:	f7fe f807 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(3,1);
 8003c5a:	2003      	movs	r0, #3
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	f7fd ff83 	bl	8001b68 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8003c62:	4b4c      	ldr	r3, [pc, #304]	; (8003d94 <MenuDisCharge+0x28c>)
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	f7fe fd11 	bl	800268c <ClockOnLCD_noSec>
	if(CountShow == 3)
 8003c6a:	f994 7000 	ldrsb.w	r7, [r4]
 8003c6e:	4c38      	ldr	r4, [pc, #224]	; (8003d50 <MenuDisCharge+0x248>)
 8003c70:	2f03      	cmp	r7, #3
 8003c72:	d11a      	bne.n	8003caa <MenuDisCharge+0x1a2>
		lcd_set_xy(0,0);
 8003c74:	2100      	movs	r1, #0
 8003c76:	4608      	mov	r0, r1
 8003c78:	f7fd ff76 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("N ");
 8003c7c:	4846      	ldr	r0, [pc, #280]	; (8003d98 <MenuDisCharge+0x290>)
 8003c7e:	f7fd fff3 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600 ));
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <MenuDisCharge+0x244>)
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003c8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c8e:	f7fd fb61 	bl	8001354 <itoa>
 8003c92:	f7fd ffe9 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mAH     ");
 8003c96:	4841      	ldr	r0, [pc, #260]	; (8003d9c <MenuDisCharge+0x294>)
 8003c98:	f7fd ffe6 	bl	8001c68 <PrintToLCD>
		lcd_set_xy(3,1);
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	f7fd ff62 	bl	8001b68 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec);
 8003ca4:	6820      	ldr	r0, [r4, #0]
 8003ca6:	f7fe fcf1 	bl	800268c <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8003caa:	483d      	ldr	r0, [pc, #244]	; (8003da0 <MenuDisCharge+0x298>)
 8003cac:	f001 fc7a 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003cb0:	7829      	ldrb	r1, [r5, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	483b      	ldr	r0, [pc, #236]	; (8003da4 <MenuDisCharge+0x29c>)
 8003cb6:	f001 fcb3 	bl	8005620 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003cba:	4839      	ldr	r0, [pc, #228]	; (8003da0 <MenuDisCharge+0x298>)
 8003cbc:	f001 fc72 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003cc0:	7831      	ldrb	r1, [r6, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	4838      	ldr	r0, [pc, #224]	; (8003da8 <MenuDisCharge+0x2a0>)
 8003cc6:	f001 fcab 	bl	8005620 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003cca:	4835      	ldr	r0, [pc, #212]	; (8003da0 <MenuDisCharge+0x298>)
 8003ccc:	f001 fc6a 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <MenuDisCharge+0x23c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	7819      	ldrb	r1, [r3, #0]
 8003cd6:	4835      	ldr	r0, [pc, #212]	; (8003dac <MenuDisCharge+0x2a4>)
 8003cd8:	f001 fca2 	bl	8005620 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003cdc:	4830      	ldr	r0, [pc, #192]	; (8003da0 <MenuDisCharge+0x298>)
 8003cde:	f001 fc61 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003ce2:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <MenuDisCharge+0x2a8>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	6819      	ldr	r1, [r3, #0]
 8003ce8:	4832      	ldr	r0, [pc, #200]	; (8003db4 <MenuDisCharge+0x2ac>)
 8003cea:	f001 fc99 	bl	8005620 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003cee:	482c      	ldr	r0, [pc, #176]	; (8003da0 <MenuDisCharge+0x298>)
 8003cf0:	f001 fc58 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003cf4:	f899 1000 	ldrb.w	r1, [r9]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	482f      	ldr	r0, [pc, #188]	; (8003db8 <MenuDisCharge+0x2b0>)
 8003cfc:	f001 fc90 	bl	8005620 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003d00:	4827      	ldr	r0, [pc, #156]	; (8003da0 <MenuDisCharge+0x298>)
 8003d02:	f001 fc4f 	bl	80055a4 <printToBufferWithoutEndUART1>
 8003d06:	6821      	ldr	r1, [r4, #0]
 8003d08:	2200      	movs	r2, #0
}
 8003d0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003d0e:	482b      	ldr	r0, [pc, #172]	; (8003dbc <MenuDisCharge+0x2b4>)
 8003d10:	f001 bc86 	b.w	8005620 <printToBufferUART1D>
				if (Blink_message_counter<=5)
 8003d14:	783b      	ldrb	r3, [r7, #0]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	f67f af54 	bls.w	8003bc4 <MenuDisCharge+0xbc>
						lcd_set_xy(7,1);
 8003d1c:	f7fd ff24 	bl	8001b68 <lcd_set_xy>
						LcdOutbyNumber(3,1);
 8003d20:	2101      	movs	r1, #1
 8003d22:	2003      	movs	r0, #3
 8003d24:	e752      	b.n	8003bcc <MenuDisCharge+0xc4>
		if (BatteryLow == 0) U_Battery_Timer = time_sec;
 8003d26:	7813      	ldrb	r3, [r2, #0]
 8003d28:	b91b      	cbnz	r3, 8003d32 <MenuDisCharge+0x22a>
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <MenuDisCharge+0x25c>)
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <MenuDisCharge+0x258>)
 8003d30:	6019      	str	r1, [r3, #0]
		BatteryLow = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e707      	b.n	8003b46 <MenuDisCharge+0x3e>
 8003d36:	bf00      	nop
 8003d38:	200007a1 	.word	0x200007a1
 8003d3c:	200007a0 	.word	0x200007a0
 8003d40:	20000788 	.word	0x20000788
 8003d44:	2000078b 	.word	0x2000078b
 8003d48:	20000794 	.word	0x20000794
 8003d4c:	20000780 	.word	0x20000780
 8003d50:	20000798 	.word	0x20000798
 8003d54:	2000086e 	.word	0x2000086e
 8003d58:	200007d4 	.word	0x200007d4
 8003d5c:	20000154 	.word	0x20000154
 8003d60:	200007d8 	.word	0x200007d8
 8003d64:	200007e8 	.word	0x200007e8
 8003d68:	20000791 	.word	0x20000791
 8003d6c:	200007a2 	.word	0x200007a2
 8003d70:	0800638a 	.word	0x0800638a
 8003d74:	2000085a 	.word	0x2000085a
 8003d78:	20000789 	.word	0x20000789
 8003d7c:	08006596 	.word	0x08006596
 8003d80:	0800659f 	.word	0x0800659f
 8003d84:	0800622d 	.word	0x0800622d
 8003d88:	080064ad 	.word	0x080064ad
 8003d8c:	200000f4 	.word	0x200000f4
 8003d90:	0800657f 	.word	0x0800657f
 8003d94:	2000079c 	.word	0x2000079c
 8003d98:	0800644b 	.word	0x0800644b
 8003d9c:	080064b0 	.word	0x080064b0
 8003da0:	08005c58 	.word	0x08005c58
 8003da4:	08006588 	.word	0x08006588
 8003da8:	080064ca 	.word	0x080064ca
 8003dac:	080064df 	.word	0x080064df
 8003db0:	2000078c 	.word	0x2000078c
 8003db4:	080064f4 	.word	0x080064f4
 8003db8:	0800651c 	.word	0x0800651c
 8003dbc:	08006534 	.word	0x08006534

08003dc0 <MenuCheckingCapacity>:
{
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8003dc4:	4aa0      	ldr	r2, [pc, #640]	; (8004048 <MenuCheckingCapacity+0x288>)
{
 8003dc6:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8003dc8:	7813      	ldrb	r3, [r2, #0]
{
 8003dca:	4683      	mov	fp, r0
 8003dcc:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 80040a4 <MenuCheckingCapacity+0x2e4>
 8003dd0:	4e9e      	ldr	r6, [pc, #632]	; (800404c <MenuCheckingCapacity+0x28c>)
 8003dd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80040a8 <MenuCheckingCapacity+0x2e8>
 8003dd6:	4d9e      	ldr	r5, [pc, #632]	; (8004050 <MenuCheckingCapacity+0x290>)
 8003dd8:	4f9e      	ldr	r7, [pc, #632]	; (8004054 <MenuCheckingCapacity+0x294>)
 8003dda:	4c9f      	ldr	r4, [pc, #636]	; (8004058 <MenuCheckingCapacity+0x298>)
	if (EnterInMenu_Status == 0)
 8003ddc:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003de0:	9201      	str	r2, [sp, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 8162 	bne.w	80040ac <MenuCheckingCapacity+0x2ec>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003de8:	4b9c      	ldr	r3, [pc, #624]	; (800405c <MenuCheckingCapacity+0x29c>)
 8003dea:	881a      	ldrh	r2, [r3, #0]
 8003dec:	4b9c      	ldr	r3, [pc, #624]	; (8004060 <MenuCheckingCapacity+0x2a0>)
 8003dee:	b292      	uxth	r2, r2
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	3305      	adds	r3, #5
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d215      	bcs.n	8003e24 <MenuCheckingCapacity+0x64>
			lcd_set_xy(0,0);
 8003df8:	4641      	mov	r1, r8
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f7fd feb4 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003e00:	4898      	ldr	r0, [pc, #608]	; (8004064 <MenuCheckingCapacity+0x2a4>)
 8003e02:	f7fd ff31 	bl	8001c68 <PrintToLCD>
			delay_ms(2000);
 8003e06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e0a:	f7fd f987 	bl	800111c <delay_ms>
			lcd_set_xy(0,0);
 8003e0e:	4641      	mov	r1, r8
 8003e10:	4640      	mov	r0, r8
 8003e12:	f7fd fea9 	bl	8001b68 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003e16:	4894      	ldr	r0, [pc, #592]	; (8004068 <MenuCheckingCapacity+0x2a8>)
 8003e18:	f7fd ff26 	bl	8001c68 <PrintToLCD>
			delay_ms(3000);
 8003e1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003e20:	f7fd f97c 	bl	800111c <delay_ms>
		EnterInMenu_Status = 1;
 8003e24:	2301      	movs	r3, #1
		ChargeStatusForTimer = 0;
 8003e26:	f04f 0800 	mov.w	r8, #0
		EnterInMenu_Status = 1;
 8003e2a:	9a01      	ldr	r2, [sp, #4]
 8003e2c:	7013      	strb	r3, [r2, #0]
		DisChargeStatusForTimer = 0;
 8003e2e:	4a8f      	ldr	r2, [pc, #572]	; (800406c <MenuCheckingCapacity+0x2ac>)
		ChargeStatusForTimer = 0;
 8003e30:	f88a 8000 	strb.w	r8, [sl]
		DisChargeStatusForTimer = 0;
 8003e34:	f882 8000 	strb.w	r8, [r2]
		DischargeTimeSec_Previous = 0;
 8003e38:	4a8d      	ldr	r2, [pc, #564]	; (8004070 <MenuCheckingCapacity+0x2b0>)
		ChargeTimeSec = 0;
 8003e3a:	f8c6 8000 	str.w	r8, [r6]
		DischargeTimeSec = 0;
 8003e3e:	f8c9 8000 	str.w	r8, [r9]
		DischargeTimeSec_Previous = 0;
 8003e42:	f8c2 8000 	str.w	r8, [r2]
		BatteryCapacityCharge = 0;
 8003e46:	f8c5 8000 	str.w	r8, [r5]
		BatteryCapacityDischargeCurrent = 0;
 8003e4a:	f8c7 8000 	str.w	r8, [r7]
		ChargeStatusForTimer = 1;
 8003e4e:	f88a 3000 	strb.w	r3, [sl]
		charge1();
 8003e52:	f7fe ffad 	bl	8002db0 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8003e56:	2301      	movs	r3, #1
 8003e58:	4a86      	ldr	r2, [pc, #536]	; (8004074 <MenuCheckingCapacity+0x2b4>)
		lcd_set_xy(0,0);
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	4640      	mov	r0, r8
		ChargeDischargeStatus = CHARGEs;
 8003e5e:	7013      	strb	r3, [r2, #0]
		lcd_set_xy(0,0);
 8003e60:	f7fd fe82 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8003e64:	4884      	ldr	r0, [pc, #528]	; (8004078 <MenuCheckingCapacity+0x2b8>)
 8003e66:	f7fd feff 	bl	8001c68 <PrintToLCD>
		delay_ms(1000);
 8003e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e6e:	f7fd f955 	bl	800111c <delay_ms>
		CheckingCapacityCounter = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	7023      	strb	r3, [r4, #0]
		if (Module16(Current)>5)
 8003e76:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80040a0 <MenuCheckingCapacity+0x2e0>
 8003e7a:	f8b8 0000 	ldrh.w	r0, [r8]
 8003e7e:	b200      	sxth	r0, r0
 8003e80:	f7fd fbb0 	bl	80015e4 <Module16>
 8003e84:	2805      	cmp	r0, #5
 8003e86:	f8cd 8008 	str.w	r8, [sp, #8]
 8003e8a:	f340 8195 	ble.w	80041b8 <MenuCheckingCapacity+0x3f8>
			if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003e8e:	4b7b      	ldr	r3, [pc, #492]	; (800407c <MenuCheckingCapacity+0x2bc>)
 8003e90:	4a73      	ldr	r2, [pc, #460]	; (8004060 <MenuCheckingCapacity+0x2a0>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	6991      	ldr	r1, [r2, #24]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	4690      	mov	r8, r2
 8003e9c:	d229      	bcs.n	8003ef2 <MenuCheckingCapacity+0x132>
 8003e9e:	4b75      	ldr	r3, [pc, #468]	; (8004074 <MenuCheckingCapacity+0x2b4>)
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	2a02      	cmp	r2, #2
 8003ea4:	d125      	bne.n	8003ef2 <MenuCheckingCapacity+0x132>
 8003ea6:	4b76      	ldr	r3, [pc, #472]	; (8004080 <MenuCheckingCapacity+0x2c0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eae:	d920      	bls.n	8003ef2 <MenuCheckingCapacity+0x132>
				DisChargeStatusForTimer = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	496e      	ldr	r1, [pc, #440]	; (800406c <MenuCheckingCapacity+0x2ac>)
 8003eb4:	700b      	strb	r3, [r1, #0]
				if (BatteryCapacityDischargeCurrent/3600 > 100)
 8003eb6:	6839      	ldr	r1, [r7, #0]
 8003eb8:	4b72      	ldr	r3, [pc, #456]	; (8004084 <MenuCheckingCapacity+0x2c4>)
 8003eba:	4299      	cmp	r1, r3
 8003ebc:	d904      	bls.n	8003ec8 <MenuCheckingCapacity+0x108>
					MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8003ebe:	6838      	ldr	r0, [r7, #0]
 8003ec0:	f8d9 1000 	ldr.w	r1, [r9]
 8003ec4:	f7fe f87a 	bl	8001fbc <MenuTraining_WriteInLOG>
				DischargeTimeSec_Previous = DischargeTimeSec;
 8003ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8003ecc:	4b68      	ldr	r3, [pc, #416]	; (8004070 <MenuCheckingCapacity+0x2b0>)
 8003ece:	601a      	str	r2, [r3, #0]
				SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	4b6d      	ldr	r3, [pc, #436]	; (8004088 <MenuCheckingCapacity+0x2c8>)
 8003ed4:	609a      	str	r2, [r3, #8]
				BatteryCapacityCharge = 0;
 8003ed6:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f88a 2000 	strb.w	r2, [sl]
				BatteryCapacityCharge = 0;
 8003ede:	602b      	str	r3, [r5, #0]
				ChargeTimeSec = 0;
 8003ee0:	6033      	str	r3, [r6, #0]
				charge1();
 8003ee2:	f7fe ff65 	bl	8002db0 <charge1>
				ChargeDischargeStatus = CHARGEs;
 8003ee6:	2201      	movs	r2, #1
				CheckingCapacityCounter ++;
 8003ee8:	7823      	ldrb	r3, [r4, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003eee:	4b61      	ldr	r3, [pc, #388]	; (8004074 <MenuCheckingCapacity+0x2b4>)
 8003ef0:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter<3)
 8003ef2:	4a62      	ldr	r2, [pc, #392]	; (800407c <MenuCheckingCapacity+0x2bc>)
 8003ef4:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8003ef8:	8813      	ldrh	r3, [r2, #0]
 8003efa:	9203      	str	r2, [sp, #12]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	428b      	cmp	r3, r1
 8003f00:	d908      	bls.n	8003f14 <MenuCheckingCapacity+0x154>
 8003f02:	4b5c      	ldr	r3, [pc, #368]	; (8004074 <MenuCheckingCapacity+0x2b4>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d104      	bne.n	8003f14 <MenuCheckingCapacity+0x154>
 8003f0a:	4b5d      	ldr	r3, [pc, #372]	; (8004080 <MenuCheckingCapacity+0x2c0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f12:	d808      	bhi.n	8003f26 <MenuCheckingCapacity+0x166>
 8003f14:	4b5d      	ldr	r3, [pc, #372]	; (800408c <MenuCheckingCapacity+0x2cc>)
 8003f16:	6832      	ldr	r2, [r6, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d922      	bls.n	8003f64 <MenuCheckingCapacity+0x1a4>
 8003f1e:	4b55      	ldr	r3, [pc, #340]	; (8004074 <MenuCheckingCapacity+0x2b4>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d11e      	bne.n	8003f64 <MenuCheckingCapacity+0x1a4>
 8003f26:	f994 3000 	ldrsb.w	r3, [r4]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	dc1a      	bgt.n	8003f64 <MenuCheckingCapacity+0x1a4>
				ChargeStatusForTimer = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f88a 3000 	strb.w	r3, [sl]
				if (BatteryCapacityCharge/3600 > 100)
 8003f34:	682a      	ldr	r2, [r5, #0]
 8003f36:	4b53      	ldr	r3, [pc, #332]	; (8004084 <MenuCheckingCapacity+0x2c4>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d904      	bls.n	8003f46 <MenuCheckingCapacity+0x186>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003f3c:	6828      	ldr	r0, [r5, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	6831      	ldr	r1, [r6, #0]
 8003f42:	f7fe f83b 	bl	8001fbc <MenuTraining_WriteInLOG>
				DisChargeStatusForTimer = 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	4a48      	ldr	r2, [pc, #288]	; (800406c <MenuCheckingCapacity+0x2ac>)
 8003f4a:	7013      	strb	r3, [r2, #0]
				BatteryCapacityDischargeCurrent = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	603b      	str	r3, [r7, #0]
				DischargeTimeSec = 0;
 8003f50:	f8c9 3000 	str.w	r3, [r9]
				discharge1();
 8003f54:	f7fe fe1c 	bl	8002b90 <discharge1>
				ChargeDischargeStatus = DISCHARGEs;
 8003f58:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003f5a:	7823      	ldrb	r3, [r4, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = DISCHARGEs;
 8003f60:	4b44      	ldr	r3, [pc, #272]	; (8004074 <MenuCheckingCapacity+0x2b4>)
 8003f62:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter>=3)
 8003f64:	4b45      	ldr	r3, [pc, #276]	; (800407c <MenuCheckingCapacity+0x2bc>)
 8003f66:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d908      	bls.n	8003f84 <MenuCheckingCapacity+0x1c4>
 8003f72:	4b40      	ldr	r3, [pc, #256]	; (8004074 <MenuCheckingCapacity+0x2b4>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d104      	bne.n	8003f84 <MenuCheckingCapacity+0x1c4>
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <MenuCheckingCapacity+0x2c0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f82:	d808      	bhi.n	8003f96 <MenuCheckingCapacity+0x1d6>
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <MenuCheckingCapacity+0x2cc>)
 8003f86:	6832      	ldr	r2, [r6, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d91d      	bls.n	8003fca <MenuCheckingCapacity+0x20a>
 8003f8e:	4b39      	ldr	r3, [pc, #228]	; (8004074 <MenuCheckingCapacity+0x2b4>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d119      	bne.n	8003fca <MenuCheckingCapacity+0x20a>
 8003f96:	f994 3000 	ldrsb.w	r3, [r4]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	dd15      	ble.n	8003fca <MenuCheckingCapacity+0x20a>
				OFF();
 8003f9e:	f7ff fa79 	bl	8003494 <OFF>
				ChargeStatusForTimer = 0;
 8003fa2:	2300      	movs	r3, #0
				DisChargeStatusForTimer = 0;
 8003fa4:	4a31      	ldr	r2, [pc, #196]	; (800406c <MenuCheckingCapacity+0x2ac>)
				ChargeStatusForTimer = 0;
 8003fa6:	f88a 3000 	strb.w	r3, [sl]
				DisChargeStatusForTimer = 0;
 8003faa:	7013      	strb	r3, [r2, #0]
				if (BatteryCapacityCharge/3600 > 100)
 8003fac:	682a      	ldr	r2, [r5, #0]
 8003fae:	4b35      	ldr	r3, [pc, #212]	; (8004084 <MenuCheckingCapacity+0x2c4>)
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d904      	bls.n	8003fbe <MenuCheckingCapacity+0x1fe>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003fb4:	6828      	ldr	r0, [r5, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	6831      	ldr	r1, [r6, #0]
 8003fba:	f7fd ffff 	bl	8001fbc <MenuTraining_WriteInLOG>
				CountShow = 2;
 8003fbe:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003fc0:	7823      	ldrb	r3, [r4, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	7023      	strb	r3, [r4, #0]
				CountShow = 2;
 8003fc6:	4b32      	ldr	r3, [pc, #200]	; (8004090 <MenuCheckingCapacity+0x2d0>)
 8003fc8:	701a      	strb	r2, [r3, #0]
			if (key == KEY_NEXT)
 8003fca:	4c31      	ldr	r4, [pc, #196]	; (8004090 <MenuCheckingCapacity+0x2d0>)
 8003fcc:	f1bb 0f02 	cmp.w	fp, #2
 8003fd0:	f994 3000 	ldrsb.w	r3, [r4]
 8003fd4:	f040 80ad 	bne.w	8004132 <MenuCheckingCapacity+0x372>
				CountShow++;
 8003fd8:	3301      	adds	r3, #1
 8003fda:	b25b      	sxtb	r3, r3
				if (CountShow==MAX_SCREENS__MENU_CAPACITY) CountShow=0;
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	f040 80b0 	bne.w	8004142 <MenuCheckingCapacity+0x382>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	7023      	strb	r3, [r4, #0]
				lcd_set_xy(0,0);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4608      	mov	r0, r1
 8003fea:	f7fd fdbd 	bl	8001b68 <lcd_set_xy>
				PrintToLCD(itoa_koma(U_OUT,2));
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	8818      	ldrh	r0, [r3, #0]
 8003ff4:	b280      	uxth	r0, r0
 8003ff6:	f7fd fa25 	bl	8001444 <itoa_koma>
 8003ffa:	f7fd fe35 	bl	8001c68 <PrintToLCD>
				PrintToLCD("V ");
 8003ffe:	4825      	ldr	r0, [pc, #148]	; (8004094 <MenuCheckingCapacity+0x2d4>)
 8004000:	f7fd fe32 	bl	8001c68 <PrintToLCD>
				PrintToLCD(itoa(Current));
 8004004:	9b02      	ldr	r3, [sp, #8]
 8004006:	8818      	ldrh	r0, [r3, #0]
 8004008:	b200      	sxth	r0, r0
 800400a:	f7fd f9a3 	bl	8001354 <itoa>
 800400e:	f7fd fe2b 	bl	8001c68 <PrintToLCD>
				PrintToLCD("mA     ");
 8004012:	4821      	ldr	r0, [pc, #132]	; (8004098 <MenuCheckingCapacity+0x2d8>)
 8004014:	f7fd fe28 	bl	8001c68 <PrintToLCD>
				lcd_set_xy(6,1);
 8004018:	2101      	movs	r1, #1
 800401a:	2006      	movs	r0, #6
 800401c:	f7fd fda4 	bl	8001b68 <lcd_set_xy>
				LcdOutbyNumber(4,1);
 8004020:	2101      	movs	r1, #1
 8004022:	2004      	movs	r0, #4
 8004024:	f7fd fdc8 	bl	8001bb8 <LcdOutbyNumber>
				if (Status_Out ==1)
 8004028:	4b1c      	ldr	r3, [pc, #112]	; (800409c <MenuCheckingCapacity+0x2dc>)
 800402a:	f893 b000 	ldrb.w	fp, [r3]
 800402e:	f1bb 0f01 	cmp.w	fp, #1
 8004032:	f040 80ba 	bne.w	80041aa <MenuCheckingCapacity+0x3ea>
					lcd_set_xy(7,1);
 8004036:	4659      	mov	r1, fp
 8004038:	2007      	movs	r0, #7
 800403a:	f7fd fd95 	bl	8001b68 <lcd_set_xy>
					LcdOutbyNumber(0,1);//charge
 800403e:	4659      	mov	r1, fp
 8004040:	2000      	movs	r0, #0
					LcdOutbyNumber(2,1);//discharge
 8004042:	f7fd fdb9 	bl	8001bb8 <LcdOutbyNumber>
 8004046:	e082      	b.n	800414e <MenuCheckingCapacity+0x38e>
 8004048:	200007a0 	.word	0x200007a0
 800404c:	2000078c 	.word	0x2000078c
 8004050:	2000077c 	.word	0x2000077c
 8004054:	20000780 	.word	0x20000780
 8004058:	20000790 	.word	0x20000790
 800405c:	20000874 	.word	0x20000874
 8004060:	20000154 	.word	0x20000154
 8004064:	08006468 	.word	0x08006468
 8004068:	08006479 	.word	0x08006479
 800406c:	20000794 	.word	0x20000794
 8004070:	2000079c 	.word	0x2000079c
 8004074:	20000270 	.word	0x20000270
 8004078:	0800648a 	.word	0x0800648a
 800407c:	2000086e 	.word	0x2000086e
 8004080:	200007cc 	.word	0x200007cc
 8004084:	00058c4f 	.word	0x00058c4f
 8004088:	200000f4 	.word	0x200000f4
 800408c:	20000a18 	.word	0x20000a18
 8004090:	20000791 	.word	0x20000791
 8004094:	0800638a 	.word	0x0800638a
 8004098:	0800649b 	.word	0x0800649b
 800409c:	200007a9 	.word	0x200007a9
 80040a0:	2000085a 	.word	0x2000085a
 80040a4:	2000078b 	.word	0x2000078b
 80040a8:	20000798 	.word	0x20000798
	if (CheckingCapacityCounter<=3)
 80040ac:	f994 3000 	ldrsb.w	r3, [r4]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	f77f aee0 	ble.w	8003e76 <MenuCheckingCapacity+0xb6>
		if (key == KEY_NEXT)
 80040b6:	4cab      	ldr	r4, [pc, #684]	; (8004364 <MenuCheckingCapacity+0x5a4>)
 80040b8:	2802      	cmp	r0, #2
 80040ba:	f994 3000 	ldrsb.w	r3, [r4]
 80040be:	f040 80c6 	bne.w	800424e <MenuCheckingCapacity+0x48e>
			CountShow++;
 80040c2:	3301      	adds	r3, #1
 80040c4:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_CAPACITY1) CountShow=0;
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	f040 80c7 	bne.w	800425a <MenuCheckingCapacity+0x49a>
 80040cc:	2300      	movs	r3, #0
 80040ce:	7023      	strb	r3, [r4, #0]
			lcd_set_xy(0,0);
 80040d0:	2100      	movs	r1, #0
 80040d2:	4608      	mov	r0, r1
 80040d4:	f7fd fd48 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 80040d8:	4ba3      	ldr	r3, [pc, #652]	; (8004368 <MenuCheckingCapacity+0x5a8>)
 80040da:	2102      	movs	r1, #2
 80040dc:	8818      	ldrh	r0, [r3, #0]
 80040de:	b280      	uxth	r0, r0
 80040e0:	f7fd f9b0 	bl	8001444 <itoa_koma>
 80040e4:	f7fd fdc0 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 80040e8:	48a0      	ldr	r0, [pc, #640]	; (800436c <MenuCheckingCapacity+0x5ac>)
 80040ea:	f7fd fdbd 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80040ee:	4ba0      	ldr	r3, [pc, #640]	; (8004370 <MenuCheckingCapacity+0x5b0>)
 80040f0:	8818      	ldrh	r0, [r3, #0]
 80040f2:	b200      	sxth	r0, r0
 80040f4:	f7fd f92e 	bl	8001354 <itoa>
 80040f8:	f7fd fdb6 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mA     ");
 80040fc:	489d      	ldr	r0, [pc, #628]	; (8004374 <MenuCheckingCapacity+0x5b4>)
 80040fe:	f7fd fdb3 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(6,1);
 8004102:	2101      	movs	r1, #1
 8004104:	2006      	movs	r0, #6
 8004106:	f7fd fd2f 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 800410a:	2101      	movs	r1, #1
 800410c:	2004      	movs	r0, #4
 800410e:	f7fd fd53 	bl	8001bb8 <LcdOutbyNumber>
			if (Status_Out ==1)
 8004112:	4b99      	ldr	r3, [pc, #612]	; (8004378 <MenuCheckingCapacity+0x5b8>)
 8004114:	f893 8000 	ldrb.w	r8, [r3]
 8004118:	f1b8 0f01 	cmp.w	r8, #1
 800411c:	f040 811a 	bne.w	8004354 <MenuCheckingCapacity+0x594>
				lcd_set_xy(7,1);
 8004120:	4641      	mov	r1, r8
 8004122:	2007      	movs	r0, #7
 8004124:	f7fd fd20 	bl	8001b68 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8004128:	4641      	mov	r1, r8
 800412a:	2000      	movs	r0, #0
				LcdOutbyNumber(2,1);//discharge
 800412c:	f7fd fd44 	bl	8001bb8 <LcdOutbyNumber>
 8004130:	e099      	b.n	8004266 <MenuCheckingCapacity+0x4a6>
			if (key == KEY_BACK)
 8004132:	f1bb 0f01 	cmp.w	fp, #1
 8004136:	d105      	bne.n	8004144 <MenuCheckingCapacity+0x384>
				CountShow--;
 8004138:	3b01      	subs	r3, #1
 800413a:	b25b      	sxtb	r3, r3
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 800413c:	2b00      	cmp	r3, #0
 800413e:	f2c0 80b7 	blt.w	80042b0 <MenuCheckingCapacity+0x4f0>
				CountShow++;
 8004142:	7023      	strb	r3, [r4, #0]
			if(CountShow == 0)
 8004144:	f994 3000 	ldrsb.w	r3, [r4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f43f af4c 	beq.w	8003fe6 <MenuCheckingCapacity+0x226>
			if(CountShow == 1)
 800414e:	f994 b000 	ldrsb.w	fp, [r4]
 8004152:	f1bb 0f01 	cmp.w	fp, #1
 8004156:	f040 80ad 	bne.w	80042b4 <MenuCheckingCapacity+0x4f4>
				lcd_set_xy(0,0);
 800415a:	2100      	movs	r1, #0
 800415c:	4608      	mov	r0, r1
 800415e:	f7fd fd03 	bl	8001b68 <lcd_set_xy>
				PrintToLCD(itoa(SettingsData.ChargeTime));
 8004162:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004166:	f7fd f8f5 	bl	8001354 <itoa>
 800416a:	f7fd fd7d 	bl	8001c68 <PrintToLCD>
				PrintToLCD("h ");
 800416e:	4883      	ldr	r0, [pc, #524]	; (800437c <MenuCheckingCapacity+0x5bc>)
 8004170:	f7fd fd7a 	bl	8001c68 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8004174:	230a      	movs	r3, #10
 8004176:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800417a:	4659      	mov	r1, fp
 800417c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004180:	f7fd f960 	bl	8001444 <itoa_koma>
 8004184:	f7fd fd70 	bl	8001c68 <PrintToLCD>
				PrintToLCD("V ");
 8004188:	4878      	ldr	r0, [pc, #480]	; (800436c <MenuCheckingCapacity+0x5ac>)
 800418a:	f7fd fd6d 	bl	8001c68 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800418e:	4659      	mov	r1, fp
 8004190:	f8d8 0020 	ldr.w	r0, [r8, #32]
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8004194:	230a      	movs	r3, #10
 8004196:	fbb0 f0f3 	udiv	r0, r0, r3
 800419a:	f7fd f953 	bl	8001444 <itoa_koma>
 800419e:	f7fd fd63 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V     ");
 80041a2:	4877      	ldr	r0, [pc, #476]	; (8004380 <MenuCheckingCapacity+0x5c0>)
 80041a4:	f7fd fd60 	bl	8001c68 <PrintToLCD>
 80041a8:	e084      	b.n	80042b4 <MenuCheckingCapacity+0x4f4>
					lcd_set_xy(7,1);
 80041aa:	2101      	movs	r1, #1
 80041ac:	2007      	movs	r0, #7
 80041ae:	f7fd fcdb 	bl	8001b68 <lcd_set_xy>
					LcdOutbyNumber(2,1);//discharge
 80041b2:	2101      	movs	r1, #1
 80041b4:	2002      	movs	r0, #2
 80041b6:	e744      	b.n	8004042 <MenuCheckingCapacity+0x282>
			if (TimerForReadyMeasurement_ms>1000)
 80041b8:	4b72      	ldr	r3, [pc, #456]	; (8004384 <MenuCheckingCapacity+0x5c4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c0:	d906      	bls.n	80041d0 <MenuCheckingCapacity+0x410>
				lcd_set_xy(0,0);
 80041c2:	2100      	movs	r1, #0
 80041c4:	4608      	mov	r0, r1
 80041c6:	f7fd fccf 	bl	8001b68 <lcd_set_xy>
				PrintToLCD("NO/BAD Battery  ");
 80041ca:	486f      	ldr	r0, [pc, #444]	; (8004388 <MenuCheckingCapacity+0x5c8>)
 80041cc:	f7fd fd4c 	bl	8001c68 <PrintToLCD>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80041d0:	486e      	ldr	r0, [pc, #440]	; (800438c <MenuCheckingCapacity+0x5cc>)
 80041d2:	f001 f9e7 	bl	80055a4 <printToBufferWithoutEndUART1>
 80041d6:	9b01      	ldr	r3, [sp, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	7819      	ldrb	r1, [r3, #0]
 80041dc:	486c      	ldr	r0, [pc, #432]	; (8004390 <MenuCheckingCapacity+0x5d0>)
 80041de:	f001 fa1f 	bl	8005620 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 80041e2:	486a      	ldr	r0, [pc, #424]	; (800438c <MenuCheckingCapacity+0x5cc>)
 80041e4:	f001 f9de 	bl	80055a4 <printToBufferWithoutEndUART1>
 80041e8:	f89a 1000 	ldrb.w	r1, [sl]
 80041ec:	2200      	movs	r2, #0
 80041ee:	4869      	ldr	r0, [pc, #420]	; (8004394 <MenuCheckingCapacity+0x5d4>)
 80041f0:	f001 fa16 	bl	8005620 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80041f4:	4865      	ldr	r0, [pc, #404]	; (800438c <MenuCheckingCapacity+0x5cc>)
 80041f6:	f001 f9d5 	bl	80055a4 <printToBufferWithoutEndUART1>
 80041fa:	6831      	ldr	r1, [r6, #0]
 80041fc:	2200      	movs	r2, #0
 80041fe:	4866      	ldr	r0, [pc, #408]	; (8004398 <MenuCheckingCapacity+0x5d8>)
 8004200:	f001 fa0e 	bl	8005620 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8004204:	4861      	ldr	r0, [pc, #388]	; (800438c <MenuCheckingCapacity+0x5cc>)
 8004206:	f001 f9cd 	bl	80055a4 <printToBufferWithoutEndUART1>
 800420a:	6829      	ldr	r1, [r5, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	4863      	ldr	r0, [pc, #396]	; (800439c <MenuCheckingCapacity+0x5dc>)
 8004210:	f001 fa06 	bl	8005620 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8004214:	485d      	ldr	r0, [pc, #372]	; (800438c <MenuCheckingCapacity+0x5cc>)
 8004216:	f001 f9c5 	bl	80055a4 <printToBufferWithoutEndUART1>
 800421a:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <MenuCheckingCapacity+0x5e0>)
 800421c:	2200      	movs	r2, #0
 800421e:	7819      	ldrb	r1, [r3, #0]
 8004220:	4860      	ldr	r0, [pc, #384]	; (80043a4 <MenuCheckingCapacity+0x5e4>)
 8004222:	f001 f9fd 	bl	8005620 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8004226:	4859      	ldr	r0, [pc, #356]	; (800438c <MenuCheckingCapacity+0x5cc>)
 8004228:	f001 f9bc 	bl	80055a4 <printToBufferWithoutEndUART1>
 800422c:	f8d9 1000 	ldr.w	r1, [r9]
 8004230:	2200      	movs	r2, #0
 8004232:	485d      	ldr	r0, [pc, #372]	; (80043a8 <MenuCheckingCapacity+0x5e8>)
 8004234:	f001 f9f4 	bl	8005620 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8004238:	4854      	ldr	r0, [pc, #336]	; (800438c <MenuCheckingCapacity+0x5cc>)
 800423a:	f001 f9b3 	bl	80055a4 <printToBufferWithoutEndUART1>
 800423e:	2200      	movs	r2, #0
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	485a      	ldr	r0, [pc, #360]	; (80043ac <MenuCheckingCapacity+0x5ec>)
}
 8004244:	b005      	add	sp, #20
 8004246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 800424a:	f001 b9e9 	b.w	8005620 <printToBufferUART1D>
		if (key == KEY_BACK)
 800424e:	2801      	cmp	r0, #1
 8004250:	d104      	bne.n	800425c <MenuCheckingCapacity+0x49c>
			CountShow--;
 8004252:	3b01      	subs	r3, #1
 8004254:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 8004256:	2b00      	cmp	r3, #0
 8004258:	db2a      	blt.n	80042b0 <MenuCheckingCapacity+0x4f0>
			CountShow++;
 800425a:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 800425c:	f994 3000 	ldrsb.w	r3, [r4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f43f af35 	beq.w	80040d0 <MenuCheckingCapacity+0x310>
		if(CountShow == 1)
 8004266:	f994 8000 	ldrsb.w	r8, [r4]
 800426a:	f1b8 0f01 	cmp.w	r8, #1
 800426e:	d121      	bne.n	80042b4 <MenuCheckingCapacity+0x4f4>
			lcd_set_xy(0,0);
 8004270:	2100      	movs	r1, #0
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8004272:	f8df b144 	ldr.w	fp, [pc, #324]	; 80043b8 <MenuCheckingCapacity+0x5f8>
			lcd_set_xy(0,0);
 8004276:	4608      	mov	r0, r1
 8004278:	f7fd fc76 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 800427c:	f8db 0010 	ldr.w	r0, [fp, #16]
 8004280:	f7fd f868 	bl	8001354 <itoa>
 8004284:	f7fd fcf0 	bl	8001c68 <PrintToLCD>
			PrintToLCD("h ");
 8004288:	483c      	ldr	r0, [pc, #240]	; (800437c <MenuCheckingCapacity+0x5bc>)
 800428a:	f7fd fced 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 800428e:	230a      	movs	r3, #10
 8004290:	f8db 0018 	ldr.w	r0, [fp, #24]
 8004294:	4641      	mov	r1, r8
 8004296:	fbb0 f0f3 	udiv	r0, r0, r3
 800429a:	f7fd f8d3 	bl	8001444 <itoa_koma>
 800429e:	f7fd fce3 	bl	8001c68 <PrintToLCD>
			PrintToLCD("V ");
 80042a2:	4832      	ldr	r0, [pc, #200]	; (800436c <MenuCheckingCapacity+0x5ac>)
 80042a4:	f7fd fce0 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80042a8:	4641      	mov	r1, r8
 80042aa:	f8db 0020 	ldr.w	r0, [fp, #32]
 80042ae:	e771      	b.n	8004194 <MenuCheckingCapacity+0x3d4>
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 80042b0:	2303      	movs	r3, #3
 80042b2:	7023      	strb	r3, [r4, #0]
		if(CountShow == 2)
 80042b4:	f994 8000 	ldrsb.w	r8, [r4]
 80042b8:	f1b8 0f02 	cmp.w	r8, #2
 80042bc:	d122      	bne.n	8004304 <MenuCheckingCapacity+0x544>
			lcd_set_xy(0,0);
 80042be:	2100      	movs	r1, #0
 80042c0:	4608      	mov	r0, r1
 80042c2:	f7fd fc51 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 80042c6:	2101      	movs	r1, #1
 80042c8:	4640      	mov	r0, r8
 80042ca:	f7fd fc75 	bl	8001bb8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80042ce:	2100      	movs	r1, #0
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7fd fc49 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(" ");
 80042d6:	4836      	ldr	r0, [pc, #216]	; (80043b0 <MenuCheckingCapacity+0x5f0>)
 80042d8:	f7fd fcc6 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 80042dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80042e0:	6838      	ldr	r0, [r7, #0]
 80042e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80042e6:	f7fd f835 	bl	8001354 <itoa>
 80042ea:	f7fd fcbd 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mAH      ");
 80042ee:	4831      	ldr	r0, [pc, #196]	; (80043b4 <MenuCheckingCapacity+0x5f4>)
 80042f0:	f7fd fcba 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(3,1);
 80042f4:	2003      	movs	r0, #3
 80042f6:	2101      	movs	r1, #1
 80042f8:	f7fd fc36 	bl	8001b68 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80042fc:	f8d9 0000 	ldr.w	r0, [r9]
 8004300:	f7fe f9c4 	bl	800268c <ClockOnLCD_noSec>
		if(CountShow == 3)
 8004304:	f994 4000 	ldrsb.w	r4, [r4]
 8004308:	2c03      	cmp	r4, #3
 800430a:	f47f af61 	bne.w	80041d0 <MenuCheckingCapacity+0x410>
			lcd_set_xy(0,0);
 800430e:	2100      	movs	r1, #0
 8004310:	4608      	mov	r0, r1
 8004312:	f7fd fc29 	bl	8001b68 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 8004316:	2101      	movs	r1, #1
 8004318:	2000      	movs	r0, #0
 800431a:	f7fd fc4d 	bl	8001bb8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800431e:	2100      	movs	r1, #0
 8004320:	2001      	movs	r0, #1
 8004322:	f7fd fc21 	bl	8001b68 <lcd_set_xy>
			PrintToLCD(" ");
 8004326:	4822      	ldr	r0, [pc, #136]	; (80043b0 <MenuCheckingCapacity+0x5f0>)
 8004328:	f7fd fc9e 	bl	8001c68 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 800432c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004330:	6828      	ldr	r0, [r5, #0]
 8004332:	fbb0 f0f3 	udiv	r0, r0, r3
 8004336:	f7fd f80d 	bl	8001354 <itoa>
 800433a:	f7fd fc95 	bl	8001c68 <PrintToLCD>
			PrintToLCD("mAH      ");
 800433e:	481d      	ldr	r0, [pc, #116]	; (80043b4 <MenuCheckingCapacity+0x5f4>)
 8004340:	f7fd fc92 	bl	8001c68 <PrintToLCD>
			lcd_set_xy(3,1);
 8004344:	4620      	mov	r0, r4
 8004346:	2101      	movs	r1, #1
 8004348:	f7fd fc0e 	bl	8001b68 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 800434c:	6830      	ldr	r0, [r6, #0]
 800434e:	f7fe f99d 	bl	800268c <ClockOnLCD_noSec>
 8004352:	e73d      	b.n	80041d0 <MenuCheckingCapacity+0x410>
				lcd_set_xy(7,1);
 8004354:	2101      	movs	r1, #1
 8004356:	2007      	movs	r0, #7
 8004358:	f7fd fc06 	bl	8001b68 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 800435c:	2101      	movs	r1, #1
 800435e:	2002      	movs	r0, #2
 8004360:	e6e4      	b.n	800412c <MenuCheckingCapacity+0x36c>
 8004362:	bf00      	nop
 8004364:	20000791 	.word	0x20000791
 8004368:	2000086e 	.word	0x2000086e
 800436c:	0800638a 	.word	0x0800638a
 8004370:	2000085a 	.word	0x2000085a
 8004374:	0800649b 	.word	0x0800649b
 8004378:	200007a9 	.word	0x200007a9
 800437c:	08005dfd 	.word	0x08005dfd
 8004380:	0800626f 	.word	0x0800626f
 8004384:	200007cc 	.word	0x200007cc
 8004388:	080064b9 	.word	0x080064b9
 800438c:	08005c58 	.word	0x08005c58
 8004390:	080064ca 	.word	0x080064ca
 8004394:	080064df 	.word	0x080064df
 8004398:	080064f4 	.word	0x080064f4
 800439c:	08006504 	.word	0x08006504
 80043a0:	20000794 	.word	0x20000794
 80043a4:	0800651c 	.word	0x0800651c
 80043a8:	08006534 	.word	0x08006534
 80043ac:	08006547 	.word	0x08006547
 80043b0:	08006424 	.word	0x08006424
 80043b4:	080064a3 	.word	0x080064a3
 80043b8:	20000154 	.word	0x20000154

080043bc <All_OUT_OFF_When_Power_OFF>:
{
 80043bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ( (U_IN < VOLTAGE_OFF_SYSTEM) && (time_sec>6))
 80043be:	4d34      	ldr	r5, [pc, #208]	; (8004490 <All_OUT_OFF_When_Power_OFF+0xd4>)
 80043c0:	4934      	ldr	r1, [pc, #208]	; (8004494 <All_OUT_OFF_When_Power_OFF+0xd8>)
 80043c2:	882b      	ldrh	r3, [r5, #0]
{
 80043c4:	b091      	sub	sp, #68	; 0x44
	if ( (U_IN < VOLTAGE_OFF_SYSTEM) && (time_sec>6))
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80043cc:	d25d      	bcs.n	800448a <All_OUT_OFF_When_Power_OFF+0xce>
 80043ce:	4b32      	ldr	r3, [pc, #200]	; (8004498 <All_OUT_OFF_When_Power_OFF+0xdc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d959      	bls.n	800448a <All_OUT_OFF_When_Power_OFF+0xce>
		if ((GPIOB->IDR & 0x01)==1)//if Out on
 80043d6:	4b31      	ldr	r3, [pc, #196]	; (800449c <All_OUT_OFF_When_Power_OFF+0xe0>)
 80043d8:	4c31      	ldr	r4, [pc, #196]	; (80044a0 <All_OUT_OFF_When_Power_OFF+0xe4>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	61a3      	str	r3, [r4, #24]
		OFF();
 80043e2:	f7ff f857 	bl	8003494 <OFF>
		if (EEpromWrite_status == 0)
 80043e6:	780b      	ldrb	r3, [r1, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d14c      	bne.n	8004486 <All_OUT_OFF_When_Power_OFF+0xca>
			EEpromWrite_status = 1;
 80043ec:	2301      	movs	r3, #1
			SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent;
 80043ee:	4e2d      	ldr	r6, [pc, #180]	; (80044a4 <All_OUT_OFF_When_Power_OFF+0xe8>)
			EEpromWrite_status = 1;
 80043f0:	700b      	strb	r3, [r1, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent;
 80043f2:	6833      	ldr	r3, [r6, #0]
 80043f4:	6123      	str	r3, [r4, #16]
			DataWhenPowerOffWriteToFlash_CRC();
 80043f6:	f7fc fb71 	bl	8000adc <DataWhenPowerOffWriteToFlash_CRC>
			logDebugD("dc: ",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent,2);
 80043fa:	482b      	ldr	r0, [pc, #172]	; (80044a8 <All_OUT_OFF_When_Power_OFF+0xec>)
 80043fc:	f001 f8d2 	bl	80055a4 <printToBufferWithoutEndUART1>
 8004400:	2202      	movs	r2, #2
 8004402:	6921      	ldr	r1, [r4, #16]
 8004404:	4829      	ldr	r0, [pc, #164]	; (80044ac <All_OUT_OFF_When_Power_OFF+0xf0>)
 8004406:	f001 f90b 	bl	8005620 <printToBufferUART1D>
			if (BatteryCapacityDischargeCurrent/3600>10)
 800440a:	f649 23af 	movw	r3, #39599	; 0x9aaf
 800440e:	6832      	ldr	r2, [r6, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d915      	bls.n	8004440 <All_OUT_OFF_When_Power_OFF+0x84>
				ClockStringNoSec(DischargeTimeSec,s_clock);
 8004414:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <All_OUT_OFF_When_Power_OFF+0xf4>)
 8004416:	a90b      	add	r1, sp, #44	; 0x2c
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	f7fd f99d 	bl	8001758 <ClockStringNoSec>
				Merge3Strings(itoaP(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 800441e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004422:	6920      	ldr	r0, [r4, #16]
 8004424:	a901      	add	r1, sp, #4
 8004426:	fbb0 f0f3 	udiv	r0, r0, r3
 800442a:	f7fc ffcf 	bl	80013cc <itoaP>
 800442e:	4921      	ldr	r1, [pc, #132]	; (80044b4 <All_OUT_OFF_When_Power_OFF+0xf8>)
 8004430:	ab06      	add	r3, sp, #24
 8004432:	aa0b      	add	r2, sp, #44	; 0x2c
 8004434:	f7fd f8fa 	bl	800162c <Merge3Strings>
				WriteInLOGc(strout,DISCHARGE_l);
 8004438:	2102      	movs	r1, #2
 800443a:	a806      	add	r0, sp, #24
 800443c:	f7fc fd6e 	bl	8000f1c <WriteInLOGc>
			WriteInLOG(Merge2Strings("PowerOFF ",itoa_komaP(U_IN/10,str,1),strout));
 8004440:	200a      	movs	r0, #10
 8004442:	882b      	ldrh	r3, [r5, #0]
 8004444:	2201      	movs	r2, #1
 8004446:	b29b      	uxth	r3, r3
 8004448:	fbb3 f0f0 	udiv	r0, r3, r0
 800444c:	a901      	add	r1, sp, #4
 800444e:	f7fd f861 	bl	8001514 <itoa_komaP>
 8004452:	aa06      	add	r2, sp, #24
 8004454:	4601      	mov	r1, r0
 8004456:	4818      	ldr	r0, [pc, #96]	; (80044b8 <All_OUT_OFF_When_Power_OFF+0xfc>)
 8004458:	f7fd f8d2 	bl	8001600 <Merge2Strings>
 800445c:	f7fc fc98 	bl	8000d90 <WriteInLOG>
 8004460:	2405      	movs	r4, #5
				logDebugD("U off(10msec): ",U_IN,2);
 8004462:	4f11      	ldr	r7, [pc, #68]	; (80044a8 <All_OUT_OFF_When_Power_OFF+0xec>)
 8004464:	4e15      	ldr	r6, [pc, #84]	; (80044bc <All_OUT_OFF_When_Power_OFF+0x100>)
 8004466:	4638      	mov	r0, r7
 8004468:	f001 f89c 	bl	80055a4 <printToBufferWithoutEndUART1>
 800446c:	8829      	ldrh	r1, [r5, #0]
 800446e:	2202      	movs	r2, #2
 8004470:	4630      	mov	r0, r6
 8004472:	b289      	uxth	r1, r1
 8004474:	f001 f8d4 	bl	8005620 <printToBufferUART1D>
				delay_ms(10);
 8004478:	3c01      	subs	r4, #1
 800447a:	200a      	movs	r0, #10
 800447c:	f7fc fe4e 	bl	800111c <delay_ms>
			for (i = 0; i<5; i++)
 8004480:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004484:	d1ef      	bne.n	8004466 <All_OUT_OFF_When_Power_OFF+0xaa>
}
 8004486:	b011      	add	sp, #68	; 0x44
 8004488:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EEpromWrite_status = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	700b      	strb	r3, [r1, #0]
}
 800448e:	e7fa      	b.n	8004486 <All_OUT_OFF_When_Power_OFF+0xca>
 8004490:	20000858 	.word	0x20000858
 8004494:	20000271 	.word	0x20000271
 8004498:	200007e8 	.word	0x200007e8
 800449c:	40010c00 	.word	0x40010c00
 80044a0:	200000f4 	.word	0x200000f4
 80044a4:	20000780 	.word	0x20000780
 80044a8:	08005c58 	.word	0x08005c58
 80044ac:	080065ab 	.word	0x080065ab
 80044b0:	20000798 	.word	0x20000798
 80044b4:	08006276 	.word	0x08006276
 80044b8:	080065b0 	.word	0x080065b0
 80044bc:	080065ba 	.word	0x080065ba

080044c0 <MenuDIAGNOSTIC>:
	EnterInMenu_Status=1;
 80044c0:	2201      	movs	r2, #1
{
 80044c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status=1;
 80044c6:	4ba9      	ldr	r3, [pc, #676]	; (800476c <MenuDIAGNOSTIC+0x2ac>)
 80044c8:	4ca9      	ldr	r4, [pc, #676]	; (8004770 <MenuDIAGNOSTIC+0x2b0>)
	if (key == KEY_NEXT)
 80044ca:	2802      	cmp	r0, #2
	EnterInMenu_Status=1;
 80044cc:	701a      	strb	r2, [r3, #0]
{
 80044ce:	b086      	sub	sp, #24
 80044d0:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 80044d4:	d128      	bne.n	8004528 <MenuDIAGNOSTIC+0x68>
		CountShow1++;
 80044d6:	4413      	add	r3, r2
 80044d8:	b25b      	sxtb	r3, r3
		if (CountShow1==MAXITEM) CountShow1=0;
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d12a      	bne.n	8004534 <MenuDIAGNOSTIC+0x74>
 80044de:	2300      	movs	r3, #0
 80044e0:	7023      	strb	r3, [r4, #0]
		OFF();
 80044e2:	f7fe ffd7 	bl	8003494 <OFF>
		lcd_set_xy(0,0);
 80044e6:	2100      	movs	r1, #0
 80044e8:	4608      	mov	r0, r1
 80044ea:	f7fd fb3d 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("Uin=");
 80044ee:	48a1      	ldr	r0, [pc, #644]	; (8004774 <MenuDIAGNOSTIC+0x2b4>)
 80044f0:	f7fd fbba 	bl	8001c68 <PrintToLCD>
		PrintToLCD(		itoa_koma(U_IN/10,1));
 80044f4:	200a      	movs	r0, #10
 80044f6:	4ba0      	ldr	r3, [pc, #640]	; (8004778 <MenuDIAGNOSTIC+0x2b8>)
 80044f8:	2101      	movs	r1, #1
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	fbb3 f0f0 	udiv	r0, r3, r0
 8004502:	f7fc ff9f 	bl	8001444 <itoa_koma>
 8004506:	f7fd fbaf 	bl	8001c68 <PrintToLCD>
		PrintToLCD(" Uc=");
 800450a:	489c      	ldr	r0, [pc, #624]	; (800477c <MenuDIAGNOSTIC+0x2bc>)
 800450c:	f7fd fbac 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa_koma(U_Controller,2));
 8004510:	4b9b      	ldr	r3, [pc, #620]	; (8004780 <MenuDIAGNOSTIC+0x2c0>)
 8004512:	2102      	movs	r1, #2
 8004514:	8818      	ldrh	r0, [r3, #0]
 8004516:	b280      	uxth	r0, r0
 8004518:	f7fc ff94 	bl	8001444 <itoa_koma>
 800451c:	f7fd fba4 	bl	8001c68 <PrintToLCD>
		PrintToLCD("    ");
 8004520:	4898      	ldr	r0, [pc, #608]	; (8004784 <MenuDIAGNOSTIC+0x2c4>)
 8004522:	f7fd fba1 	bl	8001c68 <PrintToLCD>
 8004526:	e00a      	b.n	800453e <MenuDIAGNOSTIC+0x7e>
	if (key == KEY_BACK)
 8004528:	2801      	cmp	r0, #1
 800452a:	d104      	bne.n	8004536 <MenuDIAGNOSTIC+0x76>
		CountShow1--;
 800452c:	3b01      	subs	r3, #1
 800452e:	b25b      	sxtb	r3, r3
		if (CountShow1<0) CountShow1=MAXITEM-1;
 8004530:	2b00      	cmp	r3, #0
 8004532:	db27      	blt.n	8004584 <MenuDIAGNOSTIC+0xc4>
		CountShow1++;
 8004534:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 0)
 8004536:	f994 3000 	ldrsb.w	r3, [r4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0d1      	beq.n	80044e2 <MenuDIAGNOSTIC+0x22>
	if(CountShow1 == 1)
 800453e:	f994 3000 	ldrsb.w	r3, [r4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d120      	bne.n	8004588 <MenuDIAGNOSTIC+0xc8>
		OFF();
 8004546:	f7fe ffa5 	bl	8003494 <OFF>
		lcd_set_xy(0,0);
 800454a:	2100      	movs	r1, #0
 800454c:	4608      	mov	r0, r1
 800454e:	f7fd fb0b 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("Ups ");
 8004552:	488d      	ldr	r0, [pc, #564]	; (8004788 <MenuDIAGNOSTIC+0x2c8>)
 8004554:	f7fd fb88 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa_koma(U_PS,2));
 8004558:	4b8c      	ldr	r3, [pc, #560]	; (800478c <MenuDIAGNOSTIC+0x2cc>)
 800455a:	2102      	movs	r1, #2
 800455c:	8818      	ldrh	r0, [r3, #0]
 800455e:	b280      	uxth	r0, r0
 8004560:	f7fc ff70 	bl	8001444 <itoa_koma>
 8004564:	f7fd fb80 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V ");
 8004568:	4889      	ldr	r0, [pc, #548]	; (8004790 <MenuDIAGNOSTIC+0x2d0>)
 800456a:	f7fd fb7d 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[3])));
 800456e:	4b89      	ldr	r3, [pc, #548]	; (8004794 <MenuDIAGNOSTIC+0x2d4>)
 8004570:	88d8      	ldrh	r0, [r3, #6]
 8004572:	b280      	uxth	r0, r0
 8004574:	f7fc feee 	bl	8001354 <itoa>
 8004578:	f7fd fb76 	bl	8001c68 <PrintToLCD>
		PrintToLCD("      ");
 800457c:	4886      	ldr	r0, [pc, #536]	; (8004798 <MenuDIAGNOSTIC+0x2d8>)
 800457e:	f7fd fb73 	bl	8001c68 <PrintToLCD>
 8004582:	e001      	b.n	8004588 <MenuDIAGNOSTIC+0xc8>
		if (CountShow1<0) CountShow1=MAXITEM-1;
 8004584:	2307      	movs	r3, #7
 8004586:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 2)
 8004588:	f994 5000 	ldrsb.w	r5, [r4]
 800458c:	2d02      	cmp	r5, #2
 800458e:	d11d      	bne.n	80045cc <MenuDIAGNOSTIC+0x10c>
		OUT_ON();
 8004590:	f7fe f8c8 	bl	8002724 <OUT_ON>
		lcd_set_xy(0,0);
 8004594:	2100      	movs	r1, #0
 8004596:	4608      	mov	r0, r1
 8004598:	f7fd fae6 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("Uout ");
 800459c:	487f      	ldr	r0, [pc, #508]	; (800479c <MenuDIAGNOSTIC+0x2dc>)
 800459e:	f7fd fb63 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 80045a2:	4b7f      	ldr	r3, [pc, #508]	; (80047a0 <MenuDIAGNOSTIC+0x2e0>)
 80045a4:	4629      	mov	r1, r5
 80045a6:	8818      	ldrh	r0, [r3, #0]
 80045a8:	b280      	uxth	r0, r0
 80045aa:	f7fc ff4b 	bl	8001444 <itoa_koma>
 80045ae:	f7fd fb5b 	bl	8001c68 <PrintToLCD>
		PrintToLCD("V ");
 80045b2:	4877      	ldr	r0, [pc, #476]	; (8004790 <MenuDIAGNOSTIC+0x2d0>)
 80045b4:	f7fd fb58 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 80045b8:	4b76      	ldr	r3, [pc, #472]	; (8004794 <MenuDIAGNOSTIC+0x2d4>)
 80045ba:	8898      	ldrh	r0, [r3, #4]
 80045bc:	b280      	uxth	r0, r0
 80045be:	f7fc fec9 	bl	8001354 <itoa>
 80045c2:	f7fd fb51 	bl	8001c68 <PrintToLCD>
		PrintToLCD("      ");
 80045c6:	4874      	ldr	r0, [pc, #464]	; (8004798 <MenuDIAGNOSTIC+0x2d8>)
 80045c8:	f7fd fb4e 	bl	8001c68 <PrintToLCD>
	if(CountShow1 == 3)
 80045cc:	f994 3000 	ldrsb.w	r3, [r4]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d11e      	bne.n	8004612 <MenuDIAGNOSTIC+0x152>
		LOAD_OFF();
 80045d4:	f7fe fb00 	bl	8002bd8 <LOAD_OFF>
		OUT_ON();
 80045d8:	f7fe f8a4 	bl	8002724 <OUT_ON>
		lcd_set_xy(0,0);
 80045dc:	2100      	movs	r1, #0
 80045de:	4608      	mov	r0, r1
 80045e0:	f7fd fac2 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("Iout ");
 80045e4:	486f      	ldr	r0, [pc, #444]	; (80047a4 <MenuDIAGNOSTIC+0x2e4>)
 80045e6:	f7fd fb3f 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(Current));
 80045ea:	4b6f      	ldr	r3, [pc, #444]	; (80047a8 <MenuDIAGNOSTIC+0x2e8>)
 80045ec:	8818      	ldrh	r0, [r3, #0]
 80045ee:	b200      	sxth	r0, r0
 80045f0:	f7fc feb0 	bl	8001354 <itoa>
 80045f4:	f7fd fb38 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mA ");
 80045f8:	486c      	ldr	r0, [pc, #432]	; (80047ac <MenuDIAGNOSTIC+0x2ec>)
 80045fa:	f7fd fb35 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[1])));
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <MenuDIAGNOSTIC+0x2d4>)
 8004600:	8858      	ldrh	r0, [r3, #2]
 8004602:	b280      	uxth	r0, r0
 8004604:	f7fc fea6 	bl	8001354 <itoa>
 8004608:	f7fd fb2e 	bl	8001c68 <PrintToLCD>
		PrintToLCD("      ");
 800460c:	4862      	ldr	r0, [pc, #392]	; (8004798 <MenuDIAGNOSTIC+0x2d8>)
 800460e:	f7fd fb2b 	bl	8001c68 <PrintToLCD>
	if(CountShow1 == 4)
 8004612:	f994 3000 	ldrsb.w	r3, [r4]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d11e      	bne.n	8004658 <MenuDIAGNOSTIC+0x198>
		OUT_OFF();
 800461a:	f7fe f86d 	bl	80026f8 <OUT_OFF>
		LOAD_ON();
 800461e:	f7fe fa5f 	bl	8002ae0 <LOAD_ON>
		lcd_set_xy(0,0);
 8004622:	2100      	movs	r1, #0
 8004624:	4608      	mov	r0, r1
 8004626:	f7fd fa9f 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("I(l) ");
 800462a:	4861      	ldr	r0, [pc, #388]	; (80047b0 <MenuDIAGNOSTIC+0x2f0>)
 800462c:	f7fd fb1c 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(Current_load));
 8004630:	4b60      	ldr	r3, [pc, #384]	; (80047b4 <MenuDIAGNOSTIC+0x2f4>)
 8004632:	8818      	ldrh	r0, [r3, #0]
 8004634:	b200      	sxth	r0, r0
 8004636:	f7fc fe8d 	bl	8001354 <itoa>
 800463a:	f7fd fb15 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mA ");
 800463e:	485b      	ldr	r0, [pc, #364]	; (80047ac <MenuDIAGNOSTIC+0x2ec>)
 8004640:	f7fd fb12 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[0]));
 8004644:	4b53      	ldr	r3, [pc, #332]	; (8004794 <MenuDIAGNOSTIC+0x2d4>)
 8004646:	8818      	ldrh	r0, [r3, #0]
 8004648:	b280      	uxth	r0, r0
 800464a:	f7fc fe83 	bl	8001354 <itoa>
 800464e:	f7fd fb0b 	bl	8001c68 <PrintToLCD>
		PrintToLCD("       ");
 8004652:	4859      	ldr	r0, [pc, #356]	; (80047b8 <MenuDIAGNOSTIC+0x2f8>)
 8004654:	f7fd fb08 	bl	8001c68 <PrintToLCD>
	if(CountShow1 == 5)
 8004658:	f994 3000 	ldrsb.w	r3, [r4]
 800465c:	2b05      	cmp	r3, #5
 800465e:	d149      	bne.n	80046f4 <MenuDIAGNOSTIC+0x234>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004660:	4e4a      	ldr	r6, [pc, #296]	; (800478c <MenuDIAGNOSTIC+0x2cc>)
 8004662:	4f56      	ldr	r7, [pc, #344]	; (80047bc <MenuDIAGNOSTIC+0x2fc>)
		LOAD_OFF();
 8004664:	f7fe fab8 	bl	8002bd8 <LOAD_OFF>
		OUT_ON();
 8004668:	f7fe f85c 	bl	8002724 <OUT_ON>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 800466c:	8832      	ldrh	r2, [r6, #0]
 800466e:	883b      	ldrh	r3, [r7, #0]
 8004670:	b292      	uxth	r2, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	1ad2      	subs	r2, r2, r3
 8004676:	f242 7310 	movw	r3, #10000	; 0x2710
 800467a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80047a8 <MenuDIAGNOSTIC+0x2e8>
 800467e:	4353      	muls	r3, r2
 8004680:	f8b8 1000 	ldrh.w	r1, [r8]
 8004684:	4d4e      	ldr	r5, [pc, #312]	; (80047c0 <MenuDIAGNOSTIC+0x300>)
 8004686:	b209      	sxth	r1, r1
 8004688:	fb93 f3f1 	sdiv	r3, r3, r1
		lcd_set_xy(0,0);
 800468c:	2100      	movs	r1, #0
 800468e:	4608      	mov	r0, r1
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8004690:	64ab      	str	r3, [r5, #72]	; 0x48
		lcd_set_xy(0,0);
 8004692:	f7fd fa69 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("R=");
 8004696:	484b      	ldr	r0, [pc, #300]	; (80047c4 <MenuDIAGNOSTIC+0x304>)
 8004698:	f7fd fae6 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 800469c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800469e:	f7fc fe59 	bl	8001354 <itoa>
 80046a2:	f7fd fae1 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mOm ");
 80046a6:	4848      	ldr	r0, [pc, #288]	; (80047c8 <MenuDIAGNOSTIC+0x308>)
 80046a8:	f7fd fade 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_MOSFET));
 80046ac:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80046ae:	f7fc fe51 	bl	8001354 <itoa>
 80046b2:	f7fd fad9 	bl	8001c68 <PrintToLCD>
		PrintToLCD("mOm    ");
 80046b6:	4845      	ldr	r0, [pc, #276]	; (80047cc <MenuDIAGNOSTIC+0x30c>)
 80046b8:	f7fd fad6 	bl	8001c68 <PrintToLCD>
		logDebugD("I: ",Current,0);
 80046bc:	4844      	ldr	r0, [pc, #272]	; (80047d0 <MenuDIAGNOSTIC+0x310>)
 80046be:	f000 ff71 	bl	80055a4 <printToBufferWithoutEndUART1>
 80046c2:	f8b8 1000 	ldrh.w	r1, [r8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	b209      	sxth	r1, r1
 80046ca:	4842      	ldr	r0, [pc, #264]	; (80047d4 <MenuDIAGNOSTIC+0x314>)
 80046cc:	f000 ffa8 	bl	8005620 <printToBufferUART1D>
		logDebugD("U_PS: ",U_PS,2);
 80046d0:	483f      	ldr	r0, [pc, #252]	; (80047d0 <MenuDIAGNOSTIC+0x310>)
 80046d2:	f000 ff67 	bl	80055a4 <printToBufferWithoutEndUART1>
 80046d6:	8831      	ldrh	r1, [r6, #0]
 80046d8:	2202      	movs	r2, #2
 80046da:	b289      	uxth	r1, r1
 80046dc:	483e      	ldr	r0, [pc, #248]	; (80047d8 <MenuDIAGNOSTIC+0x318>)
 80046de:	f000 ff9f 	bl	8005620 <printToBufferUART1D>
		logDebugD("U out: ",U_OUT_ForSetResistance,2);
 80046e2:	483b      	ldr	r0, [pc, #236]	; (80047d0 <MenuDIAGNOSTIC+0x310>)
 80046e4:	f000 ff5e 	bl	80055a4 <printToBufferWithoutEndUART1>
 80046e8:	8839      	ldrh	r1, [r7, #0]
 80046ea:	2202      	movs	r2, #2
 80046ec:	483b      	ldr	r0, [pc, #236]	; (80047dc <MenuDIAGNOSTIC+0x31c>)
 80046ee:	b289      	uxth	r1, r1
 80046f0:	f000 ff96 	bl	8005620 <printToBufferUART1D>
	if(CountShow1 == 6)
 80046f4:	f994 3000 	ldrsb.w	r3, [r4]
 80046f8:	2b06      	cmp	r3, #6
 80046fa:	d10f      	bne.n	800471c <MenuDIAGNOSTIC+0x25c>
		OFF();
 80046fc:	f7fe feca 	bl	8003494 <OFF>
		lcd_set_xy(0,0);
 8004700:	2100      	movs	r1, #0
 8004702:	4608      	mov	r0, r1
 8004704:	f7fd fa30 	bl	8001b68 <lcd_set_xy>
		PrintToLCD(ClockStringWithSec(time_sec,s));
 8004708:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <MenuDIAGNOSTIC+0x320>)
 800470a:	a901      	add	r1, sp, #4
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	f7fc ffb0 	bl	8001672 <ClockStringWithSec>
 8004712:	f7fd faa9 	bl	8001c68 <PrintToLCD>
		PrintToLCD("        ");
 8004716:	4833      	ldr	r0, [pc, #204]	; (80047e4 <MenuDIAGNOSTIC+0x324>)
 8004718:	f7fd faa6 	bl	8001c68 <PrintToLCD>
	if(CountShow1 == 7)
 800471c:	f994 3000 	ldrsb.w	r3, [r4]
 8004720:	2b07      	cmp	r3, #7
 8004722:	d11f      	bne.n	8004764 <MenuDIAGNOSTIC+0x2a4>
		LOAD_OFF();
 8004724:	f7fe fa58 	bl	8002bd8 <LOAD_OFF>
		OUT_ON();
 8004728:	f7fd fffc 	bl	8002724 <OUT_ON>
		lcd_set_xy(0,0);
 800472c:	2100      	movs	r1, #0
 800472e:	4608      	mov	r0, r1
 8004730:	f7fd fa1a 	bl	8001b68 <lcd_set_xy>
		PrintToLCD("T=");
 8004734:	482c      	ldr	r0, [pc, #176]	; (80047e8 <MenuDIAGNOSTIC+0x328>)
 8004736:	f7fd fa97 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(GetTemperature(Rt)));
 800473a:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <MenuDIAGNOSTIC+0x32c>)
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	f7fc fb01 	bl	8000d44 <GetTemperature>
 8004742:	f7fc fe07 	bl	8001354 <itoa>
 8004746:	f7fd fa8f 	bl	8001c68 <PrintToLCD>
		PrintToLCD("C   ");
 800474a:	4829      	ldr	r0, [pc, #164]	; (80047f0 <MenuDIAGNOSTIC+0x330>)
 800474c:	f7fd fa8c 	bl	8001c68 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[5]));
 8004750:	4b10      	ldr	r3, [pc, #64]	; (8004794 <MenuDIAGNOSTIC+0x2d4>)
 8004752:	8958      	ldrh	r0, [r3, #10]
 8004754:	b280      	uxth	r0, r0
 8004756:	f7fc fdfd 	bl	8001354 <itoa>
 800475a:	f7fd fa85 	bl	8001c68 <PrintToLCD>
		PrintToLCD("    ");
 800475e:	4809      	ldr	r0, [pc, #36]	; (8004784 <MenuDIAGNOSTIC+0x2c4>)
 8004760:	f7fd fa82 	bl	8001c68 <PrintToLCD>
}
 8004764:	b006      	add	sp, #24
 8004766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800476a:	bf00      	nop
 800476c:	200007a0 	.word	0x200007a0
 8004770:	20000792 	.word	0x20000792
 8004774:	080065ca 	.word	0x080065ca
 8004778:	20000858 	.word	0x20000858
 800477c:	080065cf 	.word	0x080065cf
 8004780:	2000086c 	.word	0x2000086c
 8004784:	08006421 	.word	0x08006421
 8004788:	080065d4 	.word	0x080065d4
 800478c:	20000874 	.word	0x20000874
 8004790:	0800638a 	.word	0x0800638a
 8004794:	2000085c 	.word	0x2000085c
 8004798:	0800641f 	.word	0x0800641f
 800479c:	080065d9 	.word	0x080065d9
 80047a0:	2000086e 	.word	0x2000086e
 80047a4:	080065df 	.word	0x080065df
 80047a8:	2000085a 	.word	0x2000085a
 80047ac:	080065e5 	.word	0x080065e5
 80047b0:	080065e9 	.word	0x080065e9
 80047b4:	200002b4 	.word	0x200002b4
 80047b8:	0800641e 	.word	0x0800641e
 80047bc:	200002b6 	.word	0x200002b6
 80047c0:	20000004 	.word	0x20000004
 80047c4:	080065ef 	.word	0x080065ef
 80047c8:	080065f2 	.word	0x080065f2
 80047cc:	080065f7 	.word	0x080065f7
 80047d0:	08005c58 	.word	0x08005c58
 80047d4:	080065ff 	.word	0x080065ff
 80047d8:	08006603 	.word	0x08006603
 80047dc:	0800660a 	.word	0x0800660a
 80047e0:	200007e8 	.word	0x200007e8
 80047e4:	0800641d 	.word	0x0800641d
 80047e8:	08006612 	.word	0x08006612
 80047ec:	20000870 	.word	0x20000870
 80047f0:	08006615 	.word	0x08006615

080047f4 <adc_func>:
	//3 U PS
	//4 U In
	//5 T
	//6 temp
	//7 vref
	volatile int32_t Ut = 0;
 80047f4:	2300      	movs	r3, #0
{
 80047f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile int32_t It_m = 0;
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 80047f8:	4c7a      	ldr	r4, [pc, #488]	; (80049e4 <adc_func+0x1f0>)
{
 80047fa:	b085      	sub	sp, #20
	volatile int32_t Ut = 0;
 80047fc:	9300      	str	r3, [sp, #0]
	volatile int32_t It = 0;
 80047fe:	9301      	str	r3, [sp, #4]
	volatile int32_t Ut_m = 0;
 8004800:	9302      	str	r3, [sp, #8]
	volatile int32_t It_m = 0;
 8004802:	9303      	str	r3, [sp, #12]
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004804:	89e3      	ldrh	r3, [r4, #14]
	Ut= (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 8004806:	4d78      	ldr	r5, [pc, #480]	; (80049e8 <adc_func+0x1f4>)
	U_Controller = 491520 / RegularConvData[7];// Uref V/10;  1200 * 4096/ChVref
 8004808:	b29a      	uxth	r2, r3
 800480a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 800480e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004812:	4a76      	ldr	r2, [pc, #472]	; (80049ec <adc_func+0x1f8>)
 8004814:	b29b      	uxth	r3, r3
 8004816:	8013      	strh	r3, [r2, #0]
	Ut= (RegularConvData[3] * CalibrationData.CalibrationValueForVoltage) / RegularConvData[7];
 8004818:	88e3      	ldrh	r3, [r4, #6]
 800481a:	89e2      	ldrh	r2, [r4, #14]
 800481c:	b299      	uxth	r1, r3
 800481e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004820:	b292      	uxth	r2, r2
 8004822:	434b      	muls	r3, r1
 8004824:	fbb3 f3f2 	udiv	r3, r3, r2
 8004828:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax1(Ut);
 800482a:	9800      	ldr	r0, [sp, #0]
 800482c:	f7fd f818 	bl	8001860 <middle_of_3Umax1>
 8004830:	9002      	str	r0, [sp, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 8004832:	9802      	ldr	r0, [sp, #8]
 8004834:	f7fd f86a 	bl	800190c <RunningAverageU1>
 8004838:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <adc_func+0x1fc>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4410      	add	r0, r2
	SumU1Counter ++;
 800483e:	4a6d      	ldr	r2, [pc, #436]	; (80049f4 <adc_func+0x200>)
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 8004840:	6018      	str	r0, [r3, #0]
	SumU1Counter ++;
 8004842:	8811      	ldrh	r1, [r2, #0]
 8004844:	3101      	adds	r1, #1
 8004846:	b209      	sxth	r1, r1
 8004848:	8011      	strh	r1, [r2, #0]
	if (SumU1Counter >= NUM_READ)
 800484a:	8811      	ldrh	r1, [r2, #0]
 800484c:	b209      	sxth	r1, r1
 800484e:	291f      	cmp	r1, #31
 8004850:	dd0f      	ble.n	8004872 <adc_func+0x7e>
	{
		U_PS = SumU1/NUM_READ;
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	4868      	ldr	r0, [pc, #416]	; (80049f8 <adc_func+0x204>)
 8004856:	2900      	cmp	r1, #0
 8004858:	bfb8      	it	lt
 800485a:	311f      	addlt	r1, #31
 800485c:	f3c1 114f 	ubfx	r1, r1, #5, #16
 8004860:	8001      	strh	r1, [r0, #0]
		SumU1Counter = 0;
 8004862:	2100      	movs	r1, #0
 8004864:	8011      	strh	r1, [r2, #0]
		SumU1 = 0;
 8004866:	6019      	str	r1, [r3, #0]
		if (U_PS < 3) U_PS = 0;
 8004868:	8803      	ldrh	r3, [r0, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	bf98      	it	ls
 8004870:	8001      	strhls	r1, [r0, #0]
	}

	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForVoltage1) / RegularConvData[7];
 8004872:	88a3      	ldrh	r3, [r4, #4]
 8004874:	89e2      	ldrh	r2, [r4, #14]
 8004876:	b299      	uxth	r1, r3
 8004878:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800487a:	b292      	uxth	r2, r2
 800487c:	434b      	muls	r3, r1
 800487e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004882:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax2(Ut);
 8004884:	9800      	ldr	r0, [sp, #0]
 8004886:	f7fd f807 	bl	8001898 <middle_of_3Umax2>
 800488a:	9002      	str	r0, [sp, #8]
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 800488c:	9802      	ldr	r0, [sp, #8]
 800488e:	f7fd f83e 	bl	800190e <RunningAverageU2>
 8004892:	4f5a      	ldr	r7, [pc, #360]	; (80049fc <adc_func+0x208>)
	SumU2Counter ++;
 8004894:	4e5a      	ldr	r6, [pc, #360]	; (8004a00 <adc_func+0x20c>)
	SumU2 = SumU2 + RunningAverageU2(Ut_m);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	4418      	add	r0, r3
 800489a:	6038      	str	r0, [r7, #0]
	SumU2Counter ++;
 800489c:	8833      	ldrh	r3, [r6, #0]
 800489e:	3301      	adds	r3, #1
 80048a0:	b21b      	sxth	r3, r3
 80048a2:	8033      	strh	r3, [r6, #0]


	Ut = (RegularConvData[4] * CalibrationData.CalibrationValueForVoltage2) / RegularConvData[7];
 80048a4:	8923      	ldrh	r3, [r4, #8]
 80048a6:	89e2      	ldrh	r2, [r4, #14]
 80048a8:	b299      	uxth	r1, r3
 80048aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80048ac:	b292      	uxth	r2, r2
 80048ae:	434b      	muls	r3, r1
 80048b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b4:	9300      	str	r3, [sp, #0]
	U_IN = middle_of_3Umax3(Ut);
 80048b6:	9800      	ldr	r0, [sp, #0]
 80048b8:	f7fd f80a 	bl	80018d0 <middle_of_3Umax3>
 80048bc:	4b51      	ldr	r3, [pc, #324]	; (8004a04 <adc_func+0x210>)
 80048be:	b280      	uxth	r0, r0
 80048c0:	8018      	strh	r0, [r3, #0]


	It = (RegularConvData[1] * CalibrationData.CalibrationValueForCurrent*10) / RegularConvData[7] ;//  Current A/10
 80048c2:	8861      	ldrh	r1, [r4, #2]
 80048c4:	89e3      	ldrh	r3, [r4, #14]
 80048c6:	b289      	uxth	r1, r1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	69ab      	ldr	r3, [r5, #24]
 80048cc:	4359      	muls	r1, r3
 80048ce:	230a      	movs	r3, #10
 80048d0:	434b      	muls	r3, r1
 80048d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d6:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax1(It);
 80048d8:	9801      	ldr	r0, [sp, #4]
 80048da:	f7fc ff89 	bl	80017f0 <middle_of_3Imax1>
 80048de:	9003      	str	r0, [sp, #12]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 80048e0:	9803      	ldr	r0, [sp, #12]
 80048e2:	f7fd f811 	bl	8001908 <RunningAverageI1>
 80048e6:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <adc_func+0x214>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4410      	add	r0, r2
	SumI1Counter ++;
 80048ec:	4a47      	ldr	r2, [pc, #284]	; (8004a0c <adc_func+0x218>)
	SumI1 =SumI1 + RunningAverageI1(It_m);
 80048ee:	6018      	str	r0, [r3, #0]
	SumI1Counter ++;
 80048f0:	8811      	ldrh	r1, [r2, #0]
 80048f2:	3101      	adds	r1, #1
 80048f4:	b209      	sxth	r1, r1
 80048f6:	8011      	strh	r1, [r2, #0]
	if (SumI1Counter >= NUM_READ)
 80048f8:	8811      	ldrh	r1, [r2, #0]
 80048fa:	b209      	sxth	r1, r1
 80048fc:	291f      	cmp	r1, #31
 80048fe:	dd0a      	ble.n	8004916 <adc_func+0x122>
	{
		Current_Out = SumI1/NUM_READ;
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	4843      	ldr	r0, [pc, #268]	; (8004a10 <adc_func+0x21c>)
 8004904:	2900      	cmp	r1, #0
 8004906:	bfb8      	it	lt
 8004908:	311f      	addlt	r1, #31
 800490a:	f341 114f 	sbfx	r1, r1, #5, #16
 800490e:	8001      	strh	r1, [r0, #0]
		SumI1Counter = 0;
 8004910:	2100      	movs	r1, #0
 8004912:	8011      	strh	r1, [r2, #0]
		SumI1 = 0;
 8004914:	6019      	str	r1, [r3, #0]
	}

	It= (RegularConvData[0] * CalibrationData.CalibrationValueForCurrent1*10) / RegularConvData[7] ;//  Current A/10
 8004916:	8821      	ldrh	r1, [r4, #0]
 8004918:	89e3      	ldrh	r3, [r4, #14]
 800491a:	b289      	uxth	r1, r1
 800491c:	b29a      	uxth	r2, r3
 800491e:	6a2b      	ldr	r3, [r5, #32]
 8004920:	4359      	muls	r1, r3
 8004922:	230a      	movs	r3, #10
 8004924:	434b      	muls	r3, r1
 8004926:	fbb3 f3f2 	udiv	r3, r3, r2
 800492a:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax2(It);
 800492c:	9801      	ldr	r0, [sp, #4]
 800492e:	f7fc ff7b 	bl	8001828 <middle_of_3Imax2>
 8004932:	9003      	str	r0, [sp, #12]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 8004934:	9803      	ldr	r0, [sp, #12]
 8004936:	f7fc ffe8 	bl	800190a <RunningAverageI2>
 800493a:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <adc_func+0x220>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4410      	add	r0, r2
	SumI2Counter ++;
 8004940:	4a35      	ldr	r2, [pc, #212]	; (8004a18 <adc_func+0x224>)
	SumI2 =SumI2 + RunningAverageI2(It_m);
 8004942:	6018      	str	r0, [r3, #0]
	SumI2Counter ++;
 8004944:	8811      	ldrh	r1, [r2, #0]
 8004946:	3101      	adds	r1, #1
 8004948:	b209      	sxth	r1, r1
 800494a:	8011      	strh	r1, [r2, #0]
	if (SumI2Counter >= NUM_READ)
 800494c:	8811      	ldrh	r1, [r2, #0]
 800494e:	b209      	sxth	r1, r1
 8004950:	291f      	cmp	r1, #31
 8004952:	dd0a      	ble.n	800496a <adc_func+0x176>
	{
		Current_load = SumI2/NUM_READ;
 8004954:	6819      	ldr	r1, [r3, #0]
 8004956:	4831      	ldr	r0, [pc, #196]	; (8004a1c <adc_func+0x228>)
 8004958:	2900      	cmp	r1, #0
 800495a:	bfb8      	it	lt
 800495c:	311f      	addlt	r1, #31
 800495e:	f341 114f 	sbfx	r1, r1, #5, #16
 8004962:	8001      	strh	r1, [r0, #0]
		SumI2Counter = 0;
 8004964:	2100      	movs	r1, #0
 8004966:	8011      	strh	r1, [r2, #0]
		SumI2 = 0;
 8004968:	6019      	str	r1, [r3, #0]
	}
	if ((GPIOB->IDR & 0x02)==0x02)//if load on
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <adc_func+0x22c>)
 800496c:	492d      	ldr	r1, [pc, #180]	; (8004a24 <adc_func+0x230>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f013 0f02 	tst.w	r3, #2
	{
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 8004974:	bf15      	itete	ne
 8004976:	4b29      	ldrne	r3, [pc, #164]	; (8004a1c <adc_func+0x228>)
	}else
	{
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 8004978:	4b25      	ldreq	r3, [pc, #148]	; (8004a10 <adc_func+0x21c>)
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 800497a:	881a      	ldrhne	r2, [r3, #0]
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 800497c:	881b      	ldrheq	r3, [r3, #0]
		Current =(int32_t)(Current_load-CalibrationData.Calibration0ValueForCurrent1)*(-1) ;//2745;
 800497e:	bf14      	ite	ne
 8004980:	692b      	ldrne	r3, [r5, #16]
		Current = (Current_Out-CalibrationData.Calibration0ValueForCurrent)/1 ;//2745;
 8004982:	68aa      	ldreq	r2, [r5, #8]
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	b21b      	sxth	r3, r3
 8004988:	800b      	strh	r3, [r1, #0]
	}
	if (SumU2Counter >= NUM_READ)
 800498a:	8833      	ldrh	r3, [r6, #0]
 800498c:	b21b      	sxth	r3, r3
 800498e:	2b1f      	cmp	r3, #31
 8004990:	dd25      	ble.n	80049de <adc_func+0x1ea>
	{

		U_OUTtmp = SumU2/NUM_READ;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <adc_func+0x234>)
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfb8      	it	lt
 800499a:	331f      	addlt	r3, #31
 800499c:	115b      	asrs	r3, r3, #5
 800499e:	6013      	str	r3, [r2, #0]
		SumU2 = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	603b      	str	r3, [r7, #0]
		SumU2Counter = 0;
 80049a4:	8033      	strh	r3, [r6, #0]

		U_OUT_ForSetResistance = U_OUTtmp;
 80049a6:	6810      	ldr	r0, [r2, #0]
 80049a8:	4c20      	ldr	r4, [pc, #128]	; (8004a2c <adc_func+0x238>)
 80049aa:	b280      	uxth	r0, r0
 80049ac:	8020      	strh	r0, [r4, #0]
		if (U_OUTtmp<3) U_OUTtmp = 0;
 80049ae:	6810      	ldr	r0, [r2, #0]
 80049b0:	2802      	cmp	r0, #2
 80049b2:	bfd8      	it	le
 80049b4:	6013      	strle	r3, [r2, #0]

		if (Current>=0)
 80049b6:	8808      	ldrh	r0, [r1, #0]
		{
			U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
 80049b8:	8809      	ldrh	r1, [r1, #0]
 80049ba:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80049bc:	b209      	sxth	r1, r1
 80049be:	434b      	muls	r3, r1
 80049c0:	481b      	ldr	r0, [pc, #108]	; (8004a30 <adc_func+0x23c>)
 80049c2:	6814      	ldr	r4, [r2, #0]
 80049c4:	fb93 f3f0 	sdiv	r3, r3, r0
 80049c8:	4423      	add	r3, r4
 80049ca:	6013      	str	r3, [r2, #0]
		}
		else
		{
			U_OUTtmp = U_OUTtmp - (int32_t)CalibrationData.ResistanceComp_Ishunt_Wires*Current/10000;
		}
		if (U_OUTtmp<3)
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	2b02      	cmp	r3, #2
			U_OUTtmp=0;
 80049d0:	bfdc      	itt	le
 80049d2:	2300      	movle	r3, #0
 80049d4:	6013      	strle	r3, [r2, #0]
		U_OUT = U_OUTtmp;
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <adc_func+0x240>)
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]
	}
	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 80049de:	b005      	add	sp, #20
 80049e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e2:	bf00      	nop
 80049e4:	2000085c 	.word	0x2000085c
 80049e8:	20000004 	.word	0x20000004
 80049ec:	2000086c 	.word	0x2000086c
 80049f0:	200007bc 	.word	0x200007bc
 80049f4:	200007c0 	.word	0x200007c0
 80049f8:	20000874 	.word	0x20000874
 80049fc:	200007c4 	.word	0x200007c4
 8004a00:	200007c8 	.word	0x200007c8
 8004a04:	20000858 	.word	0x20000858
 8004a08:	200007ac 	.word	0x200007ac
 8004a0c:	200007b0 	.word	0x200007b0
 8004a10:	200002b2 	.word	0x200002b2
 8004a14:	200007b4 	.word	0x200007b4
 8004a18:	200007b8 	.word	0x200007b8
 8004a1c:	200002b4 	.word	0x200002b4
 8004a20:	40010c00 	.word	0x40010c00
 8004a24:	2000085a 	.word	0x2000085a
 8004a28:	200007dc 	.word	0x200007dc
 8004a2c:	200002b6 	.word	0x200002b6
 8004a30:	ffffd8f0 	.word	0xffffd8f0
 8004a34:	2000086e 	.word	0x2000086e

08004a38 <SysTick_Callback>:
{
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BUT_Debrief();
 8004a3a:	f7fd fddb 	bl	80025f4 <BUT_Debrief>
	TimerForReadyMeasurement_ms++;
 8004a3e:	4a35      	ldr	r2, [pc, #212]	; (8004b14 <SysTick_Callback+0xdc>)
	if (Count10mSecond >= 5)
 8004a40:	4e35      	ldr	r6, [pc, #212]	; (8004b18 <SysTick_Callback+0xe0>)
	TimerForReadyMeasurement_ms++;
 8004a42:	6813      	ldr	r3, [r2, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	6013      	str	r3, [r2, #0]
	if (Count10mSecond >= 5)
 8004a48:	8833      	ldrh	r3, [r6, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d905      	bls.n	8004a5c <SysTick_Callback+0x24>
		Count10mSecond = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	8033      	strh	r3, [r6, #0]
		adc_func();
 8004a54:	f7ff fece 	bl	80047f4 <adc_func>
		All_OUT_OFF_When_Power_OFF();
 8004a58:	f7ff fcb0 	bl	80043bc <All_OUT_OFF_When_Power_OFF>
	if (Count100mSecond >= 100)
 8004a5c:	4d2f      	ldr	r5, [pc, #188]	; (8004b1c <SysTick_Callback+0xe4>)
	if (Count1000mSecond >= 1000)
 8004a5e:	4c30      	ldr	r4, [pc, #192]	; (8004b20 <SysTick_Callback+0xe8>)
	if (Count100mSecond >= 100)
 8004a60:	882b      	ldrh	r3, [r5, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b63      	cmp	r3, #99	; 0x63
		Count100mSecond = 0;
 8004a66:	bf84      	itt	hi
 8004a68:	2300      	movhi	r3, #0
 8004a6a:	802b      	strhhi	r3, [r5, #0]
	if (Count1000mSecond >= 1000)
 8004a6c:	8823      	ldrh	r3, [r4, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a74:	d340      	bcc.n	8004af8 <SysTick_Callback+0xc0>
		Count1000mSecond = 0;
 8004a76:	2300      	movs	r3, #0
		if (Current < 2)
 8004a78:	4f2a      	ldr	r7, [pc, #168]	; (8004b24 <SysTick_Callback+0xec>)
		Count1000mSecond = 0;
 8004a7a:	8023      	strh	r3, [r4, #0]
		if (Current < 2)
 8004a7c:	883b      	ldrh	r3, [r7, #0]
 8004a7e:	b21b      	sxth	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	dc07      	bgt.n	8004a94 <SysTick_Callback+0x5c>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 8004a84:	8838      	ldrh	r0, [r7, #0]
 8004a86:	b200      	sxth	r0, r0
 8004a88:	f7fc fdac 	bl	80015e4 <Module16>
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <SysTick_Callback+0xf0>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4410      	add	r0, r2
 8004a92:	6018      	str	r0, [r3, #0]
		if (Current > 2)
 8004a94:	883b      	ldrh	r3, [r7, #0]
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	dd07      	ble.n	8004aac <SysTick_Callback+0x74>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 8004a9c:	8838      	ldrh	r0, [r7, #0]
 8004a9e:	b200      	sxth	r0, r0
 8004aa0:	f7fc fda0 	bl	80015e4 <Module16>
 8004aa4:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <SysTick_Callback+0xf4>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4410      	add	r0, r2
 8004aaa:	6018      	str	r0, [r3, #0]
		if (ChargeStatusForTimer == 1)
 8004aac:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <SysTick_Callback+0xf8>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
			ChargeTimeSec++;
 8004ab2:	bf01      	itttt	eq
 8004ab4:	4a1f      	ldreq	r2, [pc, #124]	; (8004b34 <SysTick_Callback+0xfc>)
 8004ab6:	6813      	ldreq	r3, [r2, #0]
 8004ab8:	3301      	addeq	r3, #1
 8004aba:	6013      	streq	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 8004abc:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <SysTick_Callback+0x100>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
			DischargeTimeSec++;
 8004ac2:	bf01      	itttt	eq
 8004ac4:	4a1d      	ldreq	r2, [pc, #116]	; (8004b3c <SysTick_Callback+0x104>)
 8004ac6:	6813      	ldreq	r3, [r2, #0]
 8004ac8:	3301      	addeq	r3, #1
 8004aca:	6013      	streq	r3, [r2, #0]
		if (Status_Timer_Sec == 1)
 8004acc:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <SysTick_Callback+0x108>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b01      	cmp	r3, #1
			Timer_Sec++;
 8004ad2:	bf01      	itttt	eq
 8004ad4:	4a1b      	ldreq	r2, [pc, #108]	; (8004b44 <SysTick_Callback+0x10c>)
 8004ad6:	6813      	ldreq	r3, [r2, #0]
 8004ad8:	3301      	addeq	r3, #1
 8004ada:	6013      	streq	r3, [r2, #0]
		time_sec++;
 8004adc:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <SysTick_Callback+0x110>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	3201      	adds	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
		if (time_sec%2==0) GPIOA->BSRR =  GPIO_BSRR_BS15;
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f013 0f01 	tst.w	r3, #1
 8004aea:	bf0c      	ite	eq
 8004aec:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		else GPIOA->BSRR =  GPIO_BSRR_BR15;
 8004af0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
 8004af4:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <SysTick_Callback+0x114>)
 8004af6:	611a      	str	r2, [r3, #16]
	Count10mSecond++;
 8004af8:	8833      	ldrh	r3, [r6, #0]
 8004afa:	3301      	adds	r3, #1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8033      	strh	r3, [r6, #0]
	Count100mSecond++;
 8004b00:	882b      	ldrh	r3, [r5, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	802b      	strh	r3, [r5, #0]
	Count1000mSecond++;
 8004b08:	8823      	ldrh	r3, [r4, #0]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8023      	strh	r3, [r4, #0]
}
 8004b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200007cc 	.word	0x200007cc
 8004b18:	200002b0 	.word	0x200002b0
 8004b1c:	200002ae 	.word	0x200002ae
 8004b20:	200002ac 	.word	0x200002ac
 8004b24:	2000085a 	.word	0x2000085a
 8004b28:	20000780 	.word	0x20000780
 8004b2c:	2000077c 	.word	0x2000077c
 8004b30:	2000078b 	.word	0x2000078b
 8004b34:	2000078c 	.word	0x2000078c
 8004b38:	20000794 	.word	0x20000794
 8004b3c:	20000798 	.word	0x20000798
 8004b40:	200007aa 	.word	0x200007aa
 8004b44:	200007d0 	.word	0x200007d0
 8004b48:	200007e8 	.word	0x200007e8
 8004b4c:	40010800 	.word	0x40010800

08004b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b50:	b510      	push	{r4, lr}
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b52:	4c1d      	ldr	r4, [pc, #116]	; (8004bc8 <SystemClock_Config+0x78>)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5a:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004b5c:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004b5e:	039a      	lsls	r2, r3, #14
 8004b60:	d5fc      	bpl.n	8004b5c <SystemClock_Config+0xc>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004b68:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004b6c:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 8004b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b70:	f023 030f 	bic.w	r3, r3, #15
 8004b74:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004b7e:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	d5fc      	bpl.n	8004b7e <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b8a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b8c:	6863      	ldr	r3, [r4, #4]
 8004b8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b92:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b9a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	f043 0302 	orr.w	r3, r3, #2
 8004ba6:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ba8:	6863      	ldr	r3, [r4, #4]
 8004baa:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d1fa      	bne.n	8004ba8 <SystemClock_Config+0x58>
  {

  }
  LL_Init1msTick(24000000);
 8004bb2:	4806      	ldr	r0, [pc, #24]	; (8004bcc <SystemClock_Config+0x7c>)
 8004bb4:	f000 ff76 	bl	8005aa4 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8004bb8:	4804      	ldr	r0, [pc, #16]	; (8004bcc <SystemClock_Config+0x7c>)
 8004bba:	f000 ff81 	bl	8005ac0 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8004bbe:	6863      	ldr	r3, [r4, #4]
 8004bc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004bc4:	6063      	str	r3, [r4, #4]
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
}
 8004bc6:	bd10      	pop	{r4, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	016e3600 	.word	0x016e3600

08004bd0 <main>:
{
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(RCC->APB1ENR, Periphs);
 8004bd4:	4dc5      	ldr	r5, [pc, #788]	; (8004eec <main+0x31c>)
 8004bd6:	b091      	sub	sp, #68	; 0x44
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f7fd f85f 	bl	8001c9c <LL_APB2_GRP1_EnableClock>
 8004bde:	69eb      	ldr	r3, [r5, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be0:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8004f40 <main+0x370>
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be8:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004bea:	69eb      	ldr	r3, [r5, #28]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004bec:	f8df a354 	ldr.w	sl, [pc, #852]	; 8004f44 <main+0x374>
 8004bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004bf6:	9b00      	ldr	r3, [sp, #0]
 8004bf8:	f8d9 200c 	ldr.w	r2, [r9, #12]
  reg_value  =  (reg_value                                   |
 8004bfc:	4bbc      	ldr	r3, [pc, #752]	; (8004ef0 <main+0x320>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c02:	0412      	lsls	r2, r2, #16
 8004c04:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 8004c06:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8004c08:	f8c9 300c 	str.w	r3, [r9, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8004c0c:	4bb9      	ldr	r3, [pc, #740]	; (8004ef4 <main+0x324>)
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004c0e:	4eba      	ldr	r6, [pc, #744]	; (8004ef8 <main+0x328>)
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8004c10:	685a      	ldr	r2, [r3, #4]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c12:	2400      	movs	r4, #0
 8004c14:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8004c18:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8004c1a:	685a      	ldr	r2, [r3, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004c1c:	f04f 0b01 	mov.w	fp, #1
 8004c20:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004c24:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 8004c26:	f7ff ff93 	bl	8004b50 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2a:	2214      	movs	r2, #20
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	a809      	add	r0, sp, #36	; 0x24
 8004c30:	f000 ff7e 	bl	8005b30 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8004c34:	2020      	movs	r0, #32
 8004c36:	f7fd f831 	bl	8001c9c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004c3a:	2004      	movs	r0, #4
 8004c3c:	f7fd f82e 	bl	8001c9c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004c40:	2008      	movs	r0, #8
 8004c42:	f7fd f82b 	bl	8001c9c <LL_APB2_GRP1_EnableClock>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004c46:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8004c4a:	f8ca 3014 	str.w	r3, [sl, #20]
 8004c4e:	f44f 4309 	mov.w	r3, #35072	; 0x8900
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c52:	2702      	movs	r7, #2
 8004c54:	6173      	str	r3, [r6, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004c56:	f240 3303 	movw	r3, #771	; 0x303
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004c5a:	f04f 0804 	mov.w	r8, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5e:	a909      	add	r1, sp, #36	; 0x24
 8004c60:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004c62:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c66:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c6a:	f000 fdd5 	bl	8005818 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
 8004c6e:	4ba3      	ldr	r3, [pc, #652]	; (8004efc <main+0x32c>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c70:	a909      	add	r1, sp, #36	; 0x24
 8004c72:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004c74:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004c78:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004c7c:	970b      	str	r7, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c7e:	f000 fdcb 	bl	8005818 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_15;
 8004c82:	4b9f      	ldr	r3, [pc, #636]	; (8004f00 <main+0x330>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c84:	a909      	add	r1, sp, #36	; 0x24
 8004c86:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004c88:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c8c:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c90:	f000 fdc2 	bl	8005818 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004c94:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8004c98:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c9a:	a909      	add	r1, sp, #36	; 0x24
 8004c9c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004c9e:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004ca2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca6:	f000 fdb7 	bl	8005818 <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8004caa:	696b      	ldr	r3, [r5, #20]
 8004cac:	ea43 030b 	orr.w	r3, r3, fp
 8004cb0:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004cb2:	696b      	ldr	r3, [r5, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb4:	4d93      	ldr	r5, [pc, #588]	; (8004f04 <main+0x334>)
 8004cb6:	ea03 030b 	and.w	r3, r3, fp
 8004cba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004cbc:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cbe:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004cc2:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004cc6:	f7fd f977 	bl	8001fb8 <NVIC_EncodePriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cca:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cce:	fa00 f008 	lsl.w	r0, r0, r8
 8004cd2:	b2c0      	uxtb	r0, r0
 8004cd4:	f885 030b 	strb.w	r0, [r5, #779]	; 0x30b
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004cd8:	221c      	movs	r2, #28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cda:	602b      	str	r3, [r5, #0]
 8004cdc:	4621      	mov	r1, r4
 8004cde:	a809      	add	r0, sp, #36	; 0x24
 8004ce0:	f000 ff26 	bl	8005b30 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce4:	2214      	movs	r2, #20
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	a804      	add	r0, sp, #16
 8004cea:	f000 ff21 	bl	8005b30 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004cee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004cf2:	f7fc ffd3 	bl	8001c9c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f7fc ffd0 	bl	8001c9c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004cfc:	2309      	movs	r3, #9
 8004cfe:	4982      	ldr	r1, [pc, #520]	; (8004f08 <main+0x338>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d00:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004d02:	e9cd 1304 	strd	r1, r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004d06:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d08:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d0a:	e9cd 3406 	strd	r3, r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0e:	f000 fd83 	bl	8005818 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8004d12:	4b7e      	ldr	r3, [pc, #504]	; (8004f0c <main+0x33c>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	a904      	add	r1, sp, #16
 8004d16:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8004d18:	e9cd 3804 	strd	r3, r8, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1c:	f000 fd7c 	bl	8005818 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d20:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004d24:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004d28:	f7fd f946 	bl	8001fb8 <NVIC_EncodePriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d2c:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d2e:	fa00 f008 	lsl.w	r0, r0, r8
 8004d32:	b2c0      	uxtb	r0, r0
 8004d34:	f885 0325 	strb.w	r0, [r5, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d38:	606b      	str	r3, [r5, #4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004d3a:	4d75      	ldr	r5, [pc, #468]	; (8004f10 <main+0x340>)
  LL_USART_Init(USART1, &USART_InitStruct);
 8004d3c:	a909      	add	r1, sp, #36	; 0x24
 8004d3e:	68eb      	ldr	r3, [r5, #12]
 8004d40:	4628      	mov	r0, r5
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = 38400;
 8004d48:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004d4c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004d50:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004d52:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004d56:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004d5a:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8004d5c:	f000 fe36 	bl	80059cc <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d60:	692b      	ldr	r3, [r5, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004d62:	2214      	movs	r2, #20
 8004d64:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004d68:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004d6a:	696b      	ldr	r3, [r5, #20]
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004d72:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004d74:	68eb      	ldr	r3, [r5, #12]
 8004d76:	a804      	add	r0, sp, #16
 8004d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d7c:	60eb      	str	r3, [r5, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004d7e:	e9cd 4402 	strd	r4, r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004d82:	f000 fed5 	bl	8005b30 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d86:	2214      	movs	r2, #20
 8004d88:	4621      	mov	r1, r4
 8004d8a:	a809      	add	r0, sp, #36	; 0x24
 8004d8c:	f000 fed0 	bl	8005b30 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004d90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004d94:	f7fc ff82 	bl	8001c9c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004d98:	4640      	mov	r0, r8
 8004d9a:	f7fc ff7f 	bl	8001c9c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 8004d9e:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da2:	a909      	add	r1, sp, #36	; 0x24
 8004da4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004da6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004daa:	f000 fd35 	bl	8005818 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004dae:	4b59      	ldr	r3, [pc, #356]	; (8004f14 <main+0x344>)
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004db0:	f44f 7880 	mov.w	r8, #256	; 0x100
 8004db4:	681a      	ldr	r2, [r3, #0]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004db6:	f5a5 55a0 	sub.w	r5, r5, #5120	; 0x1400
 8004dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dbe:	f022 0210 	bic.w	r2, r2, #16
 8004dc2:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	a902      	add	r1, sp, #8
 8004dc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dd0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f042 0220 	orr.w	r2, r2, #32
 8004dda:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e02:	601a      	str	r2, [r3, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8004e04:	4a44      	ldr	r2, [pc, #272]	; (8004f18 <main+0x348>)
 8004e06:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8004e08:	4a44      	ldr	r2, [pc, #272]	; (8004f1c <main+0x34c>)
 8004e0a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	0c12      	lsrs	r2, r2, #16
 8004e10:	0412      	lsls	r2, r2, #16
 8004e12:	f042 0208 	orr.w	r2, r2, #8
 8004e16:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	ea42 020b 	orr.w	r2, r2, fp
 8004e1e:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004e20:	9402      	str	r4, [sp, #8]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8004e22:	f8cd 800c 	str.w	r8, [sp, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004e26:	f000 fcc0 	bl	80057aa <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004e2a:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8004e2e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004e32:	a904      	add	r1, sp, #16
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8004e34:	e9cd 0304 	strd	r0, r3, [sp, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004e38:	4628      	mov	r0, r5
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8004e3a:	e9cd 4706 	strd	r4, r7, [sp, #24]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004e3e:	f8cd 8020 	str.w	r8, [sp, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004e42:	f000 fcc7 	bl	80057d4 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004e46:	4936      	ldr	r1, [pc, #216]	; (8004f20 <main+0x350>)
 8004e48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e4c:	f7fd f898 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004e50:	4833      	ldr	r0, [pc, #204]	; (8004f20 <main+0x350>)
 8004e52:	f7fd f86b 	bl	8001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8004e56:	4933      	ldr	r1, [pc, #204]	; (8004f24 <main+0x354>)
 8004e58:	f240 2005 	movw	r0, #517	; 0x205
 8004e5c:	f7fd f890 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004e60:	4830      	ldr	r0, [pc, #192]	; (8004f24 <main+0x354>)
 8004e62:	f7fd f863 	bl	8001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8004e66:	4930      	ldr	r1, [pc, #192]	; (8004f28 <main+0x358>)
 8004e68:	f240 200a 	movw	r0, #522	; 0x20a
 8004e6c:	f7fd f888 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004e70:	482d      	ldr	r0, [pc, #180]	; (8004f28 <main+0x358>)
 8004e72:	f7fd f85b 	bl	8001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_4);
 8004e76:	492d      	ldr	r1, [pc, #180]	; (8004f2c <main+0x35c>)
 8004e78:	f240 200f 	movw	r0, #527	; 0x20f
 8004e7c:	f7fd f880 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004e80:	482a      	ldr	r0, [pc, #168]	; (8004f2c <main+0x35c>)
 8004e82:	f7fd f853 	bl	8001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_5);
 8004e86:	492a      	ldr	r1, [pc, #168]	; (8004f30 <main+0x360>)
 8004e88:	f44f 7005 	mov.w	r0, #532	; 0x214
 8004e8c:	f7fd f878 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004e90:	4827      	ldr	r0, [pc, #156]	; (8004f30 <main+0x360>)
 8004e92:	f7fd f84b 	bl	8001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_6);
 8004e96:	4927      	ldr	r1, [pc, #156]	; (8004f34 <main+0x364>)
 8004e98:	f240 2019 	movw	r0, #537	; 0x219
 8004e9c:	f7fd f870 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004ea0:	4824      	ldr	r0, [pc, #144]	; (8004f34 <main+0x364>)
 8004ea2:	f7fd f843 	bl	8001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_TEMPSENSOR);
 8004ea6:	4924      	ldr	r1, [pc, #144]	; (8004f38 <main+0x368>)
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	f7fd f869 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004eae:	4822      	ldr	r0, [pc, #136]	; (8004f38 <main+0x368>)
 8004eb0:	f7fd f83c 	bl	8001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8004eb4:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_VREFINT);
 8004eb6:	4921      	ldr	r1, [pc, #132]	; (8004f3c <main+0x36c>)
 8004eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ebc:	60ab      	str	r3, [r5, #8]
 8004ebe:	f240 1005 	movw	r0, #261	; 0x105
 8004ec2:	f7fd f85d 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks.constprop.0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004ec6:	481d      	ldr	r0, [pc, #116]	; (8004f3c <main+0x36c>)
 8004ec8:	f7fd f830 	bl	8001f2c <LL_ADC_SetChannelSamplingTime.constprop.0>
 8004ecc:	68ab      	ldr	r3, [r5, #8]
	  delay_ms(100);
 8004ece:	2064      	movs	r0, #100	; 0x64
 8004ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ed4:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004ed6:	68ab      	ldr	r3, [r5, #8]
 8004ed8:	ea43 030b 	orr.w	r3, r3, fp
 8004edc:	60ab      	str	r3, [r5, #8]
 8004ede:	f7fc f91d 	bl	800111c <delay_ms>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8004ee2:	68ab      	ldr	r3, [r5, #8]
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	60ab      	str	r3, [r5, #8]
 8004eea:	e02d      	b.n	8004f48 <main+0x378>
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	05fa0300 	.word	0x05fa0300
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40010800 	.word	0x40010800
 8004efc:	04fc00fc 	.word	0x04fc00fc
 8004f00:	04890089 	.word	0x04890089
 8004f04:	e000e100 	.word	0xe000e100
 8004f08:	04020002 	.word	0x04020002
 8004f0c:	04040004 	.word	0x04040004
 8004f10:	40013800 	.word	0x40013800
 8004f14:	40020008 	.word	0x40020008
 8004f18:	4001244c 	.word	0x4001244c
 8004f1c:	2000085c 	.word	0x2000085c
 8004f20:	02300001 	.word	0x02300001
 8004f24:	02600002 	.word	0x02600002
 8004f28:	02900003 	.word	0x02900003
 8004f2c:	02c00004 	.word	0x02c00004
 8004f30:	02f00005 	.word	0x02f00005
 8004f34:	03200006 	.word	0x03200006
 8004f38:	81200010 	.word	0x81200010
 8004f3c:	81500011 	.word	0x81500011
 8004f40:	e000ed00 	.word	0xe000ed00
 8004f44:	40010c00 	.word	0x40010c00
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8004f48:	68ac      	ldr	r4, [r5, #8]
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8004f4a:	f014 0404 	ands.w	r4, r4, #4
 8004f4e:	d1fb      	bne.n	8004f48 <main+0x378>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004f50:	68ab      	ldr	r3, [r5, #8]
 8004f52:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8004f56:	60ab      	str	r3, [r5, #8]
  InitLCD();
 8004f58:	f7fc fe95 	bl	8001c86 <InitLCD>
  SystemCoreClockUpdate();
 8004f5c:	f000 fa8c 	bl	8005478 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8004f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f64:	4bae      	ldr	r3, [pc, #696]	; (8005220 <main+0x650>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f72:	d208      	bcs.n	8004f86 <main+0x3b6>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f74:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f76:	4aab      	ldr	r2, [pc, #684]	; (8005224 <main+0x654>)
 8004f78:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7a:	4bab      	ldr	r3, [pc, #684]	; (8005228 <main+0x658>)
 8004f7c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f80:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f82:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f84:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	LoggingData.RecordsQuantity= 0;
 8004f8a:	2400      	movs	r4, #0
	GPIOA->BSRR =  GPIO_BSRR_BS15;//Led on Board ON
 8004f8c:	6133      	str	r3, [r6, #16]
	LoggingData.RecordsQuantity= 0;
 8004f8e:	4da7      	ldr	r5, [pc, #668]	; (800522c <main+0x65c>)
	OFF();
 8004f90:	f7fe fa80 	bl	8003494 <OFF>
	PrintToLCD(Version);
 8004f94:	48a6      	ldr	r0, [pc, #664]	; (8005230 <main+0x660>)
	LoggingData.RecordsQuantity= 0;
 8004f96:	602c      	str	r4, [r5, #0]
	PrintToLCD(Version);
 8004f98:	f7fc fe66 	bl	8001c68 <PrintToLCD>
	InfoToUARTBeforeStart();
 8004f9c:	f7fc f8ce 	bl	800113c <InfoToUARTBeforeStart>
	logInfo(Version);
 8004fa0:	48a4      	ldr	r0, [pc, #656]	; (8005234 <main+0x664>)
 8004fa2:	f000 faff 	bl	80055a4 <printToBufferWithoutEndUART1>
 8004fa6:	48a2      	ldr	r0, [pc, #648]	; (8005230 <main+0x660>)
 8004fa8:	f000 fa96 	bl	80054d8 <printToBufferUART1>
	SetSymbols();
 8004fac:	f7fc fd84 	bl	8001ab8 <SetSymbols>
	lcd_set_xy(0,0);
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7fc fdd8 	bl	8001b68 <lcd_set_xy>
	delay_ms(1000);
 8004fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fbc:	f7fc f8ae 	bl	800111c <delay_ms>
	flash_read_block();
 8004fc0:	f7fb f9b2 	bl	8000328 <flash_read_block>
	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	2b17      	cmp	r3, #23
 8004fc8:	bf88      	it	hi
 8004fca:	602c      	strhi	r4, [r5, #0]
	EEpromReadStatus = ReadFromFlash();
 8004fcc:	f7fb fcb4 	bl	8000938 <ReadFromFlash>
	if (EEpromReadStatus==0)
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	b968      	cbnz	r0, 8004ff0 <main+0x420>
		delay_ms(1000);
 8004fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fd8:	f7fc f8a0 	bl	800111c <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8004fdc:	f7fb fcac 	bl	8000938 <ReadFromFlash>
 8004fe0:	4604      	mov	r4, r0
		logInfo("Read from EEprom - FAIL");
 8004fe2:	4894      	ldr	r0, [pc, #592]	; (8005234 <main+0x664>)
 8004fe4:	f000 fade 	bl	80055a4 <printToBufferWithoutEndUART1>
 8004fe8:	4893      	ldr	r0, [pc, #588]	; (8005238 <main+0x668>)
 8004fea:	f000 fa75 	bl	80054d8 <printToBufferUART1>
	if (EEpromReadStatus == 0)
 8004fee:	b134      	cbz	r4, 8004ffe <main+0x42e>
	if (EEpromReadStatus == 1)
 8004ff0:	2c01      	cmp	r4, #1
 8004ff2:	d114      	bne.n	800501e <main+0x44e>
		logInfo("Read from EEprom - SUCCESS");
 8004ff4:	488f      	ldr	r0, [pc, #572]	; (8005234 <main+0x664>)
 8004ff6:	f000 fad5 	bl	80055a4 <printToBufferWithoutEndUART1>
 8004ffa:	4890      	ldr	r0, [pc, #576]	; (800523c <main+0x66c>)
 8004ffc:	e00d      	b.n	800501a <main+0x44a>
		PrintToLCD("EEprom Read FAIL");
 8004ffe:	4890      	ldr	r0, [pc, #576]	; (8005240 <main+0x670>)
 8005000:	f7fc fe32 	bl	8001c68 <PrintToLCD>
		delay_ms(4000);
 8005004:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005008:	f7fc f888 	bl	800111c <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 800500c:	488d      	ldr	r0, [pc, #564]	; (8005244 <main+0x674>)
 800500e:	f7fb febf 	bl	8000d90 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8005012:	4888      	ldr	r0, [pc, #544]	; (8005234 <main+0x664>)
 8005014:	f000 fac6 	bl	80055a4 <printToBufferWithoutEndUART1>
 8005018:	4887      	ldr	r0, [pc, #540]	; (8005238 <main+0x668>)
		logInfo("Read from EEprom - SUCCESS");
 800501a:	f000 fa5d 	bl	80054d8 <printToBufferUART1>
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 800501e:	4d8a      	ldr	r5, [pc, #552]	; (8005248 <main+0x678>)
 8005020:	4b8a      	ldr	r3, [pc, #552]	; (800524c <main+0x67c>)
 8005022:	692a      	ldr	r2, [r5, #16]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8005024:	4c8a      	ldr	r4, [pc, #552]	; (8005250 <main+0x680>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8005026:	601a      	str	r2, [r3, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8005028:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800502c:	6922      	ldr	r2, [r4, #16]
  OutStateAfterPowerUp = SettingsData.Option2;
 800502e:	4e89      	ldr	r6, [pc, #548]	; (8005254 <main+0x684>)
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8005030:	4353      	muls	r3, r2
 8005032:	4a89      	ldr	r2, [pc, #548]	; (8005258 <main+0x688>)
 8005034:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8005036:	68a2      	ldr	r2, [r4, #8]
 8005038:	4b88      	ldr	r3, [pc, #544]	; (800525c <main+0x68c>)
 800503a:	601a      	str	r2, [r3, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 800503c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800503e:	4a88      	ldr	r2, [pc, #544]	; (8005260 <main+0x690>)
  OutStateAfterPowerUp = SettingsData.Option2;
 8005040:	6033      	str	r3, [r6, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8005042:	6013      	str	r3, [r2, #0]
  Generation_Coefficients_R_A_B();
 8005044:	f7fb fe48 	bl	8000cd8 <Generation_Coefficients_R_A_B>
  delay_ms(1000);
 8005048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800504c:	f7fc f866 	bl	800111c <delay_ms>
  lcd_clear();
 8005050:	f7fc fdf8 	bl	8001c44 <lcd_clear>
	Menu_SetGenericWriteCallback(Generic_Write);
 8005054:	4883      	ldr	r0, [pc, #524]	; (8005264 <main+0x694>)
 8005056:	f7fc fc7b 	bl	8001950 <Menu_SetGenericWriteCallback>
	if (SettingsData.Option1 == 1)
 800505a:	68a3      	ldr	r3, [r4, #8]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d114      	bne.n	800508a <main+0x4ba>
		Menu_Navigate(&Menu_2_1);
 8005060:	4881      	ldr	r0, [pc, #516]	; (8005268 <main+0x698>)
		Menu_Navigate(&Menu_3_1);
 8005062:	f7fc fc5b 	bl	800191c <Menu_Navigate>
  	Blink_message_counter++;
 8005066:	4f81      	ldr	r7, [pc, #516]	; (800526c <main+0x69c>)
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 8005068:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8005268 <main+0x698>
 800506c:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80052c0 <main+0x6f0>
  	Blink_message_counter++;
 8005070:	783b      	ldrb	r3, [r7, #0]
 8005072:	3301      	adds	r3, #1
 8005074:	703b      	strb	r3, [r7, #0]
  	Button=BUT_GetKey();
 8005076:	f7fd faef 	bl	8002658 <BUT_GetKey>
 800507a:	1e43      	subs	r3, r0, #1
 800507c:	4604      	mov	r4, r0
	switch (Button)
 800507e:	2b03      	cmp	r3, #3
 8005080:	d820      	bhi.n	80050c4 <main+0x4f4>
 8005082:	e8df f003 	tbb	[pc, r3]
 8005086:	401a      	.short	0x401a
 8005088:	4b44      	.short	0x4b44
	else if (SettingsData.Option1 == 2)
 800508a:	2b02      	cmp	r3, #2
 800508c:	d101      	bne.n	8005092 <main+0x4c2>
		Menu_Navigate(&Menu_3_1);
 800508e:	4878      	ldr	r0, [pc, #480]	; (8005270 <main+0x6a0>)
 8005090:	e7e7      	b.n	8005062 <main+0x492>
	else if (SettingsData.Option1 == 3)
 8005092:	2b03      	cmp	r3, #3
 8005094:	d101      	bne.n	800509a <main+0x4ca>
		Menu_Navigate(&Menu_4_1);
 8005096:	4877      	ldr	r0, [pc, #476]	; (8005274 <main+0x6a4>)
 8005098:	e7e3      	b.n	8005062 <main+0x492>
	else if (SettingsData.Option1 == 4)
 800509a:	2b04      	cmp	r3, #4
 800509c:	d101      	bne.n	80050a2 <main+0x4d2>
		Menu_Navigate(&Menu_5_1);
 800509e:	4876      	ldr	r0, [pc, #472]	; (8005278 <main+0x6a8>)
 80050a0:	e7df      	b.n	8005062 <main+0x492>
	else if (SettingsData.Option1 == 5)
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d101      	bne.n	80050aa <main+0x4da>
		Menu_Navigate(&Menu_6_1);
 80050a6:	4875      	ldr	r0, [pc, #468]	; (800527c <main+0x6ac>)
 80050a8:	e7db      	b.n	8005062 <main+0x492>
	else if (SettingsData.Option1 == 6)
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d101      	bne.n	80050b2 <main+0x4e2>
		Menu_Navigate(&Menu_7_1);
 80050ae:	4874      	ldr	r0, [pc, #464]	; (8005280 <main+0x6b0>)
 80050b0:	e7d7      	b.n	8005062 <main+0x492>
	else if (SettingsData.Option1 == 7)
 80050b2:	2b07      	cmp	r3, #7
 80050b4:	d1d4      	bne.n	8005060 <main+0x490>
		Menu_Navigate(&Menu_8_1);
 80050b6:	4873      	ldr	r0, [pc, #460]	; (8005284 <main+0x6b4>)
 80050b8:	e7d3      	b.n	8005062 <main+0x492>
			Menu_Navigate(MENU_PREVIOUS);
 80050ba:	f7fc fc29 	bl	8001910 <Menu_GetCurrentMenu>
 80050be:	6840      	ldr	r0, [r0, #4]
			Menu_Navigate(MENU_PARENT);
 80050c0:	f7fc fc2c 	bl	800191c <Menu_Navigate>
	if (Menu_GetCurrentMenu() == &Menu_2_1)
 80050c4:	f7fc fc24 	bl	8001910 <Menu_GetCurrentMenu>
 80050c8:	4581      	cmp	r9, r0
 80050ca:	d12b      	bne.n	8005124 <main+0x554>
		MenuPowerSupply(Button);
 80050cc:	4620      	mov	r0, r4
 80050ce:	f7fd fb53 	bl	8002778 <MenuPowerSupply>
	if (EnterInMenu_Status == 0)
 80050d2:	f898 3000 	ldrb.w	r3, [r8]
 80050d6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80050da:	b983      	cbnz	r3, 80050fe <main+0x52e>
		OFF();
 80050dc:	f7fe f9da 	bl	8003494 <OFF>
		InitiStatus = 0;
 80050e0:	4b69      	ldr	r3, [pc, #420]	; (8005288 <main+0x6b8>)
 80050e2:	7019      	strb	r1, [r3, #0]
		CountShow = 0;
 80050e4:	4b69      	ldr	r3, [pc, #420]	; (800528c <main+0x6bc>)
 80050e6:	7019      	strb	r1, [r3, #0]
		SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 80050e8:	4b69      	ldr	r3, [pc, #420]	; (8005290 <main+0x6c0>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60ab      	str	r3, [r5, #8]
		DischargeTimeSec_Previous = DischargeTimeSec;
 80050ee:	4b69      	ldr	r3, [pc, #420]	; (8005294 <main+0x6c4>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b69      	ldr	r3, [pc, #420]	; (8005298 <main+0x6c8>)
 80050f4:	601a      	str	r2, [r3, #0]
		ChargeDischargeState = 0;
 80050f6:	4b69      	ldr	r3, [pc, #420]	; (800529c <main+0x6cc>)
 80050f8:	7019      	strb	r1, [r3, #0]
		OutStateAfterPowerUp = 1;
 80050fa:	2301      	movs	r3, #1
 80050fc:	6033      	str	r3, [r6, #0]
	delay_ms(100);
 80050fe:	2064      	movs	r0, #100	; 0x64
 8005100:	f7fc f80c 	bl	800111c <delay_ms>
  {
 8005104:	e7b4      	b.n	8005070 <main+0x4a0>
			Menu_Navigate(MENU_NEXT);
 8005106:	f7fc fc03 	bl	8001910 <Menu_GetCurrentMenu>
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	e7d8      	b.n	80050c0 <main+0x4f0>
			Menu_SelectItem(KEY_NEXT);
 800510e:	2002      	movs	r0, #2
 8005110:	f7fc fc28 	bl	8001964 <Menu_SelectItem>
			Menu_Navigate(MENU_CHILD);
 8005114:	f7fc fbfc 	bl	8001910 <Menu_GetCurrentMenu>
 8005118:	68c0      	ldr	r0, [r0, #12]
 800511a:	e7d1      	b.n	80050c0 <main+0x4f0>
			Menu_Navigate(MENU_PARENT);
 800511c:	f7fc fbf8 	bl	8001910 <Menu_GetCurrentMenu>
 8005120:	6880      	ldr	r0, [r0, #8]
 8005122:	e7cd      	b.n	80050c0 <main+0x4f0>
	else if (Menu_GetCurrentMenu() == &Menu_3_1)
 8005124:	f7fc fbf4 	bl	8001910 <Menu_GetCurrentMenu>
 8005128:	4b51      	ldr	r3, [pc, #324]	; (8005270 <main+0x6a0>)
 800512a:	4283      	cmp	r3, r0
 800512c:	d103      	bne.n	8005136 <main+0x566>
		MenuLoad(Button);
 800512e:	4620      	mov	r0, r4
 8005130:	f7fd fd6a 	bl	8002c08 <MenuLoad>
 8005134:	e7cd      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_4_1)
 8005136:	f7fc fbeb 	bl	8001910 <Menu_GetCurrentMenu>
 800513a:	4b4e      	ldr	r3, [pc, #312]	; (8005274 <main+0x6a4>)
 800513c:	4283      	cmp	r3, r0
 800513e:	d103      	bne.n	8005148 <main+0x578>
		MenuChargeCC_CV(Button);
 8005140:	4620      	mov	r0, r4
 8005142:	f7fe f9af 	bl	80034a4 <MenuChargeCC_CV>
 8005146:	e7c4      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_5_1)
 8005148:	f7fc fbe2 	bl	8001910 <Menu_GetCurrentMenu>
 800514c:	4b4a      	ldr	r3, [pc, #296]	; (8005278 <main+0x6a8>)
 800514e:	4283      	cmp	r3, r0
 8005150:	d103      	bne.n	800515a <main+0x58a>
		MenuChargeAdapt(Button);
 8005152:	4620      	mov	r0, r4
 8005154:	f7fe fb1c 	bl	8003790 <MenuChargeAdapt>
 8005158:	e7bb      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_6_1)
 800515a:	f7fc fbd9 	bl	8001910 <Menu_GetCurrentMenu>
 800515e:	4b47      	ldr	r3, [pc, #284]	; (800527c <main+0x6ac>)
 8005160:	4283      	cmp	r3, r0
 8005162:	d103      	bne.n	800516c <main+0x59c>
		MenuDisCharge(Button);
 8005164:	4620      	mov	r0, r4
 8005166:	f7fe fccf 	bl	8003b08 <MenuDisCharge>
 800516a:	e7b2      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_6_1a)
 800516c:	f7fc fbd0 	bl	8001910 <Menu_GetCurrentMenu>
 8005170:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <main+0x6d0>)
 8005172:	4283      	cmp	r3, r0
 8005174:	d103      	bne.n	800517e <main+0x5ae>
		MenuCheckingCapacity(Button);
 8005176:	4620      	mov	r0, r4
 8005178:	f7fe fe22 	bl	8003dc0 <MenuCheckingCapacity>
 800517c:	e7a9      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_7_1)
 800517e:	f7fc fbc7 	bl	8001910 <Menu_GetCurrentMenu>
 8005182:	4b3f      	ldr	r3, [pc, #252]	; (8005280 <main+0x6b0>)
 8005184:	4283      	cmp	r3, r0
 8005186:	d103      	bne.n	8005190 <main+0x5c0>
		MenuTraining_new(Button);
 8005188:	4620      	mov	r0, r4
 800518a:	f7fd fe35 	bl	8002df8 <MenuTraining_new>
 800518e:	e7a0      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_8_1)
 8005190:	f7fc fbbe 	bl	8001910 <Menu_GetCurrentMenu>
 8005194:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <main+0x6b4>)
 8005196:	4283      	cmp	r3, r0
 8005198:	d103      	bne.n	80051a2 <main+0x5d2>
		MenuSwing(Button);
 800519a:	4620      	mov	r0, r4
 800519c:	f7fe f87e 	bl	800329c <MenuSwing>
 80051a0:	e797      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_8a_1)
 80051a2:	f7fc fbb5 	bl	8001910 <Menu_GetCurrentMenu>
 80051a6:	4b3f      	ldr	r3, [pc, #252]	; (80052a4 <main+0x6d4>)
 80051a8:	4283      	cmp	r3, r0
 80051aa:	d103      	bne.n	80051b4 <main+0x5e4>
		MenuBatterySimilation(Button);
 80051ac:	4620      	mov	r0, r4
 80051ae:	f7fd fd81 	bl	8002cb4 <MenuBatterySimilation>
 80051b2:	e78e      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_9_1)
 80051b4:	f7fc fbac 	bl	8001910 <Menu_GetCurrentMenu>
 80051b8:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <main+0x6d8>)
 80051ba:	4283      	cmp	r3, r0
 80051bc:	d103      	bne.n	80051c6 <main+0x5f6>
		MenuDIAGNOSTIC(Button);
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff f97e 	bl	80044c0 <MenuDIAGNOSTIC>
 80051c4:	e785      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_11_1)
 80051c6:	f7fc fba3 	bl	8001910 <Menu_GetCurrentMenu>
 80051ca:	4b38      	ldr	r3, [pc, #224]	; (80052ac <main+0x6dc>)
 80051cc:	4283      	cmp	r3, r0
 80051ce:	d103      	bne.n	80051d8 <main+0x608>
		MenuLog(Button);
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7fc ff19 	bl	8002008 <MenuLog>
 80051d6:	e77c      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_2_1)
 80051d8:	f7fc fb9a 	bl	8001910 <Menu_GetCurrentMenu>
 80051dc:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <main+0x6e0>)
 80051de:	4283      	cmp	r3, r0
 80051e0:	d103      	bne.n	80051ea <main+0x61a>
		MenuCalibration_CURRENT_Load_to_0(Button);
 80051e2:	4620      	mov	r0, r4
 80051e4:	f7fc ff7e 	bl	80020e4 <MenuCalibration_CURRENT_Load_to_0>
 80051e8:	e773      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_1_1)
 80051ea:	f7fc fb91 	bl	8001910 <Menu_GetCurrentMenu>
 80051ee:	4b31      	ldr	r3, [pc, #196]	; (80052b4 <main+0x6e4>)
 80051f0:	4283      	cmp	r3, r0
 80051f2:	d103      	bne.n	80051fc <main+0x62c>
		MenuCalibration_CURRENT_Out_to_0(Button);
 80051f4:	4620      	mov	r0, r4
 80051f6:	f7fc ff51 	bl	800209c <MenuCalibration_CURRENT_Out_to_0>
 80051fa:	e76a      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_4_1)
 80051fc:	f7fc fb88 	bl	8001910 <Menu_GetCurrentMenu>
 8005200:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <main+0x6e8>)
 8005202:	4283      	cmp	r3, r0
 8005204:	d103      	bne.n	800520e <main+0x63e>
		MenuCalibration_CURRENT_Load(Button);
 8005206:	4620      	mov	r0, r4
 8005208:	f7fd fc8a 	bl	8002b20 <MenuCalibration_CURRENT_Load>
 800520c:	e761      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_3_1)
 800520e:	f7fc fb7f 	bl	8001910 <Menu_GetCurrentMenu>
 8005212:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <main+0x6ec>)
 8005214:	4283      	cmp	r3, r0
 8005216:	d155      	bne.n	80052c4 <main+0x6f4>
		MenuCalibration_CURRENT_Out(Button);
 8005218:	4620      	mov	r0, r4
 800521a:	f7fd fb1b 	bl	8002854 <MenuCalibration_CURRENT_Out>
 800521e:	e758      	b.n	80050d2 <main+0x502>
 8005220:	2000028c 	.word	0x2000028c
 8005224:	e000e010 	.word	0xe000e010
 8005228:	e000ed00 	.word	0xe000ed00
 800522c:	20000878 	.word	0x20000878
 8005230:	2000027a 	.word	0x2000027a
 8005234:	08005fa3 	.word	0x08005fa3
 8005238:	0800661a 	.word	0x0800661a
 800523c:	08005e41 	.word	0x08005e41
 8005240:	08006632 	.word	0x08006632
 8005244:	08006643 	.word	0x08006643
 8005248:	200000f4 	.word	0x200000f4
 800524c:	20000784 	.word	0x20000784
 8005250:	20000154 	.word	0x20000154
 8005254:	20000274 	.word	0x20000274
 8005258:	20000a18 	.word	0x20000a18
 800525c:	20000a1c 	.word	0x20000a1c
 8005260:	20000a14 	.word	0x20000a14
 8005264:	08001e4d 	.word	0x08001e4d
 8005268:	08006d88 	.word	0x08006d88
 800526c:	20000789 	.word	0x20000789
 8005270:	08006de0 	.word	0x08006de0
 8005274:	08006e38 	.word	0x08006e38
 8005278:	08006e90 	.word	0x08006e90
 800527c:	08006ee8 	.word	0x08006ee8
 8005280:	08006f98 	.word	0x08006f98
 8005284:	08006ff0 	.word	0x08006ff0
 8005288:	200007a1 	.word	0x200007a1
 800528c:	20000791 	.word	0x20000791
 8005290:	20000780 	.word	0x20000780
 8005294:	20000798 	.word	0x20000798
 8005298:	2000079c 	.word	0x2000079c
 800529c:	2000078a 	.word	0x2000078a
 80052a0:	08006f14 	.word	0x08006f14
 80052a4:	08007048 	.word	0x08007048
 80052a8:	080070a0 	.word	0x080070a0
 80052ac:	080069ec 	.word	0x080069ec
 80052b0:	0800675c 	.word	0x0800675c
 80052b4:	08006704 	.word	0x08006704
 80052b8:	0800680c 	.word	0x0800680c
 80052bc:	080067b4 	.word	0x080067b4
 80052c0:	200007a0 	.word	0x200007a0
	else if (Menu_GetCurrentMenu() == &Menu_10_7_1)
 80052c4:	f7fc fb24 	bl	8001910 <Menu_GetCurrentMenu>
 80052c8:	4b3f      	ldr	r3, [pc, #252]	; (80053c8 <main+0x7f8>)
 80052ca:	4283      	cmp	r3, r0
 80052cc:	d103      	bne.n	80052d6 <main+0x706>
		MenuCalibration_VoltageIn(Button);
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7fd fb68 	bl	80029a4 <MenuCalibration_VoltageIn>
 80052d4:	e6fd      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_6_1)
 80052d6:	f7fc fb1b 	bl	8001910 <Menu_GetCurrentMenu>
 80052da:	4b3c      	ldr	r3, [pc, #240]	; (80053cc <main+0x7fc>)
 80052dc:	4283      	cmp	r3, r0
 80052de:	d103      	bne.n	80052e8 <main+0x718>
		MenuCalibration_VoltageOut(Button);
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7fd fb27 	bl	8002934 <MenuCalibration_VoltageOut>
 80052e6:	e6f4      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_5_1)
 80052e8:	f7fc fb12 	bl	8001910 <Menu_GetCurrentMenu>
 80052ec:	4b38      	ldr	r3, [pc, #224]	; (80053d0 <main+0x800>)
 80052ee:	4283      	cmp	r3, r0
 80052f0:	d103      	bne.n	80052fa <main+0x72a>
		MenuCalibration_VoltagePS(Button);
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7fd fae6 	bl	80028c4 <MenuCalibration_VoltagePS>
 80052f8:	e6eb      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_8_1)
 80052fa:	f7fc fb09 	bl	8001910 <Menu_GetCurrentMenu>
 80052fe:	4b35      	ldr	r3, [pc, #212]	; (80053d4 <main+0x804>)
 8005300:	4283      	cmp	r3, r0
 8005302:	d103      	bne.n	800530c <main+0x73c>
		MenuCalibration_Resist_Comp_5V1A(Button);
 8005304:	4620      	mov	r0, r4
 8005306:	f7fd fb85 	bl	8002a14 <MenuCalibration_Resist_Comp_5V1A>
 800530a:	e6e2      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_10_9_1)
 800530c:	f7fc fb00 	bl	8001910 <Menu_GetCurrentMenu>
 8005310:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <main+0x808>)
 8005312:	4283      	cmp	r3, r0
 8005314:	d103      	bne.n	800531e <main+0x74e>
		MenuCalibration_BackToFactory(Button);
 8005316:	4620      	mov	r0, r4
 8005318:	f7fc ff08 	bl	800212c <MenuCalibration_BackToFactory>
 800531c:	e6d9      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1)
 800531e:	f7fc faf7 	bl	8001910 <Menu_GetCurrentMenu>
 8005322:	4b2e      	ldr	r3, [pc, #184]	; (80053dc <main+0x80c>)
 8005324:	4283      	cmp	r3, r0
 8005326:	d103      	bne.n	8005330 <main+0x760>
		MenuSettingsChargeTime(Button);
 8005328:	4620      	mov	r0, r4
 800532a:	f7fc ff5b 	bl	80021e4 <MenuSettingsChargeTime>
 800532e:	e6d0      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_1_1a)
 8005330:	f7fc faee 	bl	8001910 <Menu_GetCurrentMenu>
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <main+0x810>)
 8005336:	4283      	cmp	r3, r0
 8005338:	d103      	bne.n	8005342 <main+0x772>
		MenuSettingsBatteryType(Button);
 800533a:	4620      	mov	r0, r4
 800533c:	f7fc ff78 	bl	8002230 <MenuSettingsBatteryType>
 8005340:	e6c7      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_2_1)
 8005342:	f7fc fae5 	bl	8001910 <Menu_GetCurrentMenu>
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <main+0x814>)
 8005348:	4283      	cmp	r3, r0
 800534a:	d103      	bne.n	8005354 <main+0x784>
		MenuSettingsLowVolt(Button);
 800534c:	4620      	mov	r0, r4
 800534e:	f7fc ffe7 	bl	8002320 <MenuSettingsLowVolt>
 8005352:	e6be      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_3_1)
 8005354:	f7fc fadc 	bl	8001910 <Menu_GetCurrentMenu>
 8005358:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <main+0x818>)
 800535a:	4283      	cmp	r3, r0
 800535c:	d103      	bne.n	8005366 <main+0x796>
		MenuSettingsMaxVolt(Button);
 800535e:	4620      	mov	r0, r4
 8005360:	f7fd f800 	bl	8002364 <MenuSettingsMaxVolt>
 8005364:	e6b5      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_4_1)
 8005366:	f7fc fad3 	bl	8001910 <Menu_GetCurrentMenu>
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <main+0x81c>)
 800536c:	4283      	cmp	r3, r0
 800536e:	d103      	bne.n	8005378 <main+0x7a8>
		MenuSettingsSwngChrgTime(Button);
 8005370:	4620      	mov	r0, r4
 8005372:	f7fd f819 	bl	80023a8 <MenuSettingsSwngChrgTime>
 8005376:	e6ac      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_5_1)
 8005378:	f7fc faca 	bl	8001910 <Menu_GetCurrentMenu>
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <main+0x820>)
 800537e:	4283      	cmp	r3, r0
 8005380:	d103      	bne.n	800538a <main+0x7ba>
		MenuSettingsSwngDChrgTime(Button);
 8005382:	4620      	mov	r0, r4
 8005384:	f7fd f82e 	bl	80023e4 <MenuSettingsSwngDChrgTime>
 8005388:	e6a3      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_6_1)
 800538a:	f7fc fac1 	bl	8001910 <Menu_GetCurrentMenu>
 800538e:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <main+0x824>)
 8005390:	4283      	cmp	r3, r0
 8005392:	d103      	bne.n	800539c <main+0x7cc>
		MenuSettingsChargeAddapt(Button);
 8005394:	4620      	mov	r0, r4
 8005396:	f7fd f843 	bl	8002420 <MenuSettingsChargeAddapt>
 800539a:	e69a      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_S_1)
 800539c:	f7fc fab8 	bl	8001910 <Menu_GetCurrentMenu>
 80053a0:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <main+0x828>)
 80053a2:	4283      	cmp	r3, r0
 80053a4:	d103      	bne.n	80053ae <main+0x7de>
		MenuSettingsSaveMenuPosWhenOFF(Button);
 80053a6:	4620      	mov	r0, r4
 80053a8:	f7fd f896 	bl	80024d8 <MenuSettingsSaveMenuPosWhenOFF>
 80053ac:	e691      	b.n	80050d2 <main+0x502>
	else if (Menu_GetCurrentMenu() == &Menu_1_SO_1)
 80053ae:	f7fc faaf 	bl	8001910 <Menu_GetCurrentMenu>
 80053b2:	4b12      	ldr	r3, [pc, #72]	; (80053fc <main+0x82c>)
 80053b4:	4283      	cmp	r3, r0
 80053b6:	d103      	bne.n	80053c0 <main+0x7f0>
		MenuSettingsOutAfterPowerUp(Button);
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7fd f8e3 	bl	8002584 <MenuSettingsOutAfterPowerUp>
 80053be:	e688      	b.n	80050d2 <main+0x502>
	else EnterInMenu_Status = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f888 3000 	strb.w	r3, [r8]
 80053c6:	e684      	b.n	80050d2 <main+0x502>
 80053c8:	08006914 	.word	0x08006914
 80053cc:	080068bc 	.word	0x080068bc
 80053d0:	08006864 	.word	0x08006864
 80053d4:	0800695c 	.word	0x0800695c
 80053d8:	080069a4 	.word	0x080069a4
 80053dc:	08006a44 	.word	0x08006a44
 80053e0:	08006a70 	.word	0x08006a70
 80053e4:	08006af4 	.word	0x08006af4
 80053e8:	08006b4c 	.word	0x08006b4c
 80053ec:	08006ba4 	.word	0x08006ba4
 80053f0:	08006bfc 	.word	0x08006bfc
 80053f4:	08006c54 	.word	0x08006c54
 80053f8:	08006d30 	.word	0x08006d30
 80053fc:	08006d04 	.word	0x08006d04

08005400 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005400:	4770      	bx	lr

08005402 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005402:	e7fe      	b.n	8005402 <HardFault_Handler>

08005404 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005404:	e7fe      	b.n	8005404 <MemManage_Handler>

08005406 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005406:	e7fe      	b.n	8005406 <BusFault_Handler>

08005408 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005408:	e7fe      	b.n	8005408 <UsageFault_Handler>

0800540a <SVC_Handler>:
 800540a:	4770      	bx	lr

0800540c <DebugMon_Handler>:
 800540c:	4770      	bx	lr

0800540e <PendSV_Handler>:
 800540e:	4770      	bx	lr

08005410 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Delay_us(990);
	SysTick_Callback();
 8005410:	f7ff bb12 	b.w	8004a38 <SysTick_Callback>

08005414 <DMA1_Channel1_IRQHandler>:
 8005414:	4770      	bx	lr
	...

08005418 <USART1_IRQHandler>:
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 8005418:	4914      	ldr	r1, [pc, #80]	; (800546c <USART1_IRQHandler+0x54>)
 800541a:	680b      	ldr	r3, [r1, #0]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	d524      	bpl.n	800546a <USART1_IRQHandler+0x52>
	{
		if (bufferUart1.tx_counter > 0) //если есть что передать
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <USART1_IRQHandler+0x58>)
 8005422:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005426:	b292      	uxth	r2, r2
 8005428:	b1da      	cbz	r2, 8005462 <USART1_IRQHandler+0x4a>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количество не переданных данных
 800542a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800542e:	3a01      	subs	r2, #1
 8005430:	b292      	uxth	r2, r2
 8005432:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементируя хвост буфера
 8005436:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 800543a:	b292      	uxth	r2, r2
 800543c:	1c50      	adds	r0, r2, #1
 800543e:	b280      	uxth	r0, r0
 8005440:	f8a3 0456 	strh.w	r0, [r3, #1110]	; 0x456
 8005444:	441a      	add	r2, r3
 8005446:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	604a      	str	r2, [r1, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 800544e:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 8005452:	b292      	uxth	r2, r2
 8005454:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005458:	d107      	bne.n	800546a <USART1_IRQHandler+0x52>
 800545a:	2200      	movs	r2, #0
 800545c:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
 8005460:	4770      	bx	lr
	    }
	    else //если нечего передать, запрещаем прерывание по передачи
	    {
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005462:	68cb      	ldr	r3, [r1, #12]
 8005464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005468:	60cb      	str	r3, [r1, #12]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800546a:	4770      	bx	lr
 800546c:	40013800 	.word	0x40013800
 8005470:	200002b8 	.word	0x200002b8

08005474 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005474:	4770      	bx	lr
	...

08005478 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005478:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <SystemCoreClockUpdate+0x4c>)
{
 800547a:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800547c:	6853      	ldr	r3, [r2, #4]
  
  switch (tmp)
 800547e:	4912      	ldr	r1, [pc, #72]	; (80054c8 <SystemCoreClockUpdate+0x50>)
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005480:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8005484:	2b08      	cmp	r3, #8
 8005486:	d00a      	beq.n	800549e <SystemCoreClockUpdate+0x26>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005488:	4b10      	ldr	r3, [pc, #64]	; (80054cc <SystemCoreClockUpdate+0x54>)
      else
      {
 #if defined(STM32F100xB) || defined(STM32F100xE)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800548a:	600b      	str	r3, [r1, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800548c:	6853      	ldr	r3, [r2, #4]
 800548e:	4a10      	ldr	r2, [pc, #64]	; (80054d0 <SystemCoreClockUpdate+0x58>)
 8005490:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005494:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8005496:	680b      	ldr	r3, [r1, #0]
 8005498:	40d3      	lsrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]
}
 800549c:	bd10      	pop	{r4, pc}
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800549e:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80054a0:	6850      	ldr	r0, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 80054a2:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00U)
 80054a6:	03c0      	lsls	r0, r0, #15
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 80054a8:	bf41      	itttt	mi
 80054aa:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80054ac:	4c07      	ldrmi	r4, [pc, #28]	; (80054cc <SystemCoreClockUpdate+0x54>)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1U;
 80054ae:	f000 000f 	andmi.w	r0, r0, #15
 80054b2:	3001      	addmi	r0, #1
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80054b4:	bf4c      	ite	mi
 80054b6:	fbb4 f0f0 	udivmi	r0, r4, r0
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80054ba:	4806      	ldrpl	r0, [pc, #24]	; (80054d4 <SystemCoreClockUpdate+0x5c>)
      pllmull = ( pllmull >> 18U) + 2U;
 80054bc:	3302      	adds	r3, #2
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80054be:	4343      	muls	r3, r0
 80054c0:	e7e3      	b.n	800548a <SystemCoreClockUpdate+0x12>
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
 80054c8:	2000028c 	.word	0x2000028c
 80054cc:	007a1200 	.word	0x007a1200
 80054d0:	080070c9 	.word	0x080070c9
 80054d4:	003d0900 	.word	0x003d0900

080054d8 <printToBufferUART1>:
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80054d8:	2100      	movs	r1, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80054da:	4a30      	ldr	r2, [pc, #192]	; (800559c <printToBufferUART1+0xc4>)
{
 80054dc:	b510      	push	{r4, lr}
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80054de:	68d3      	ldr	r3, [r2, #12]
 80054e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e4:	60d3      	str	r3, [r2, #12]
	while (*str != 0)
 80054e6:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <printToBufferUART1+0xc8>)
 80054e8:	7802      	ldrb	r2, [r0, #0]
 80054ea:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80054ee:	bb5a      	cbnz	r2, 8005548 <printToBufferUART1+0x70>
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 80054f0:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80054f4:	b292      	uxth	r2, r2
 80054f6:	1c51      	adds	r1, r2, #1
 80054f8:	b289      	uxth	r1, r1
 80054fa:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 80054fe:	210a      	movs	r1, #10
 8005500:	441a      	add	r2, r3
 8005502:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005506:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800550a:	b292      	uxth	r2, r2
 800550c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005510:	bf08      	it	eq
 8005512:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005516:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800551a:	3201      	adds	r2, #1
 800551c:	b292      	uxth	r2, r2
 800551e:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005522:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 8005526:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800552a:	b289      	uxth	r1, r1
 800552c:	b292      	uxth	r2, r2
 800552e:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005530:	bf3e      	ittt	cc
 8005532:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005536:	b292      	uxthcc	r2, r2
 8005538:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 800553c:	4a17      	ldr	r2, [pc, #92]	; (800559c <printToBufferUART1+0xc4>)
 800553e:	68d3      	ldr	r3, [r2, #12]
 8005540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005544:	60d3      	str	r3, [r2, #12]
}
 8005546:	bd10      	pop	{r4, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005548:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800554c:	b292      	uxth	r2, r2
 800554e:	1c54      	adds	r4, r2, #1
 8005550:	b2a4      	uxth	r4, r4
 8005552:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 8005556:	f810 4b01 	ldrb.w	r4, [r0], #1
 800555a:	441a      	add	r2, r3
 800555c:	b2e4      	uxtb	r4, r4
 800555e:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005562:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005566:	b292      	uxth	r2, r2
 8005568:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800556c:	bf08      	it	eq
 800556e:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005572:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005576:	3201      	adds	r2, #1
 8005578:	b292      	uxth	r2, r2
 800557a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800557e:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 8005582:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005586:	b2a4      	uxth	r4, r4
 8005588:	b292      	uxth	r2, r2
 800558a:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800558c:	bf3e      	ittt	cc
 800558e:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005592:	b292      	uxthcc	r2, r2
 8005594:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 8005598:	e7a6      	b.n	80054e8 <printToBufferUART1+0x10>
 800559a:	bf00      	nop
 800559c:	40013800 	.word	0x40013800
 80055a0:	200002b8 	.word	0x200002b8

080055a4 <printToBufferWithoutEndUART1>:
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80055a4:	2100      	movs	r1, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80055a6:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <printToBufferWithoutEndUART1+0x74>)
{
 80055a8:	b510      	push	{r4, lr}
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 80055aa:	68d3      	ldr	r3, [r2, #12]
 80055ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b0:	60d3      	str	r3, [r2, #12]
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80055b2:	4b1a      	ldr	r3, [pc, #104]	; (800561c <printToBufferWithoutEndUART1+0x78>)
	while (*str != 0)
 80055b4:	7802      	ldrb	r2, [r0, #0]
 80055b6:	b92a      	cbnz	r2, 80055c4 <printToBufferWithoutEndUART1+0x20>
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <printToBufferWithoutEndUART1+0x74>)
 80055ba:	68d3      	ldr	r3, [r2, #12]
 80055bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c0:	60d3      	str	r3, [r2, #12]
}
 80055c2:	bd10      	pop	{r4, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80055c4:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80055c8:	b292      	uxth	r2, r2
 80055ca:	1c54      	adds	r4, r2, #1
 80055cc:	b2a4      	uxth	r4, r4
 80055ce:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 80055d2:	f810 4b01 	ldrb.w	r4, [r0], #1
 80055d6:	441a      	add	r2, r3
 80055d8:	b2e4      	uxtb	r4, r4
 80055da:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80055de:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80055e2:	b292      	uxth	r2, r2
 80055e4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80055e8:	bf08      	it	eq
 80055ea:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80055ee:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80055f2:	3201      	adds	r2, #1
 80055f4:	b292      	uxth	r2, r2
 80055f6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80055fa:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 80055fe:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005602:	b2a4      	uxth	r4, r4
 8005604:	b292      	uxth	r2, r2
 8005606:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005608:	bf3e      	ittt	cc
 800560a:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 800560e:	b292      	uxthcc	r2, r2
 8005610:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 8005614:	e7ce      	b.n	80055b4 <printToBufferWithoutEndUART1+0x10>
 8005616:	bf00      	nop
 8005618:	40013800 	.word	0x40013800
 800561c:	200002b8 	.word	0x200002b8

08005620 <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 8005620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005622:	9101      	str	r1, [sp, #4]
 8005624:	f88d 2003 	strb.w	r2, [sp, #3]
	char *str1;
	if (koma == 0)
 8005628:	f89d 3003 	ldrb.w	r3, [sp, #3]
{
 800562c:	4604      	mov	r4, r0
		str1 = itoa(value);
 800562e:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 8005630:	2b00      	cmp	r3, #0
 8005632:	d13f      	bne.n	80056b4 <printToBufferUART1D+0x94>
		str1 = itoa(value);
 8005634:	f7fb fe8e 	bl	8001354 <itoa>
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005638:	2500      	movs	r5, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800563a:	4a47      	ldr	r2, [pc, #284]	; (8005758 <printToBufferUART1D+0x138>)
 800563c:	68d3      	ldr	r3, [r2, #12]
 800563e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005642:	60d3      	str	r3, [r2, #12]
	while (*str != 0)
 8005644:	4b45      	ldr	r3, [pc, #276]	; (800575c <printToBufferUART1D+0x13c>)
 8005646:	7822      	ldrb	r2, [r4, #0]
 8005648:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800564c:	2a00      	cmp	r2, #0
 800564e:	d136      	bne.n	80056be <printToBufferUART1D+0x9e>
 8005650:	3801      	subs	r0, #1

	}

	while (*str1 != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005652:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
	while (*str1 != 0)
 8005656:	f810 4f01 	ldrb.w	r4, [r0, #1]!
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 800565a:	b292      	uxth	r2, r2
	while (*str1 != 0)
 800565c:	2c00      	cmp	r4, #0
 800565e:	d157      	bne.n	8005710 <printToBufferUART1D+0xf0>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8005660:	1c51      	adds	r1, r2, #1
 8005662:	b289      	uxth	r1, r1
 8005664:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 8005668:	210a      	movs	r1, #10
 800566a:	441a      	add	r2, r3
 800566c:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005670:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005674:	b292      	uxth	r2, r2
 8005676:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800567a:	bf08      	it	eq
 800567c:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005680:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005684:	3201      	adds	r2, #1
 8005686:	b292      	uxth	r2, r2
 8005688:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800568c:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 8005690:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005694:	b289      	uxth	r1, r1
 8005696:	b292      	uxth	r2, r2
 8005698:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800569a:	bf3e      	ittt	cc
 800569c:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 80056a0:	b292      	uxthcc	r2, r2
 80056a2:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80056a6:	4a2c      	ldr	r2, [pc, #176]	; (8005758 <printToBufferUART1D+0x138>)
 80056a8:	68d3      	ldr	r3, [r2, #12]
 80056aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ae:	60d3      	str	r3, [r2, #12]
}
 80056b0:	b003      	add	sp, #12
 80056b2:	bd30      	pop	{r4, r5, pc}
		str1 = itoa_koma(value,koma);
 80056b4:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80056b8:	f7fb fec4 	bl	8001444 <itoa_koma>
 80056bc:	e7bc      	b.n	8005638 <printToBufferUART1D+0x18>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80056be:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80056c2:	b292      	uxth	r2, r2
 80056c4:	1c51      	adds	r1, r2, #1
 80056c6:	b289      	uxth	r1, r1
 80056c8:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 80056cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d0:	441a      	add	r2, r3
 80056d2:	b2c9      	uxtb	r1, r1
 80056d4:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80056d8:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80056dc:	b292      	uxth	r2, r2
 80056de:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80056e2:	bf08      	it	eq
 80056e4:	f8a3 5454 	strheq.w	r5, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80056e8:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80056ec:	3201      	adds	r2, #1
 80056ee:	b292      	uxth	r2, r2
 80056f0:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80056f4:	f8b3 145a 	ldrh.w	r1, [r3, #1114]	; 0x45a
 80056f8:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80056fc:	b289      	uxth	r1, r1
 80056fe:	b292      	uxth	r2, r2
 8005700:	4291      	cmp	r1, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005702:	bf3e      	ittt	cc
 8005704:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005708:	b292      	uxthcc	r2, r2
 800570a:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 800570e:	e79a      	b.n	8005646 <printToBufferUART1D+0x26>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005710:	1c54      	adds	r4, r2, #1
 8005712:	b2a4      	uxth	r4, r4
 8005714:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 8005718:	7804      	ldrb	r4, [r0, #0]
 800571a:	441a      	add	r2, r3
 800571c:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005720:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005724:	b292      	uxth	r2, r2
 8005726:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800572a:	bf08      	it	eq
 800572c:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005730:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005734:	3201      	adds	r2, #1
 8005736:	b292      	uxth	r2, r2
 8005738:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800573c:	f8b3 445a 	ldrh.w	r4, [r3, #1114]	; 0x45a
 8005740:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005744:	b2a4      	uxth	r4, r4
 8005746:	b292      	uxth	r2, r2
 8005748:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800574a:	bf3e      	ittt	cc
 800574c:	f8b3 2458 	ldrhcc.w	r2, [r3, #1112]	; 0x458
 8005750:	b292      	uxthcc	r2, r2
 8005752:	f8a3 245a 	strhcc.w	r2, [r3, #1114]	; 0x45a
 8005756:	e77c      	b.n	8005652 <printToBufferUART1D+0x32>
 8005758:	40013800 	.word	0x40013800
 800575c:	200002b8 	.word	0x200002b8

08005760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005760:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005762:	e003      	b.n	800576c <LoopCopyDataInit>

08005764 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005766:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005768:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800576a:	3104      	adds	r1, #4

0800576c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800576c:	480a      	ldr	r0, [pc, #40]	; (8005798 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800576e:	4b0b      	ldr	r3, [pc, #44]	; (800579c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005770:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005772:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005774:	d3f6      	bcc.n	8005764 <CopyDataInit>
  ldr r2, =_sbss
 8005776:	4a0a      	ldr	r2, [pc, #40]	; (80057a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005778:	e002      	b.n	8005780 <LoopFillZerobss>

0800577a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800577a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800577c:	f842 3b04 	str.w	r3, [r2], #4

08005780 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005780:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005782:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005784:	d3f9      	bcc.n	800577a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005786:	f7ff fe75 	bl	8005474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800578a:	f000 f99f 	bl	8005acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800578e:	f7ff fa1f 	bl	8004bd0 <main>
  bx lr
 8005792:	4770      	bx	lr
  ldr r3, =_sidata
 8005794:	080070ec 	.word	0x080070ec
  ldr r0, =_sdata
 8005798:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800579c:	20000290 	.word	0x20000290
  ldr r2, =_sbss
 80057a0:	20000290 	.word	0x20000290
  ldr r3, = _ebss
 80057a4:	20000a20 	.word	0x20000a20

080057a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80057a8:	e7fe      	b.n	80057a8 <ADC1_IRQHandler>

080057aa <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80057aa:	4602      	mov	r2, r0
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80057ac:	6880      	ldr	r0, [r0, #8]
 80057ae:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80057b0:	f010 0001 	ands.w	r0, r0, #1
 80057b4:	d10c      	bne.n	80057d0 <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80057b6:	6853      	ldr	r3, [r2, #4]
 80057b8:	684c      	ldr	r4, [r1, #4]
 80057ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057be:	4323      	orrs	r3, r4
 80057c0:	6053      	str	r3, [r2, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80057c2:	6893      	ldr	r3, [r2, #8]
 80057c4:	6809      	ldr	r1, [r1, #0]
 80057c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ca:	430b      	orrs	r3, r1
 80057cc:	6093      	str	r3, [r2, #8]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80057ce:	bd10      	pop	{r4, pc}
    status = ERROR;
 80057d0:	2001      	movs	r0, #1
 80057d2:	e7fc      	b.n	80057ce <LL_ADC_Init+0x24>

080057d4 <LL_ADC_REG_Init>:
 80057d4:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80057d6:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80057d8:	07db      	lsls	r3, r3, #31
 80057da:	d41b      	bmi.n	8005814 <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 80057dc:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80057de:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 80057e0:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80057e4:	b112      	cbz	r2, 80057ec <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 80057e6:	688c      	ldr	r4, [r1, #8]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80057ec:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80057ee:	6883      	ldr	r3, [r0, #8]
 80057f0:	680c      	ldr	r4, [r1, #0]
 80057f2:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80057f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80057fa:	4323      	orrs	r3, r4
 80057fc:	68cc      	ldr	r4, [r1, #12]
 80057fe:	6909      	ldr	r1, [r1, #16]
 8005800:	4323      	orrs	r3, r4
 8005802:	430b      	orrs	r3, r1
 8005804:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005806:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005808:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800580c:	4313      	orrs	r3, r2
 800580e:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 8005810:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8005812:	bd10      	pop	{r4, pc}
    status = ERROR;
 8005814:	2001      	movs	r0, #1
 8005816:	e7fc      	b.n	8005812 <LL_ADC_REG_Init+0x3e>

08005818 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800581c:	680d      	ldr	r5, [r1, #0]
{
 800581e:	4604      	mov	r4, r0
  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8005820:	f3c5 250f 	ubfx	r5, r5, #8, #16
 8005824:	fa95 f2a5 	rbit	r2, r5
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005828:	f04f 0a0f 	mov.w	sl, #15
  pinpos = POSITION_VAL(pinmask);
 800582c:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8005830:	f04f 0903 	mov.w	r9, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8005834:	2704      	movs	r7, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005836:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 800583a:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 800583e:	fa35 f002 	lsrs.w	r0, r5, r2
 8005842:	d101      	bne.n	8005848 <LL_GPIO_Init+0x30>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8005844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 8005848:	2301      	movs	r3, #1
 800584a:	4093      	lsls	r3, r2
 800584c:	422b      	tst	r3, r5
 800584e:	d05e      	beq.n	800590e <LL_GPIO_Init+0xf6>
      if (pinpos < GPIO_PIN_MASK_POS)
 8005850:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005852:	bf85      	ittet	hi
 8005854:	f1a2 0308 	subhi.w	r3, r2, #8
 8005858:	fa0c f303 	lslhi.w	r3, ip, r3
        currentpin = (0x00000101uL << pinpos);
 800585c:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005860:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8005864:	68e0      	ldr	r0, [r4, #12]
 8005866:	0a1e      	lsrs	r6, r3, #8
 8005868:	fa96 f8a6 	rbit	r8, r6
 800586c:	fab8 f888 	clz	r8, r8
 8005870:	ea20 0606 	bic.w	r6, r0, r6
 8005874:	6908      	ldr	r0, [r1, #16]
 8005876:	fa00 f008 	lsl.w	r0, r0, r8
 800587a:	4330      	orrs	r0, r6
 800587c:	60e0      	str	r0, [r4, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800587e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8005882:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005886:	fab6 f686 	clz	r6, r6
 800588a:	fa93 fba3 	rbit	fp, r3
 800588e:	fabb fb8b 	clz	fp, fp
 8005892:	00b6      	lsls	r6, r6, #2
 8005894:	fa0a f006 	lsl.w	r0, sl, r6
 8005898:	f854 6008 	ldr.w	r6, [r4, r8]
 800589c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80058a0:	ea26 0600 	bic.w	r6, r6, r0
 80058a4:	6848      	ldr	r0, [r1, #4]
 80058a6:	fa00 fb0b 	lsl.w	fp, r0, fp
 80058aa:	ea46 060b 	orr.w	r6, r6, fp
 80058ae:	f844 6008 	str.w	r6, [r4, r8]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80058b2:	6848      	ldr	r0, [r1, #4]
 80058b4:	f020 0008 	bic.w	r0, r0, #8
 80058b8:	2801      	cmp	r0, #1
 80058ba:	d128      	bne.n	800590e <LL_GPIO_Init+0xf6>
 80058bc:	fa93 f0a3 	rbit	r0, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80058c0:	fab0 f080 	clz	r0, r0
 80058c4:	fa93 fba3 	rbit	fp, r3
 80058c8:	fabb fb8b 	clz	fp, fp
 80058cc:	0080      	lsls	r0, r0, #2
 80058ce:	fa09 f000 	lsl.w	r0, r9, r0
 80058d2:	ea26 0600 	bic.w	r6, r6, r0
 80058d6:	6888      	ldr	r0, [r1, #8]
 80058d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80058dc:	fa00 fb0b 	lsl.w	fp, r0, fp
 80058e0:	ea46 060b 	orr.w	r6, r6, fp
 80058e4:	f844 6008 	str.w	r6, [r4, r8]
 80058e8:	fa93 f0a3 	rbit	r0, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80058ec:	fab0 f080 	clz	r0, r0
 80058f0:	fa93 f3a3 	rbit	r3, r3
 80058f4:	fab3 f383 	clz	r3, r3
 80058f8:	0080      	lsls	r0, r0, #2
 80058fa:	fa07 f000 	lsl.w	r0, r7, r0
 80058fe:	ea26 0000 	bic.w	r0, r6, r0
 8005902:	68ce      	ldr	r6, [r1, #12]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	409e      	lsls	r6, r3
 8005908:	4306      	orrs	r6, r0
 800590a:	f844 6008 	str.w	r6, [r4, r8]
    pinpos++;
 800590e:	3201      	adds	r2, #1
 8005910:	e795      	b.n	800583e <LL_GPIO_Init+0x26>
	...

08005914 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005914:	4b03      	ldr	r3, [pc, #12]	; (8005924 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005916:	4a04      	ldr	r2, [pc, #16]	; (8005928 <RCC_GetHCLKClockFreq+0x14>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800591e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005920:	40d8      	lsrs	r0, r3
 8005922:	4770      	bx	lr
 8005924:	40021000 	.word	0x40021000
 8005928:	080070c9 	.word	0x080070c9

0800592c <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800592c:	4b03      	ldr	r3, [pc, #12]	; (800593c <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800592e:	4a04      	ldr	r2, [pc, #16]	; (8005940 <RCC_GetPCLK1ClockFreq+0x14>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005936:	5cd3      	ldrb	r3, [r2, r3]
}
 8005938:	40d8      	lsrs	r0, r3
 800593a:	4770      	bx	lr
 800593c:	40021000 	.word	0x40021000
 8005940:	080070d9 	.word	0x080070d9

08005944 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005946:	4a04      	ldr	r2, [pc, #16]	; (8005958 <RCC_GetPCLK2ClockFreq+0x14>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800594e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005950:	40d8      	lsrs	r0, r3
 8005952:	4770      	bx	lr
 8005954:	40021000 	.word	0x40021000
 8005958:	080070d9 	.word	0x080070d9

0800595c <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800595c:	4b09      	ldr	r3, [pc, #36]	; (8005984 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 800595e:	685a      	ldr	r2, [r3, #4]
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8005960:	03d2      	lsls	r2, r2, #15
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8005962:	bf41      	itttt	mi
 8005964:	6ad8      	ldrmi	r0, [r3, #44]	; 0x2c
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8005966:	4a08      	ldrmi	r2, [pc, #32]	; (8005988 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8005968:	f000 000f 	andmi.w	r0, r0, #15
 800596c:	3001      	addmi	r0, #1
 800596e:	bf48      	it	mi
 8005970:	fbb2 f0f0 	udivmi	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8005974:	685b      	ldr	r3, [r3, #4]
      pllinputfreq = HSI_VALUE / 2U;
 8005976:	bf58      	it	pl
 8005978:	4804      	ldrpl	r0, [pc, #16]	; (800598c <RCC_PLL_GetFreqDomain_SYS+0x30>)

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800597a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800597e:	3302      	adds	r3, #2
}
 8005980:	4358      	muls	r0, r3
 8005982:	4770      	bx	lr
 8005984:	40021000 	.word	0x40021000
 8005988:	007a1200 	.word	0x007a1200
 800598c:	003d0900 	.word	0x003d0900

08005990 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <RCC_GetSystemClockFreq+0x14>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005998:	2b08      	cmp	r3, #8
 800599a:	d101      	bne.n	80059a0 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800599c:	f7ff bfde 	b.w	800595c <RCC_PLL_GetFreqDomain_SYS>
}
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <RCC_GetSystemClockFreq+0x18>)
 80059a2:	4770      	bx	lr
 80059a4:	40021000 	.word	0x40021000
 80059a8:	007a1200 	.word	0x007a1200

080059ac <LL_RCC_GetSystemClocksFreq>:
{
 80059ac:	b508      	push	{r3, lr}
 80059ae:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80059b0:	f7ff ffee 	bl	8005990 <RCC_GetSystemClockFreq>
 80059b4:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80059b6:	f7ff ffad 	bl	8005914 <RCC_GetHCLKClockFreq>
 80059ba:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80059bc:	f7ff ffb6 	bl	800592c <RCC_GetPCLK1ClockFreq>
 80059c0:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80059c2:	6848      	ldr	r0, [r1, #4]
 80059c4:	f7ff ffbe 	bl	8005944 <RCC_GetPCLK2ClockFreq>
 80059c8:	60c8      	str	r0, [r1, #12]
}
 80059ca:	bd08      	pop	{r3, pc}

080059cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80059cc:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80059ce:	68c3      	ldr	r3, [r0, #12]
 80059d0:	4604      	mov	r4, r0
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80059d2:	049b      	lsls	r3, r3, #18
{
 80059d4:	460d      	mov	r5, r1
 80059d6:	b085      	sub	sp, #20
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80059d8:	d502      	bpl.n	80059e0 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 80059da:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80059dc:	b005      	add	sp, #20
 80059de:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 80059e0:	684b      	ldr	r3, [r1, #4]
 80059e2:	68c9      	ldr	r1, [r1, #12]
 80059e4:	68c2      	ldr	r2, [r0, #12]
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6929      	ldr	r1, [r5, #16]
 80059ea:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80059ee:	430b      	orrs	r3, r1
 80059f0:	69a9      	ldr	r1, [r5, #24]
 80059f2:	f022 020c 	bic.w	r2, r2, #12
 80059f6:	430b      	orrs	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80059fc:	6903      	ldr	r3, [r0, #16]
 80059fe:	68aa      	ldr	r2, [r5, #8]
 8005a00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a04:	4313      	orrs	r3, r2
 8005a06:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005a08:	6943      	ldr	r3, [r0, #20]
 8005a0a:	696a      	ldr	r2, [r5, #20]
 8005a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a10:	4313      	orrs	r3, r2
 8005a12:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005a14:	4668      	mov	r0, sp
 8005a16:	f7ff ffc9 	bl	80059ac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005a1a:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <LL_USART_Init+0xcc>)
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	d124      	bne.n	8005a6a <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005a20:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d0d9      	beq.n	80059da <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8005a26:	682a      	ldr	r2, [r5, #0]
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	d0d6      	beq.n	80059da <LL_USART_Init+0xe>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005a2c:	2319      	movs	r3, #25
 8005a2e:	434b      	muls	r3, r1
 8005a30:	69a9      	ldr	r1, [r5, #24]
 8005a32:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005a36:	f04f 0164 	mov.w	r1, #100	; 0x64
 8005a3a:	d11f      	bne.n	8005a7c <LL_USART_Init+0xb0>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005a3c:	0052      	lsls	r2, r2, #1
 8005a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a42:	fbb3 f0f1 	udiv	r0, r3, r1
 8005a46:	fb01 3310 	mls	r3, r1, r0, r3
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	3332      	adds	r3, #50	; 0x32
 8005a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a52:	f003 0207 	and.w	r2, r3, #7
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a60:	4413      	add	r3, r2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005a62:	b29b      	uxth	r3, r3
      status = SUCCESS;
 8005a64:	2000      	movs	r0, #0
 8005a66:	60a3      	str	r3, [r4, #8]
 8005a68:	e7b8      	b.n	80059dc <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <LL_USART_Init+0xd0>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d101      	bne.n	8005a74 <LL_USART_Init+0xa8>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005a70:	9902      	ldr	r1, [sp, #8]
 8005a72:	e7d6      	b.n	8005a22 <LL_USART_Init+0x56>
    else if (USARTx == USART3)
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <LL_USART_Init+0xd4>)
 8005a76:	429c      	cmp	r4, r3
 8005a78:	d1af      	bne.n	80059da <LL_USART_Init+0xe>
 8005a7a:	e7f9      	b.n	8005a70 <LL_USART_Init+0xa4>
 8005a7c:	0092      	lsls	r2, r2, #2
 8005a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a82:	fbb3 f2f1 	udiv	r2, r3, r1
 8005a86:	fb01 3312 	mls	r3, r1, r2, r3
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	3332      	adds	r3, #50	; 0x32
 8005a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a92:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005a96:	e7e4      	b.n	8005a62 <LL_USART_Init+0x96>
 8005a98:	40013800 	.word	0x40013800
 8005a9c:	40004400 	.word	0x40004400
 8005aa0:	40004800 	.word	0x40004800

08005aa4 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aa8:	fbb0 f0f3 	udiv	r0, r0, r3
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005aac:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <LL_Init1msTick+0x18>)
 8005ab0:	3801      	subs	r0, #1
 8005ab2:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8005aba:	4770      	bx	lr
 8005abc:	e000e010 	.word	0xe000e010

08005ac0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005ac0:	4b01      	ldr	r3, [pc, #4]	; (8005ac8 <LL_SetSystemCoreClock+0x8>)
 8005ac2:	6018      	str	r0, [r3, #0]
}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	2000028c 	.word	0x2000028c

08005acc <__libc_init_array>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	2600      	movs	r6, #0
 8005ad0:	4d0c      	ldr	r5, [pc, #48]	; (8005b04 <__libc_init_array+0x38>)
 8005ad2:	4c0d      	ldr	r4, [pc, #52]	; (8005b08 <__libc_init_array+0x3c>)
 8005ad4:	1b64      	subs	r4, r4, r5
 8005ad6:	10a4      	asrs	r4, r4, #2
 8005ad8:	42a6      	cmp	r6, r4
 8005ada:	d109      	bne.n	8005af0 <__libc_init_array+0x24>
 8005adc:	f000 f830 	bl	8005b40 <_init>
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	4d0a      	ldr	r5, [pc, #40]	; (8005b0c <__libc_init_array+0x40>)
 8005ae4:	4c0a      	ldr	r4, [pc, #40]	; (8005b10 <__libc_init_array+0x44>)
 8005ae6:	1b64      	subs	r4, r4, r5
 8005ae8:	10a4      	asrs	r4, r4, #2
 8005aea:	42a6      	cmp	r6, r4
 8005aec:	d105      	bne.n	8005afa <__libc_init_array+0x2e>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af4:	4798      	blx	r3
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7ee      	b.n	8005ad8 <__libc_init_array+0xc>
 8005afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afe:	4798      	blx	r3
 8005b00:	3601      	adds	r6, #1
 8005b02:	e7f2      	b.n	8005aea <__libc_init_array+0x1e>
 8005b04:	080070e4 	.word	0x080070e4
 8005b08:	080070e4 	.word	0x080070e4
 8005b0c:	080070e4 	.word	0x080070e4
 8005b10:	080070e8 	.word	0x080070e8

08005b14 <memcpy>:
 8005b14:	440a      	add	r2, r1
 8005b16:	4291      	cmp	r1, r2
 8005b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b1c:	d100      	bne.n	8005b20 <memcpy+0xc>
 8005b1e:	4770      	bx	lr
 8005b20:	b510      	push	{r4, lr}
 8005b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b26:	4291      	cmp	r1, r2
 8005b28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b2c:	d1f9      	bne.n	8005b22 <memcpy+0xe>
 8005b2e:	bd10      	pop	{r4, pc}

08005b30 <memset>:
 8005b30:	4603      	mov	r3, r0
 8005b32:	4402      	add	r2, r0
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d100      	bne.n	8005b3a <memset+0xa>
 8005b38:	4770      	bx	lr
 8005b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3e:	e7f9      	b.n	8005b34 <memset+0x4>

08005b40 <_init>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr

08005b4c <_fini>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr
